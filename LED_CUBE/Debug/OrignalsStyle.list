
OrignalsStyle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c88  08006c88  00008090  2**0
                  CONTENTS
  4 .ARM          00000008  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c90  08006c90  00008090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08006c98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001114  20000090  08006d28  00008090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011a4  08006d28  000081a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013eee  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c61  00000000  00000000  0001bfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a601  00000000  00000000  0001ec0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00029210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbb  00000000  00000000  00029f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001822e  00000000  00000000  0002af2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017284  00000000  00000000  00043159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009202c  00000000  00000000  0005a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ec409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032ac  00000000  00000000  000ec44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  000ef6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800667c 	.word	0x0800667c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800667c 	.word	0x0800667c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <CUBE_Patterns_SetMode>:
  * @param  mode: PATTERN_STATIC or PATTERN_DYNAMIC
  * @retval None
  */
void CUBE_Patterns_SetMode(uint8_t mode)
{
    if (mode <= PATTERN_DYNAMIC) {
 8000580:	2801      	cmp	r0, #1
 8000582:	d900      	bls.n	8000586 <CUBE_Patterns_SetMode+0x6>
        patternMode = mode;
        animationStep = 0; // Reset animation steps when mode changes
    }
}
 8000584:	4770      	bx	lr
        patternMode = mode;
 8000586:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <CUBE_Patterns_SetMode+0x14>)
 8000588:	7018      	strb	r0, [r3, #0]
        animationStep = 0; // Reset animation steps when mode changes
 800058a:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <CUBE_Patterns_SetMode+0x18>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	e7f8      	b.n	8000584 <CUBE_Patterns_SetMode+0x4>
 8000592:	bf00      	nop
 8000594:	20000438 	.word	0x20000438
 8000598:	20000434 	.word	0x20000434

0800059c <CUBE_Patterns_GetMode>:
  * @retval Pattern mode (PATTERN_STATIC or PATTERN_DYNAMIC)
  */
uint8_t CUBE_Patterns_GetMode(void)
{
    return patternMode;
}
 800059c:	4b01      	ldr	r3, [pc, #4]	@ (80005a4 <CUBE_Patterns_GetMode+0x8>)
 800059e:	7818      	ldrb	r0, [r3, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000438 	.word	0x20000438

080005a8 <CUBE_Patterns_ShowStaticPattern>:
  * @brief  Display a static pattern
  * @param  patternIndex: Index of pattern to display
  * @retval None
  */
void CUBE_Patterns_ShowStaticPattern(uint8_t patternIndex)
{
 80005a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005ac:	4604      	mov	r4, r0
    // Clear cube first
    LED_Cube_Clear();
 80005ae:	f001 f803 	bl	80015b8 <LED_Cube_Clear>
    
    switch(patternIndex) {
 80005b2:	2c08      	cmp	r4, #8
 80005b4:	d848      	bhi.n	8000648 <CUBE_Patterns_ShowStaticPattern+0xa0>
 80005b6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80005ba:	0044      	.short	0x0044
 80005bc:	0029002d 	.word	0x0029002d
 80005c0:	00200025 	.word	0x00200025
 80005c4:	0017001c 	.word	0x0017001c
 80005c8:	01210009 	.word	0x01210009
 80005cc:	4e95      	ldr	r6, [pc, #596]	@ (8000824 <CUBE_Patterns_ShowStaticPattern+0x27c>)
 80005ce:	f1a6 0438 	sub.w	r4, r6, #56	@ 0x38
 80005d2:	eba4 04c4 	sub.w	r4, r4, r4, lsl #3
 80005d6:	f104 0508 	add.w	r5, r4, #8
 80005da:	340f      	adds	r4, #15
 80005dc:	f1a6 0031 	sub.w	r0, r6, #49	@ 0x31
 80005e0:	f206 270f 	addw	r7, r6, #527	@ 0x20f
            break;
            
        case 7: // Diagonal lines across cube
            for (uint8_t i = 0; i < CUBE_SIZE; i++) {
                for (uint8_t j = 0; j < CUBE_SIZE; j++) {
                    cube_data[i][j][i] = 1;       // Corner to corner diagonal
 80005e4:	2201      	movs	r2, #1
 80005e6:	e0fb      	b.n	80007e0 <CUBE_Patterns_ShowStaticPattern+0x238>
 80005e8:	4f8f      	ldr	r7, [pc, #572]	@ (8000828 <CUBE_Patterns_ShowStaticPattern+0x280>)
    switch(patternIndex) {
 80005ea:	f04f 0800 	mov.w	r8, #0
                        cube_data[z][y][x] = (rand() % 5 == 0) ? 1 : 0;
 80005ee:	4e8f      	ldr	r6, [pc, #572]	@ (800082c <CUBE_Patterns_ShowStaticPattern+0x284>)
 80005f0:	e0d5      	b.n	800079e <CUBE_Patterns_ShowStaticPattern+0x1f6>
 80005f2:	4e8f      	ldr	r6, [pc, #572]	@ (8000830 <CUBE_Patterns_ShowStaticPattern+0x288>)
            for (uint8_t z = 1; z < PLANE_COUNT-1; z++) {
 80005f4:	2501      	movs	r5, #1
                for (uint8_t y = 1; y < CUBE_SIZE-1; y++) {
 80005f6:	462c      	mov	r4, r5
 80005f8:	e0c3      	b.n	8000782 <CUBE_Patterns_ShowStaticPattern+0x1da>
 80005fa:	f8df c238 	ldr.w	ip, [pc, #568]	@ 8000834 <CUBE_Patterns_ShowStaticPattern+0x28c>
    switch(patternIndex) {
 80005fe:	2700      	movs	r7, #0
                            cube_data[z][y][x] = 1;
 8000600:	2601      	movs	r6, #1
 8000602:	e09c      	b.n	800073e <CUBE_Patterns_ShowStaticPattern+0x196>
 8000604:	4f8b      	ldr	r7, [pc, #556]	@ (8000834 <CUBE_Patterns_ShowStaticPattern+0x28c>)
    switch(patternIndex) {
 8000606:	2600      	movs	r6, #0
                            cube_data[z][y][x] = 1;
 8000608:	2001      	movs	r0, #1
 800060a:	e06d      	b.n	80006e8 <CUBE_Patterns_ShowStaticPattern+0x140>
 800060c:	4f89      	ldr	r7, [pc, #548]	@ (8000834 <CUBE_Patterns_ShowStaticPattern+0x28c>)
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 800060e:	2600      	movs	r6, #0
                            cube_data[z][y][x] = 1;
 8000610:	2401      	movs	r4, #1
 8000612:	e062      	b.n	80006da <CUBE_Patterns_ShowStaticPattern+0x132>
 8000614:	4887      	ldr	r0, [pc, #540]	@ (8000834 <CUBE_Patterns_ShowStaticPattern+0x28c>)
 8000616:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800061a:	f500 7010 	add.w	r0, r0, #576	@ 0x240
                        cube_data[z][y][x] = 1;
 800061e:	2201      	movs	r2, #1
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000620:	f1a1 0340 	sub.w	r3, r1, #64	@ 0x40
                        cube_data[z][y][x] = 1;
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	705a      	strb	r2, [r3, #1]
 8000628:	709a      	strb	r2, [r3, #2]
 800062a:	70da      	strb	r2, [r3, #3]
 800062c:	711a      	strb	r2, [r3, #4]
 800062e:	715a      	strb	r2, [r3, #5]
 8000630:	719a      	strb	r2, [r3, #6]
 8000632:	71da      	strb	r2, [r3, #7]
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000634:	3308      	adds	r3, #8
 8000636:	428b      	cmp	r3, r1
 8000638:	d1f4      	bne.n	8000624 <CUBE_Patterns_ShowStaticPattern+0x7c>
            for (uint8_t z = 0; z < PLANE_COUNT; z += 2) {
 800063a:	3180      	adds	r1, #128	@ 0x80
 800063c:	4281      	cmp	r1, r0
 800063e:	d1ef      	bne.n	8000620 <CUBE_Patterns_ShowStaticPattern+0x78>
 8000640:	e0a5      	b.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
 8000642:	4879      	ldr	r0, [pc, #484]	@ (8000828 <CUBE_Patterns_ShowStaticPattern+0x280>)
    switch(patternIndex) {
 8000644:	2400      	movs	r4, #0
 8000646:	e01b      	b.n	8000680 <CUBE_Patterns_ShowStaticPattern+0xd8>
 8000648:	487a      	ldr	r0, [pc, #488]	@ (8000834 <CUBE_Patterns_ShowStaticPattern+0x28c>)
 800064a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800064e:	f500 7010 	add.w	r0, r0, #576	@ 0x240
        case 9: // Full cube (all on)
        default:
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
                        cube_data[z][y][x] = 1;
 8000652:	2201      	movs	r2, #1
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000654:	f1a1 0340 	sub.w	r3, r1, #64	@ 0x40
                        cube_data[z][y][x] = 1;
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	705a      	strb	r2, [r3, #1]
 800065c:	709a      	strb	r2, [r3, #2]
 800065e:	70da      	strb	r2, [r3, #3]
 8000660:	711a      	strb	r2, [r3, #4]
 8000662:	715a      	strb	r2, [r3, #5]
 8000664:	719a      	strb	r2, [r3, #6]
 8000666:	71da      	strb	r2, [r3, #7]
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000668:	3308      	adds	r3, #8
 800066a:	4299      	cmp	r1, r3
 800066c:	d1f4      	bne.n	8000658 <CUBE_Patterns_ShowStaticPattern+0xb0>
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 800066e:	3140      	adds	r1, #64	@ 0x40
 8000670:	4281      	cmp	r1, r0
 8000672:	d1ef      	bne.n	8000654 <CUBE_Patterns_ShowStaticPattern+0xac>
 8000674:	e08b      	b.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000676:	3401      	adds	r4, #1
 8000678:	3040      	adds	r0, #64	@ 0x40
 800067a:	2c08      	cmp	r4, #8
 800067c:	f000 8087 	beq.w	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000680:	f1a0 0240 	sub.w	r2, r0, #64	@ 0x40
                        cube_data[z][y][x] = (z % 2 == 0) ? 1 : 0;
 8000684:	43e1      	mvns	r1, r4
 8000686:	f001 0101 	and.w	r1, r1, #1
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 800068a:	f1a2 0308 	sub.w	r3, r2, #8
                        cube_data[z][y][x] = (z % 2 == 0) ? 1 : 0;
 800068e:	f803 1f01 	strb.w	r1, [r3, #1]!
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000692:	429a      	cmp	r2, r3
 8000694:	d1fb      	bne.n	800068e <CUBE_Patterns_ShowStaticPattern+0xe6>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000696:	3208      	adds	r2, #8
 8000698:	4282      	cmp	r2, r0
 800069a:	d1f6      	bne.n	800068a <CUBE_Patterns_ShowStaticPattern+0xe2>
 800069c:	e7eb      	b.n	8000676 <CUBE_Patterns_ShowStaticPattern+0xce>
                            cube_data[z][y][x] = 1;
 800069e:	54cc      	strb	r4, [r1, r3]
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80006a0:	3301      	adds	r3, #1
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	d00d      	beq.n	80006c2 <CUBE_Patterns_ShowStaticPattern+0x11a>
                        if (x == 0 || x == CUBE_SIZE-1 || 
 80006a6:	f013 02ff 	ands.w	r2, r3, #255	@ 0xff
 80006aa:	d0f8      	beq.n	800069e <CUBE_Patterns_ShowStaticPattern+0xf6>
 80006ac:	2a07      	cmp	r2, #7
 80006ae:	d0f6      	beq.n	800069e <CUBE_Patterns_ShowStaticPattern+0xf6>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d0f4      	beq.n	800069e <CUBE_Patterns_ShowStaticPattern+0xf6>
                            y == 0 || y == CUBE_SIZE-1 || 
 80006b4:	2807      	cmp	r0, #7
 80006b6:	d0f2      	beq.n	800069e <CUBE_Patterns_ShowStaticPattern+0xf6>
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d0f0      	beq.n	800069e <CUBE_Patterns_ShowStaticPattern+0xf6>
                            z == 0 || z == PLANE_COUNT-1) {
 80006bc:	2e07      	cmp	r6, #7
 80006be:	d1ef      	bne.n	80006a0 <CUBE_Patterns_ShowStaticPattern+0xf8>
 80006c0:	e7ed      	b.n	800069e <CUBE_Patterns_ShowStaticPattern+0xf6>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 80006c2:	3501      	adds	r5, #1
 80006c4:	3108      	adds	r1, #8
 80006c6:	2d08      	cmp	r5, #8
 80006c8:	d002      	beq.n	80006d0 <CUBE_Patterns_ShowStaticPattern+0x128>
    switch(patternIndex) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	b2e8      	uxtb	r0, r5
 80006ce:	e7ea      	b.n	80006a6 <CUBE_Patterns_ShowStaticPattern+0xfe>
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 80006d0:	3601      	adds	r6, #1
 80006d2:	b2f6      	uxtb	r6, r6
 80006d4:	3740      	adds	r7, #64	@ 0x40
 80006d6:	2e08      	cmp	r6, #8
 80006d8:	d059      	beq.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
    switch(patternIndex) {
 80006da:	4639      	mov	r1, r7
 80006dc:	2500      	movs	r5, #0
 80006de:	e7f4      	b.n	80006ca <CUBE_Patterns_ShowStaticPattern+0x122>
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 80006e0:	3601      	adds	r6, #1
 80006e2:	3740      	adds	r7, #64	@ 0x40
 80006e4:	2e08      	cmp	r6, #8
 80006e6:	d052      	beq.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 80006e8:	f106 0108 	add.w	r1, r6, #8
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 80006ec:	463d      	mov	r5, r7
 80006ee:	2400      	movs	r4, #0
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80006f0:	f1a1 0308 	sub.w	r3, r1, #8
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 80006f4:	462a      	mov	r2, r5
                        if (x + y + z <= CUBE_SIZE + 2) {
 80006f6:	2b0a      	cmp	r3, #10
                            cube_data[z][y][x] = 1;
 80006f8:	bfd8      	it	le
 80006fa:	7010      	strble	r0, [r2, #0]
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80006fc:	3301      	adds	r3, #1
 80006fe:	3201      	adds	r2, #1
 8000700:	428b      	cmp	r3, r1
 8000702:	d1f8      	bne.n	80006f6 <CUBE_Patterns_ShowStaticPattern+0x14e>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000704:	3401      	adds	r4, #1
 8000706:	3101      	adds	r1, #1
 8000708:	3508      	adds	r5, #8
 800070a:	2c08      	cmp	r4, #8
 800070c:	d1f0      	bne.n	80006f0 <CUBE_Patterns_ShowStaticPattern+0x148>
 800070e:	e7e7      	b.n	80006e0 <CUBE_Patterns_ShowStaticPattern+0x138>
                            cube_data[z][y][x] = 1;
 8000710:	54e6      	strb	r6, [r4, r3]
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000712:	3301      	adds	r3, #1
 8000714:	2b08      	cmp	r3, #8
 8000716:	d005      	beq.n	8000724 <CUBE_Patterns_ShowStaticPattern+0x17c>
                        if (x == y || x == (CUBE_SIZE-1-y)) {
 8000718:	b2da      	uxtb	r2, r3
 800071a:	428a      	cmp	r2, r1
 800071c:	d0f8      	beq.n	8000710 <CUBE_Patterns_ShowStaticPattern+0x168>
 800071e:	4283      	cmp	r3, r0
 8000720:	d1f7      	bne.n	8000712 <CUBE_Patterns_ShowStaticPattern+0x16a>
 8000722:	e7f5      	b.n	8000710 <CUBE_Patterns_ShowStaticPattern+0x168>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000724:	3501      	adds	r5, #1
 8000726:	3801      	subs	r0, #1
 8000728:	3408      	adds	r4, #8
 800072a:	2d08      	cmp	r5, #8
 800072c:	d002      	beq.n	8000734 <CUBE_Patterns_ShowStaticPattern+0x18c>
    switch(patternIndex) {
 800072e:	2300      	movs	r3, #0
                        if (x == y || x == (CUBE_SIZE-1-y)) {
 8000730:	b2e9      	uxtb	r1, r5
 8000732:	e7f1      	b.n	8000718 <CUBE_Patterns_ShowStaticPattern+0x170>
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000734:	3708      	adds	r7, #8
 8000736:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 800073a:	2f40      	cmp	r7, #64	@ 0x40
 800073c:	d027      	beq.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
    switch(patternIndex) {
 800073e:	4664      	mov	r4, ip
 8000740:	2007      	movs	r0, #7
 8000742:	2500      	movs	r5, #0
 8000744:	e7f3      	b.n	800072e <CUBE_Patterns_ShowStaticPattern+0x186>
                            cube_data[z][y][x] = 1;
 8000746:	54c4      	strb	r4, [r0, r3]
                    for (uint8_t x = 1; x < CUBE_SIZE-1; x++) {
 8000748:	3301      	adds	r3, #1
 800074a:	2b07      	cmp	r3, #7
 800074c:	d00d      	beq.n	800076a <CUBE_Patterns_ShowStaticPattern+0x1c2>
                        if (x == 1 || x == CUBE_SIZE-2 || 
 800074e:	b2da      	uxtb	r2, r3
 8000750:	2a01      	cmp	r2, #1
 8000752:	d0f8      	beq.n	8000746 <CUBE_Patterns_ShowStaticPattern+0x19e>
 8000754:	2a06      	cmp	r2, #6
 8000756:	d0f6      	beq.n	8000746 <CUBE_Patterns_ShowStaticPattern+0x19e>
 8000758:	2901      	cmp	r1, #1
 800075a:	d0f4      	beq.n	8000746 <CUBE_Patterns_ShowStaticPattern+0x19e>
                            y == 1 || y == CUBE_SIZE-2 || 
 800075c:	2906      	cmp	r1, #6
 800075e:	d0f2      	beq.n	8000746 <CUBE_Patterns_ShowStaticPattern+0x19e>
 8000760:	2d01      	cmp	r5, #1
 8000762:	d0f0      	beq.n	8000746 <CUBE_Patterns_ShowStaticPattern+0x19e>
                            z == 1 || z == PLANE_COUNT-2) {
 8000764:	2d06      	cmp	r5, #6
 8000766:	d1ef      	bne.n	8000748 <CUBE_Patterns_ShowStaticPattern+0x1a0>
 8000768:	e7ed      	b.n	8000746 <CUBE_Patterns_ShowStaticPattern+0x19e>
                for (uint8_t y = 1; y < CUBE_SIZE-1; y++) {
 800076a:	3101      	adds	r1, #1
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	3008      	adds	r0, #8
 8000770:	2907      	cmp	r1, #7
 8000772:	d001      	beq.n	8000778 <CUBE_Patterns_ShowStaticPattern+0x1d0>
    switch(patternIndex) {
 8000774:	2301      	movs	r3, #1
 8000776:	e7ea      	b.n	800074e <CUBE_Patterns_ShowStaticPattern+0x1a6>
            for (uint8_t z = 1; z < PLANE_COUNT-1; z++) {
 8000778:	3501      	adds	r5, #1
 800077a:	b2ed      	uxtb	r5, r5
 800077c:	3640      	adds	r6, #64	@ 0x40
 800077e:	2d07      	cmp	r5, #7
 8000780:	d002      	beq.n	8000788 <CUBE_Patterns_ShowStaticPattern+0x1e0>
    switch(patternIndex) {
 8000782:	4630      	mov	r0, r6
                for (uint8_t y = 1; y < CUBE_SIZE-1; y++) {
 8000784:	4621      	mov	r1, r4
 8000786:	e7f5      	b.n	8000774 <CUBE_Patterns_ShowStaticPattern+0x1cc>
            CUBE_Patterns_ShowStaticPattern(2);
 8000788:	2002      	movs	r0, #2
 800078a:	f7ff ff0d 	bl	80005a8 <CUBE_Patterns_ShowStaticPattern>
                    }
                }
            }
            break;
    }
}
 800078e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000792:	3740      	adds	r7, #64	@ 0x40
 8000794:	f108 0808 	add.w	r8, r8, #8
 8000798:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 800079c:	d0f7      	beq.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 800079e:	f1a7 0540 	sub.w	r5, r7, #64	@ 0x40
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80007a2:	f1a5 0408 	sub.w	r4, r5, #8
                        cube_data[z][y][x] = (rand() % 5 == 0) ? 1 : 0;
 80007a6:	f003 fff1 	bl	800478c <rand>
 80007aa:	fb86 3200 	smull	r3, r2, r6, r0
 80007ae:	17c3      	asrs	r3, r0, #31
 80007b0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80007b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007b8:	4298      	cmp	r0, r3
 80007ba:	bf14      	ite	ne
 80007bc:	2000      	movne	r0, #0
 80007be:	2001      	moveq	r0, #1
 80007c0:	f804 0f01 	strb.w	r0, [r4, #1]!
                    for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80007c4:	42ac      	cmp	r4, r5
 80007c6:	d1ee      	bne.n	80007a6 <CUBE_Patterns_ShowStaticPattern+0x1fe>
                for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 80007c8:	3508      	adds	r5, #8
 80007ca:	42bd      	cmp	r5, r7
 80007cc:	d1e9      	bne.n	80007a2 <CUBE_Patterns_ShowStaticPattern+0x1fa>
 80007ce:	e7e0      	b.n	8000792 <CUBE_Patterns_ShowStaticPattern+0x1ea>
            for (uint8_t i = 0; i < CUBE_SIZE; i++) {
 80007d0:	3638      	adds	r6, #56	@ 0x38
 80007d2:	f2a5 15ff 	subw	r5, r5, #511	@ 0x1ff
 80007d6:	f2a4 2401 	subw	r4, r4, #513	@ 0x201
 80007da:	3048      	adds	r0, #72	@ 0x48
 80007dc:	42b8      	cmp	r0, r7
 80007de:	d0d6      	beq.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
                for (uint8_t j = 0; j < CUBE_SIZE; j++) {
 80007e0:	f1a0 0308 	sub.w	r3, r0, #8
    switch(patternIndex) {
 80007e4:	4631      	mov	r1, r6
                    cube_data[i][j][i] = 1;       // Corner to corner diagonal
 80007e6:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
                    cube_data[i][j][CUBE_SIZE-1-i] = 1; // Other diagonal
 80007ea:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
                    cube_data[i][i][j] = 1;       // Another diagonal
 80007ee:	f803 2f01 	strb.w	r2, [r3, #1]!
                    cube_data[i][CUBE_SIZE-1-i][j] = 1; // Fourth diagonal
 80007f2:	f801 2b01 	strb.w	r2, [r1], #1
                for (uint8_t j = 0; j < CUBE_SIZE; j++) {
 80007f6:	4283      	cmp	r3, r0
 80007f8:	d1f5      	bne.n	80007e6 <CUBE_Patterns_ShowStaticPattern+0x23e>
 80007fa:	e7e9      	b.n	80007d0 <CUBE_Patterns_ShowStaticPattern+0x228>
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <CUBE_Patterns_ShowStaticPattern+0x290>)
 80007fe:	f2a2 131f 	subw	r3, r2, #287	@ 0x11f
 8000802:	f102 0408 	add.w	r4, r2, #8
 8000806:	eba3 00c3 	sub.w	r0, r3, r3, lsl #3
 800080a:	3024      	adds	r0, #36	@ 0x24
                cube_data[CUBE_SIZE/2][CUBE_SIZE/2][i] = 1;
 800080c:	2101      	movs	r1, #1
 800080e:	f802 1f01 	strb.w	r1, [r2, #1]!
                cube_data[CUBE_SIZE/2][i][CUBE_SIZE/2] = 1;
 8000812:	f883 1104 	strb.w	r1, [r3, #260]	@ 0x104
                cube_data[i][CUBE_SIZE/2][CUBE_SIZE/2] = 1;
 8000816:	f800 1033 	strb.w	r1, [r0, r3, lsl #3]
            for (uint8_t i = 0; i < CUBE_SIZE; i++) {
 800081a:	3308      	adds	r3, #8
 800081c:	42a2      	cmp	r2, r4
 800081e:	d1f6      	bne.n	800080e <CUBE_Patterns_ShowStaticPattern+0x266>
 8000820:	e7b5      	b.n	800078e <CUBE_Patterns_ShowStaticPattern+0x1e6>
 8000822:	bf00      	nop
 8000824:	20000a84 	.word	0x20000a84
 8000828:	20000a93 	.word	0x20000a93
 800082c:	66666667 	.word	0x66666667
 8000830:	20000a94 	.word	0x20000a94
 8000834:	20000a4c 	.word	0x20000a4c
 8000838:	20000b6b 	.word	0x20000b6b

0800083c <CUBE_Patterns_Init>:
{
 800083c:	b508      	push	{r3, lr}
    currentPattern = 0;
 800083e:	2000      	movs	r0, #0
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <CUBE_Patterns_Init+0x20>)
 8000842:	7018      	strb	r0, [r3, #0]
    patternMode = PATTERN_STATIC;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <CUBE_Patterns_Init+0x24>)
 8000846:	7018      	strb	r0, [r3, #0]
    animationStep = 0;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <CUBE_Patterns_Init+0x28>)
 800084a:	6018      	str	r0, [r3, #0]
    lastAnimationUpdate = 0;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <CUBE_Patterns_Init+0x2c>)
 800084e:	6018      	str	r0, [r3, #0]
    animationSpeed = 100;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <CUBE_Patterns_Init+0x30>)
 8000852:	2264      	movs	r2, #100	@ 0x64
 8000854:	601a      	str	r2, [r3, #0]
    CUBE_Patterns_ShowStaticPattern(currentPattern);
 8000856:	f7ff fea7 	bl	80005a8 <CUBE_Patterns_ShowStaticPattern>
}
 800085a:	bd08      	pop	{r3, pc}
 800085c:	20000439 	.word	0x20000439
 8000860:	20000438 	.word	0x20000438
 8000864:	20000434 	.word	0x20000434
 8000868:	20000430 	.word	0x20000430
 800086c:	20000018 	.word	0x20000018

08000870 <CUBE_Patterns_NextPattern>:
{
 8000870:	b508      	push	{r3, lr}
    currentPattern = (currentPattern + 1) % PATTERN_COUNT;
 8000872:	490c      	ldr	r1, [pc, #48]	@ (80008a4 <CUBE_Patterns_NextPattern+0x34>)
 8000874:	7808      	ldrb	r0, [r1, #0]
 8000876:	3001      	adds	r0, #1
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <CUBE_Patterns_NextPattern+0x38>)
 800087a:	fb83 2300 	smull	r2, r3, r3, r0
 800087e:	f003 02fc 	and.w	r2, r3, #252	@ 0xfc
 8000882:	eb02 03a3 	add.w	r3, r2, r3, asr #2
 8000886:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800088a:	b2c0      	uxtb	r0, r0
 800088c:	7008      	strb	r0, [r1, #0]
    animationStep = 0; // Reset animation steps when pattern changes
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <CUBE_Patterns_NextPattern+0x3c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    if (patternMode == PATTERN_STATIC) {
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <CUBE_Patterns_NextPattern+0x40>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b103      	cbz	r3, 800089c <CUBE_Patterns_NextPattern+0x2c>
}
 800089a:	bd08      	pop	{r3, pc}
        CUBE_Patterns_ShowStaticPattern(currentPattern);
 800089c:	f7ff fe84 	bl	80005a8 <CUBE_Patterns_ShowStaticPattern>
}
 80008a0:	e7fb      	b.n	800089a <CUBE_Patterns_NextPattern+0x2a>
 80008a2:	bf00      	nop
 80008a4:	20000439 	.word	0x20000439
 80008a8:	66666667 	.word	0x66666667
 80008ac:	20000434 	.word	0x20000434
 80008b0:	20000438 	.word	0x20000438

080008b4 <pattern_PlaneWave>:

/**
  * @brief  Sine wave that travels through the cube
  * @retval None
  */
void pattern_PlaneWave(void) {
 80008b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b8:	ed2d 8b06 	vpush	{d8-d10}
 80008bc:	b082      	sub	sp, #8
    LED_Cube_Clear();
 80008be:	f000 fe7b 	bl	80015b8 <LED_Cube_Clear>
    
    // Calculate wave position based on animation step
    float phase = (float)animationStep / 5.0f;
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <pattern_PlaneWave+0xa4>)
 80008c4:	edd3 7a00 	vldr	s15, [r3]
 80008c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008cc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80008d0:	eec7 aa87 	vdiv.f32	s21, s15, s14
 80008d4:	2600      	movs	r6, #0
 80008d6:	4635      	mov	r5, r6
    
    // Create wave traveling along z-axis
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
        // Calculate sine value for this z position
        float sine_val = sinf(phase + ((float)z / (float)PLANE_COUNT) * 2.0f * 3.14159f);
 80008d8:	eeb4 aa00 	vmov.f32	s20, #64	@ 0x3e000000  0.125
 80008dc:	eddf 9a1f 	vldr	s19, [pc, #124]	@ 800095c <pattern_PlaneWave+0xa8>
        
        // Map sine (-1 to 1) to position in cube (0 to CUBE_SIZE-1)
        int8_t y_pos = (int8_t)roundf((sine_val + 1.0f) * (CUBE_SIZE-1) / 2.0f);
 80008e0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80008e4:	eef1 8a0c 	vmov.f32	s17, #28	@ 0x40e00000  7.0
 80008e8:	eeb6 8a00 	vmov.f32	s16, #96	@ 0x3f000000  0.5
 80008ec:	4f1c      	ldr	r7, [pc, #112]	@ (8000960 <pattern_PlaneWave+0xac>)
 80008ee:	f107 0808 	add.w	r8, r7, #8
        
        // Draw a horizontal line at the calculated height
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
            if (y_pos >= 0 && y_pos < CUBE_SIZE) {
                cube_data[z][y_pos][x] = 1;
 80008f2:	2401      	movs	r4, #1
        float sine_val = sinf(phase + ((float)z / (float)PLANE_COUNT) * 2.0f * 3.14159f);
 80008f4:	b2eb      	uxtb	r3, r5
 80008f6:	ee00 3a10 	vmov	s0, r3
 80008fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80008fe:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8000902:	ee30 0a00 	vadd.f32	s0, s0, s0
 8000906:	ee20 0a29 	vmul.f32	s0, s0, s19
 800090a:	ee30 0a2a 	vadd.f32	s0, s0, s21
 800090e:	f005 f953 	bl	8005bb8 <sinf>
        int8_t y_pos = (int8_t)roundf((sine_val + 1.0f) * (CUBE_SIZE-1) / 2.0f);
 8000912:	ee30 0a09 	vadd.f32	s0, s0, s18
 8000916:	ee20 0a28 	vmul.f32	s0, s0, s17
 800091a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800091e:	f005 f995 	bl	8005c4c <roundf>
 8000922:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8000926:	edcd 7a01 	vstr	s15, [sp, #4]
 800092a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 800092e:	1991      	adds	r1, r2, r6
 8000930:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
 8000934:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
            if (y_pos >= 0 && y_pos < CUBE_SIZE) {
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	2a07      	cmp	r2, #7
                cube_data[z][y_pos][x] = 1;
 800093c:	bf98      	it	ls
 800093e:	701c      	strbls	r4, [r3, #0]
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000940:	3301      	adds	r3, #1
 8000942:	428b      	cmp	r3, r1
 8000944:	d1f9      	bne.n	800093a <pattern_PlaneWave+0x86>
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000946:	3501      	adds	r5, #1
 8000948:	3608      	adds	r6, #8
 800094a:	2d08      	cmp	r5, #8
 800094c:	d1d2      	bne.n	80008f4 <pattern_PlaneWave+0x40>
            }
        }
    }
}
 800094e:	b002      	add	sp, #8
 8000950:	ecbd 8b06 	vpop	{d8-d10}
 8000954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000958:	20000434 	.word	0x20000434
 800095c:	40490fd0 	.word	0x40490fd0
 8000960:	20000a4c 	.word	0x20000a4c

08000964 <pattern_Rain>:

/**
  * @brief  Rain effect - drops falling from top to bottom
  * @retval None
  */
void pattern_Rain(void) {
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Move all voxels down one level
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000966:	4f20      	ldr	r7, [pc, #128]	@ (80009e8 <pattern_Rain+0x84>)
 8000968:	f107 0040 	add.w	r0, r7, #64	@ 0x40
void pattern_Rain(void) {
 800096c:	2400      	movs	r4, #0
 800096e:	e00f      	b.n	8000990 <pattern_Rain+0x2c>
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000970:	3101      	adds	r1, #1
 8000972:	4281      	cmp	r1, r0
 8000974:	d007      	beq.n	8000986 <pattern_Rain+0x22>
            for (uint8_t y = 0; y < CUBE_SIZE-1; y++) {
 8000976:	f1a1 0338 	sub.w	r3, r1, #56	@ 0x38
                cube_data[z][y][x] = cube_data[z][y+1][x];
 800097a:	7a1a      	ldrb	r2, [r3, #8]
 800097c:	f803 2b08 	strb.w	r2, [r3], #8
            for (uint8_t y = 0; y < CUBE_SIZE-1; y++) {
 8000980:	428b      	cmp	r3, r1
 8000982:	d1fa      	bne.n	800097a <pattern_Rain+0x16>
 8000984:	e7f4      	b.n	8000970 <pattern_Rain+0xc>
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000986:	3040      	adds	r0, #64	@ 0x40
 8000988:	3440      	adds	r4, #64	@ 0x40
 800098a:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 800098e:	d002      	beq.n	8000996 <pattern_Rain+0x32>
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000990:	f1a0 0108 	sub.w	r1, r0, #8
 8000994:	e7ef      	b.n	8000976 <pattern_Rain+0x12>
            }
        }
    }
    
    // Create new raindrops at top layer (randomly)
    if (animationStep % 3 == 0) {  // Only add new drops every 3 steps
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <pattern_Rain+0x88>)
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <pattern_Rain+0x8c>)
 800099c:	fba3 2301 	umull	r2, r3, r3, r1
 80009a0:	f023 0201 	bic.w	r2, r3, #1
 80009a4:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80009a8:	4299      	cmp	r1, r3
 80009aa:	d11b      	bne.n	80009e4 <pattern_Rain+0x80>
 80009ac:	f107 053f 	add.w	r5, r7, #63	@ 0x3f
 80009b0:	f207 273f 	addw	r7, r7, #575	@ 0x23f
        for (uint8_t z = 0; z < PLANE_COUNT; z++) {
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
                // 10% chance of a new raindrop
                cube_data[z][CUBE_SIZE-1][x] = (rand() % 10 == 0) ? 1 : 0;
 80009b4:	4e0f      	ldr	r6, [pc, #60]	@ (80009f4 <pattern_Rain+0x90>)
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80009b6:	f1a5 0408 	sub.w	r4, r5, #8
                cube_data[z][CUBE_SIZE-1][x] = (rand() % 10 == 0) ? 1 : 0;
 80009ba:	f003 fee7 	bl	800478c <rand>
 80009be:	fb86 3200 	smull	r3, r2, r6, r0
 80009c2:	17c3      	asrs	r3, r0, #31
 80009c4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80009c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009cc:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	f804 3f01 	strb.w	r3, [r4, #1]!
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 80009da:	42ac      	cmp	r4, r5
 80009dc:	d1ed      	bne.n	80009ba <pattern_Rain+0x56>
        for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 80009de:	3540      	adds	r5, #64	@ 0x40
 80009e0:	42bd      	cmp	r5, r7
 80009e2:	d1e8      	bne.n	80009b6 <pattern_Rain+0x52>
            }
        }
    }
}
 80009e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000a4c 	.word	0x20000a4c
 80009ec:	20000434 	.word	0x20000434
 80009f0:	aaaaaaab 	.word	0xaaaaaaab
 80009f4:	66666667 	.word	0x66666667

080009f8 <pattern_Sphere>:
/**
  * @brief  Expanding/contracting sphere
  * @param  step: Animation step for timing
  * @retval None
  */
void pattern_Sphere(uint32_t step) {
 80009f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009fc:	ed2d 8b06 	vpush	{d8-d10}
 8000a00:	ee08 0a10 	vmov	s16, r0
    LED_Cube_Clear();
 8000a04:	f000 fdd8 	bl	80015b8 <LED_Cube_Clear>
    
    // Calculate sphere radius based on animation step (oscillating)
    float max_radius = CUBE_SIZE/2.0f - 0.5f;
    float radius = max_radius * (sinf((float)step / 15.0f) + 1.0f) / 2.0f + 0.5f;
 8000a08:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8000a0c:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8000a10:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8000a14:	f005 f8d0 	bl	8005bb8 <sinf>
 8000a18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000a1c:	ee70 9a27 	vadd.f32	s19, s0, s15
 8000a20:	eef0 7a0c 	vmov.f32	s15, #12	@ 0x40600000  3.5
 8000a24:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8000a28:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000a2c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8000a30:	ee79 9aa7 	vadd.f32	s19, s19, s15
    float center_x = (CUBE_SIZE-1) / 2.0f;
    float center_y = (CUBE_SIZE-1) / 2.0f;
    float center_z = (PLANE_COUNT-1) / 2.0f;
    
    // Draw the sphere
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000a34:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8000adc <pattern_Sphere+0xe4>
    float radius = max_radius * (sinf((float)step / 15.0f) + 1.0f) / 2.0f + 0.5f;
 8000a38:	f04f 0800 	mov.w	r8, #0
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
                // Calculate distance from center
                float dx = (float)x - center_x;
                float dy = (float)y - center_y;
                float dz = (float)z - center_z;
 8000a3c:	eef0 8a0c 	vmov.f32	s17, #12	@ 0x40600000  3.5
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
                
                // If distance is within 0.5 of radius, light the voxel
                if (fabsf(distance - radius) < 0.5f) {
                    cube_data[z][y][x] = 1;
 8000a40:	2701      	movs	r7, #1
                float dz = (float)z - center_z;
 8000a42:	fa5f f388 	uxtb.w	r3, r8
 8000a46:	ee09 3a10 	vmov	s18, r3
 8000a4a:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8000a4e:	ee39 9a68 	vsub.f32	s18, s18, s17
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 8000a52:	ee29 9a09 	vmul.f32	s18, s18, s18
 8000a56:	464d      	mov	r5, r9
 8000a58:	2600      	movs	r6, #0
                float dy = (float)y - center_y;
 8000a5a:	b2f3      	uxtb	r3, r6
 8000a5c:	ee08 3a10 	vmov	s16, r3
 8000a60:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8000a64:	ee38 8a68 	vsub.f32	s16, s16, s17
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 8000a68:	ee28 8a08 	vmul.f32	s16, s16, s16
 8000a6c:	2400      	movs	r4, #0
                if (fabsf(distance - radius) < 0.5f) {
 8000a6e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
                float dx = (float)x - center_x;
 8000a72:	b2e3      	uxtb	r3, r4
 8000a74:	ee00 3a10 	vmov	s0, r3
 8000a78:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000a7c:	ee30 0a68 	vsub.f32	s0, s0, s17
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 8000a80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a84:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000a88:	ee30 0a09 	vadd.f32	s0, s0, s18
 8000a8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	d41d      	bmi.n	8000ad2 <pattern_Sphere+0xda>
 8000a96:	eef1 7ac0 	vsqrt.f32	s15, s0
                if (fabsf(distance - radius) < 0.5f) {
 8000a9a:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8000a9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000aa2:	eef4 7aca 	vcmpe.f32	s15, s20
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    cube_data[z][y][x] = 1;
 8000aaa:	bf48      	it	mi
 8000aac:	552f      	strbmi	r7, [r5, r4]
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000aae:	3401      	adds	r4, #1
 8000ab0:	2c08      	cmp	r4, #8
 8000ab2:	d1de      	bne.n	8000a72 <pattern_Sphere+0x7a>
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000ab4:	3601      	adds	r6, #1
 8000ab6:	3508      	adds	r5, #8
 8000ab8:	2e08      	cmp	r6, #8
 8000aba:	d1ce      	bne.n	8000a5a <pattern_Sphere+0x62>
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000abc:	f108 0801 	add.w	r8, r8, #1
 8000ac0:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 8000ac4:	f1b8 0f08 	cmp.w	r8, #8
 8000ac8:	d1bb      	bne.n	8000a42 <pattern_Sphere+0x4a>
                }
            }
        }
    }
}
 8000aca:	ecbd 8b06 	vpop	{d8-d10}
 8000ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 8000ad2:	f005 f80f 	bl	8005af4 <sqrtf>
 8000ad6:	eef0 7a40 	vmov.f32	s15, s0
 8000ada:	e7de      	b.n	8000a9a <pattern_Sphere+0xa2>
 8000adc:	20000a4c 	.word	0x20000a4c

08000ae0 <pattern_Spiral>:

/**
  * @brief  Spiral pattern rotating through the cube
  * @retval None
  */
void pattern_Spiral(void) {
 8000ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae4:	ed2d 8b0a 	vpush	{d8-d12}
    LED_Cube_Clear();
 8000ae8:	f000 fd66 	bl	80015b8 <LED_Cube_Clear>
    
    float center_x = (CUBE_SIZE-1) / 2.0f;
    float center_y = (CUBE_SIZE-1) / 2.0f;
    float phase = (float)animationStep / 10.0f;
 8000aec:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <pattern_Spiral+0xd8>)
 8000aee:	edd3 7a00 	vldr	s15, [r3]
 8000af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000afa:	eec7 ca87 	vdiv.f32	s25, s15, s14
 8000afe:	2500      	movs	r5, #0
    
    // Draw spiral through all z-planes
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
        float z_phase = phase + ((float)z / (float)PLANE_COUNT) * 3.14159f;
 8000b00:	ed9f ca2e 	vldr	s24, [pc, #184]	@ 8000bbc <pattern_Spiral+0xdc>
        
        // Draw an expanding spiral
        for (float r = 0.0f; r < CUBE_SIZE/2.0f; r += 0.25f) {
            // Convert polar to cartesian coordinates
            float angle = z_phase + r * 1.5f;
            float x = center_x + r * cosf(angle);
 8000b04:	eeb0 aa0c 	vmov.f32	s20, #12	@ 0x40600000  3.5
            float y = center_y + r * sinf(angle);
            
            // Only draw if coordinates are within bounds
            if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE) {
 8000b08:	eef2 ba00 	vmov.f32	s23, #32	@ 0x41000000  8.0
                cube_data[z][(int)y][(int)x] = 1;
 8000b0c:	4f2c      	ldr	r7, [pc, #176]	@ (8000bc0 <pattern_Spiral+0xe0>)
 8000b0e:	2601      	movs	r6, #1
 8000b10:	e03b      	b.n	8000b8a <pattern_Spiral+0xaa>
        for (float r = 0.0f; r < CUBE_SIZE/2.0f; r += 0.25f) {
 8000b12:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8000b16:	3c01      	subs	r4, #1
 8000b18:	d034      	beq.n	8000b84 <pattern_Spiral+0xa4>
            float angle = z_phase + r * 1.5f;
 8000b1a:	ee28 9a8b 	vmul.f32	s18, s17, s22
 8000b1e:	ee39 9a29 	vadd.f32	s18, s18, s19
            float x = center_x + r * cosf(angle);
 8000b22:	eeb0 0a49 	vmov.f32	s0, s18
 8000b26:	f005 f803 	bl	8005b30 <cosf>
 8000b2a:	ee20 8a28 	vmul.f32	s16, s0, s17
 8000b2e:	ee38 8a0a 	vadd.f32	s16, s16, s20
            if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE) {
 8000b32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	dbea      	blt.n	8000b12 <pattern_Spiral+0x32>
 8000b3c:	eeb4 8aeb 	vcmpe.f32	s16, s23
 8000b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b44:	d5e5      	bpl.n	8000b12 <pattern_Spiral+0x32>
            float y = center_y + r * sinf(angle);
 8000b46:	eeb0 0a49 	vmov.f32	s0, s18
 8000b4a:	f005 f835 	bl	8005bb8 <sinf>
 8000b4e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8000b52:	ee30 0a0a 	vadd.f32	s0, s0, s20
            if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE) {
 8000b56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5e:	dbd8      	blt.n	8000b12 <pattern_Spiral+0x32>
 8000b60:	eeb4 0aeb 	vcmpe.f32	s0, s23
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	d5d3      	bpl.n	8000b12 <pattern_Spiral+0x32>
                cube_data[z][(int)y][(int)x] = 1;
 8000b6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8000b6e:	ee17 3a90 	vmov	r3, s15
 8000b72:	4443      	add	r3, r8
 8000b74:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8000b78:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8000b7c:	ee18 2a10 	vmov	r2, s16
 8000b80:	549e      	strb	r6, [r3, r2]
 8000b82:	e7c6      	b.n	8000b12 <pattern_Spiral+0x32>
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8000b84:	3501      	adds	r5, #1
 8000b86:	2d08      	cmp	r5, #8
 8000b88:	d012      	beq.n	8000bb0 <pattern_Spiral+0xd0>
        float z_phase = phase + ((float)z / (float)PLANE_COUNT) * 3.14159f;
 8000b8a:	b2eb      	uxtb	r3, r5
 8000b8c:	ee09 3a90 	vmov	s19, r3
 8000b90:	eefb 9aee 	vcvt.f32.u32	s19, s19, #3
 8000b94:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8000b98:	ee79 9aac 	vadd.f32	s19, s19, s25
 8000b9c:	2410      	movs	r4, #16
        for (float r = 0.0f; r < CUBE_SIZE/2.0f; r += 0.25f) {
 8000b9e:	eddf 8a09 	vldr	s17, [pc, #36]	@ 8000bc4 <pattern_Spiral+0xe4>
            float angle = z_phase + r * 1.5f;
 8000ba2:	eeb7 ba08 	vmov.f32	s22, #120	@ 0x3fc00000  1.5
                cube_data[z][(int)y][(int)x] = 1;
 8000ba6:	ea4f 08c5 	mov.w	r8, r5, lsl #3
        for (float r = 0.0f; r < CUBE_SIZE/2.0f; r += 0.25f) {
 8000baa:	eef5 aa00 	vmov.f32	s21, #80	@ 0x3e800000  0.250
 8000bae:	e7b4      	b.n	8000b1a <pattern_Spiral+0x3a>
            }
        }
    }
}
 8000bb0:	ecbd 8b0a 	vpop	{d8-d12}
 8000bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bb8:	20000434 	.word	0x20000434
 8000bbc:	40490fd0 	.word	0x40490fd0
 8000bc0:	20000a4c 	.word	0x20000a4c
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <pattern_FireEffect>:

/**
  * @brief  Fire effect rising from bottom of cube
  * @retval None
  */
void pattern_FireEffect(void) {
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	ed2d 8b04 	vpush	{d8-d9}
    // Shift all layers up
    for (uint8_t z = PLANE_COUNT-1; z > 0; z--) {
 8000bd0:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8000ccc <pattern_FireEffect+0x104>
void pattern_FireEffect(void) {
 8000bd4:	f04f 0938 	mov.w	r9, #56	@ 0x38
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
                if ((rand() % 10) < 8) { // 80% chance to propagate upward
 8000bd8:	4e3a      	ldr	r6, [pc, #232]	@ (8000cc4 <pattern_FireEffect+0xfc>)
                    cube_data[z][y][x] = cube_data[z-1][y][x];
                } else {
                    cube_data[z][y][x] = 0; // 20% chance flame dies
 8000bda:	2700      	movs	r7, #0
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000bdc:	f1a8 0540 	sub.w	r5, r8, #64	@ 0x40
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000be0:	f1a5 0408 	sub.w	r4, r5, #8
                if ((rand() % 10) < 8) { // 80% chance to propagate upward
 8000be4:	f003 fdd2 	bl	800478c <rand>
 8000be8:	fb86 3200 	smull	r3, r2, r6, r0
 8000bec:	17c3      	asrs	r3, r0, #31
 8000bee:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8000bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bf6:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8000bfa:	2807      	cmp	r0, #7
                    cube_data[z][y][x] = cube_data[z-1][y][x];
 8000bfc:	bfda      	itte	le
 8000bfe:	f814 3c40 	ldrble.w	r3, [r4, #-64]
 8000c02:	7023      	strble	r3, [r4, #0]
                    cube_data[z][y][x] = 0; // 20% chance flame dies
 8000c04:	7027      	strbgt	r7, [r4, #0]
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000c06:	3401      	adds	r4, #1
 8000c08:	42ac      	cmp	r4, r5
 8000c0a:	d1eb      	bne.n	8000be4 <pattern_FireEffect+0x1c>
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000c0c:	3508      	adds	r5, #8
 8000c0e:	4545      	cmp	r5, r8
 8000c10:	d1e6      	bne.n	8000be0 <pattern_FireEffect+0x18>
    for (uint8_t z = PLANE_COUNT-1; z > 0; z--) {
 8000c12:	f1a8 0840 	sub.w	r8, r8, #64	@ 0x40
 8000c16:	f1b9 0908 	subs.w	r9, r9, #8
 8000c1a:	d1df      	bne.n	8000bdc <pattern_FireEffect+0x14>
 8000c1c:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 8000cd0 <pattern_FireEffect+0x108>
 8000c20:	46c8      	mov	r8, r9
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
            // Center is hotter (more likely to have flame)
            float center_x = (CUBE_SIZE-1) / 2.0f;
            float center_y = (CUBE_SIZE-1) / 2.0f;
            float dx = fabsf((float)x - center_x);
            float dy = fabsf((float)y - center_y);
 8000c22:	eeb0 9a0c 	vmov.f32	s18, #12	@ 0x40600000  3.5
            float distance = sqrtf(dx*dx + dy*dy);
            
            // More likely to have fire near center
            int chance = 90 - (int)(distance * 20.0f);
            if (chance < 20) chance = 20;
            cube_data[0][y][x] = ((rand() % 100) < chance) ? 1 : 0;
 8000c26:	4f28      	ldr	r7, [pc, #160]	@ (8000cc8 <pattern_FireEffect+0x100>)
 8000c28:	2664      	movs	r6, #100	@ 0x64
            float dy = fabsf((float)y - center_y);
 8000c2a:	fa5f f388 	uxtb.w	r3, r8
 8000c2e:	ee08 3a90 	vmov	s17, r3
 8000c32:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8000c36:	ee78 8ac9 	vsub.f32	s17, s17, s18
            float distance = sqrtf(dx*dx + dy*dy);
 8000c3a:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8000c3e:	4655      	mov	r5, sl
 8000c40:	464c      	mov	r4, r9
            float dx = fabsf((float)x - center_x);
 8000c42:	b2e3      	uxtb	r3, r4
 8000c44:	ee00 3a10 	vmov	s0, r3
 8000c48:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8000c4c:	ee30 0a49 	vsub.f32	s0, s0, s18
            float distance = sqrtf(dx*dx + dy*dy);
 8000c50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000c54:	ee30 0a28 	vadd.f32	s0, s0, s17
 8000c58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d42b      	bmi.n	8000cba <pattern_FireEffect+0xf2>
 8000c62:	eeb1 8ac0 	vsqrt.f32	s16, s0
            cube_data[0][y][x] = ((rand() % 100) < chance) ? 1 : 0;
 8000c66:	f003 fd91 	bl	800478c <rand>
 8000c6a:	fb87 3200 	smull	r3, r2, r7, r0
 8000c6e:	17c3      	asrs	r3, r0, #31
 8000c70:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8000c74:	fb06 0013 	mls	r0, r6, r3, r0
            int chance = 90 - (int)(distance * 20.0f);
 8000c78:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8000c7c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000c80:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8000c84:	ee18 3a10 	vmov	r3, s16
 8000c88:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
            if (chance < 20) chance = 20;
 8000c8c:	2b14      	cmp	r3, #20
 8000c8e:	bfb8      	it	lt
 8000c90:	2314      	movlt	r3, #20
            cube_data[0][y][x] = ((rand() % 100) < chance) ? 1 : 0;
 8000c92:	4298      	cmp	r0, r3
 8000c94:	bfac      	ite	ge
 8000c96:	2000      	movge	r0, #0
 8000c98:	2001      	movlt	r0, #1
 8000c9a:	f805 0f01 	strb.w	r0, [r5, #1]!
        for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8000c9e:	3401      	adds	r4, #1
 8000ca0:	2c08      	cmp	r4, #8
 8000ca2:	d1ce      	bne.n	8000c42 <pattern_FireEffect+0x7a>
    for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8000ca4:	f108 0801 	add.w	r8, r8, #1
 8000ca8:	f10a 0a08 	add.w	sl, sl, #8
 8000cac:	f1b8 0f08 	cmp.w	r8, #8
 8000cb0:	d1bb      	bne.n	8000c2a <pattern_FireEffect+0x62>
        }
    }
}
 8000cb2:	ecbd 8b04 	vpop	{d8-d9}
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            float distance = sqrtf(dx*dx + dy*dy);
 8000cba:	f004 ff1b 	bl	8005af4 <sqrtf>
 8000cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8000cc2:	e7d0      	b.n	8000c66 <pattern_FireEffect+0x9e>
 8000cc4:	66666667 	.word	0x66666667
 8000cc8:	51eb851f 	.word	0x51eb851f
 8000ccc:	20000c54 	.word	0x20000c54
 8000cd0:	20000a4b 	.word	0x20000a4b

08000cd4 <pattern_BouncingBall>:

/**
  * @brief  Bouncing ball animation with simulated physics
  * @retval None
  */
void pattern_BouncingBall(void) {
 8000cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd8:	b083      	sub	sp, #12
    LED_Cube_Clear();
 8000cda:	f000 fc6d 	bl	80015b8 <LED_Cube_Clear>
    static float vel_x = 0.12f;
    static float vel_y = 0.09f;
    static float vel_z = 0.14f;
    
    // Update position
    ball_x += vel_x;
 8000cde:	4b7c      	ldr	r3, [pc, #496]	@ (8000ed0 <pattern_BouncingBall+0x1fc>)
 8000ce0:	edd3 5a00 	vldr	s11, [r3]
 8000ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8000ed4 <pattern_BouncingBall+0x200>)
 8000ce6:	ed93 6a00 	vldr	s12, [r3]
 8000cea:	ee35 6a86 	vadd.f32	s12, s11, s12
 8000cee:	ed83 6a00 	vstr	s12, [r3]
    ball_y += vel_y;
 8000cf2:	4b79      	ldr	r3, [pc, #484]	@ (8000ed8 <pattern_BouncingBall+0x204>)
 8000cf4:	ed93 5a00 	vldr	s10, [r3]
 8000cf8:	4b78      	ldr	r3, [pc, #480]	@ (8000edc <pattern_BouncingBall+0x208>)
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	ee35 7a07 	vadd.f32	s14, s10, s14
 8000d02:	ed83 7a00 	vstr	s14, [r3]
    ball_z += vel_z;
 8000d06:	4b76      	ldr	r3, [pc, #472]	@ (8000ee0 <pattern_BouncingBall+0x20c>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	4a75      	ldr	r2, [pc, #468]	@ (8000ee4 <pattern_BouncingBall+0x210>)
 8000d0e:	edd2 6a00 	vldr	s13, [r2]
 8000d12:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8000d16:	edc2 6a00 	vstr	s13, [r2]
    
    // Apply gravity to z-velocity
    vel_z -= 0.01f;
 8000d1a:	eddf 4a73 	vldr	s9, [pc, #460]	@ 8000ee8 <pattern_BouncingBall+0x214>
 8000d1e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8000d22:	edc3 7a00 	vstr	s15, [r3]
    
    // Check for collisions with walls and bounce
    if (ball_x < 0 || ball_x >= CUBE_SIZE-0.5f) {
 8000d26:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	f100 80c4 	bmi.w	8000eba <pattern_BouncingBall+0x1e6>
 8000d32:	eef1 4a0e 	vmov.f32	s9, #30	@ 0x40f00000  7.5
 8000d36:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8000d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3e:	db14      	blt.n	8000d6a <pattern_BouncingBall+0x96>
        vel_x = -vel_x * 0.9f; // Bounce with damping
 8000d40:	eddf 4a6a 	vldr	s9, [pc, #424]	@ 8000eec <pattern_BouncingBall+0x218>
 8000d44:	ee65 5ae4 	vnmul.f32	s11, s11, s9
        ball_x = (ball_x < 0) ? 0 : CUBE_SIZE-0.51f; // Adjust position
 8000d48:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 8000ef0 <pattern_BouncingBall+0x21c>
 8000d54:	eddf 4a67 	vldr	s9, [pc, #412]	@ 8000ef4 <pattern_BouncingBall+0x220>
 8000d58:	bf58      	it	pl
 8000d5a:	eeb0 6a64 	vmovpl.f32	s12, s9
        vel_x = -vel_x * 0.9f; // Bounce with damping
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ed0 <pattern_BouncingBall+0x1fc>)
 8000d60:	edc3 5a00 	vstr	s11, [r3]
        ball_x = (ball_x < 0) ? 0 : CUBE_SIZE-0.51f; // Adjust position
 8000d64:	4b5b      	ldr	r3, [pc, #364]	@ (8000ed4 <pattern_BouncingBall+0x200>)
 8000d66:	ed83 6a00 	vstr	s12, [r3]
    }
    
    if (ball_y < 0 || ball_y >= CUBE_SIZE-0.5f) {
 8000d6a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	f100 809b 	bmi.w	8000eac <pattern_BouncingBall+0x1d8>
 8000d76:	eeb1 6a0e 	vmov.f32	s12, #30	@ 0x40f00000  7.5
 8000d7a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	db14      	blt.n	8000dae <pattern_BouncingBall+0xda>
        vel_y = -vel_y * 0.9f; // Bounce with damping
 8000d84:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8000eec <pattern_BouncingBall+0x218>
 8000d88:	ee25 5a46 	vnmul.f32	s10, s10, s12
        ball_y = (ball_y < 0) ? 0 : CUBE_SIZE-0.51f; // Adjust position
 8000d8c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000ef0 <pattern_BouncingBall+0x21c>
 8000d98:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8000ef4 <pattern_BouncingBall+0x220>
 8000d9c:	bf58      	it	pl
 8000d9e:	eeb0 7a46 	vmovpl.f32	s14, s12
        vel_y = -vel_y * 0.9f; // Bounce with damping
 8000da2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed8 <pattern_BouncingBall+0x204>)
 8000da4:	ed83 5a00 	vstr	s10, [r3]
        ball_y = (ball_y < 0) ? 0 : CUBE_SIZE-0.51f; // Adjust position
 8000da8:	4b4c      	ldr	r3, [pc, #304]	@ (8000edc <pattern_BouncingBall+0x208>)
 8000daa:	ed83 7a00 	vstr	s14, [r3]
    }
    
    if (ball_z < 0 || ball_z >= PLANE_COUNT-0.5f) {
 8000dae:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8000db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db6:	d472      	bmi.n	8000e9e <pattern_BouncingBall+0x1ca>
 8000db8:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8000dbc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	db14      	blt.n	8000df0 <pattern_BouncingBall+0x11c>
        vel_z = -vel_z * 0.9f; // Bounce with damping
 8000dc6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000eec <pattern_BouncingBall+0x218>
 8000dca:	ee67 7ac7 	vnmul.f32	s15, s15, s14
        ball_z = (ball_z < 0) ? 0 : PLANE_COUNT-0.51f; // Adjust position
 8000dce:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000ef0 <pattern_BouncingBall+0x21c>
 8000dda:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000ef4 <pattern_BouncingBall+0x220>
 8000dde:	bf58      	it	pl
 8000de0:	eeb0 7a66 	vmovpl.f32	s14, s13
        vel_z = -vel_z * 0.9f; // Bounce with damping
 8000de4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee0 <pattern_BouncingBall+0x20c>)
 8000de6:	edc3 7a00 	vstr	s15, [r3]
        ball_z = (ball_z < 0) ? 0 : PLANE_COUNT-0.51f; // Adjust position
 8000dea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee4 <pattern_BouncingBall+0x210>)
 8000dec:	ed83 7a00 	vstr	s14, [r3]
    
    // Draw the ball (3x3x3 cube for better visibility)
    for (int8_t dz = -1; dz <= 1; dz++) {
        for (int8_t dy = -1; dy <= 1; dy++) {
            for (int8_t dx = -1; dx <= 1; dx++) {
                int8_t x = (int8_t)ball_x + dx;
 8000df0:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <pattern_BouncingBall+0x200>)
 8000df2:	edd3 7a00 	vldr	s15, [r3]
 8000df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfa:	edcd 7a01 	vstr	s15, [sp, #4]
 8000dfe:	f89d 0004 	ldrb.w	r0, [sp, #4]
                int8_t y = (int8_t)ball_y + dy;
 8000e02:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <pattern_BouncingBall+0x208>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0c:	edcd 7a01 	vstr	s15, [sp, #4]
 8000e10:	f89d e004 	ldrb.w	lr, [sp, #4]
                int8_t z = (int8_t)ball_z + dz;
 8000e14:	4b33      	ldr	r3, [pc, #204]	@ (8000ee4 <pattern_BouncingBall+0x210>)
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e1e:	edcd 7a01 	vstr	s15, [sp, #4]
 8000e22:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000e26:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e2a:	fa5f fc8c 	uxtb.w	ip, ip
 8000e2e:	3102      	adds	r1, #2
 8000e30:	b2c9      	uxtb	r1, r1
 8000e32:	f10e 33ff 	add.w	r3, lr, #4294967295
 8000e36:	b2dd      	uxtb	r5, r3
 8000e38:	f10e 0e02 	add.w	lr, lr, #2
 8000e3c:	fa5f fe8e 	uxtb.w	lr, lr
 8000e40:	1e44      	subs	r4, r0, #1
 8000e42:	b2e4      	uxtb	r4, r4
 8000e44:	3002      	adds	r0, #2
 8000e46:	b2c0      	uxtb	r0, r0
                
                // Only draw if within bounds
                if (x >= 0 && x < CUBE_SIZE && 
                    y >= 0 && y < CUBE_SIZE && 
                    z >= 0 && z < PLANE_COUNT) {
                    cube_data[z][y][x] = 1;
 8000e48:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 8000ef8 <pattern_BouncingBall+0x224>
 8000e4c:	f04f 0901 	mov.w	r9, #1
 8000e50:	e021      	b.n	8000e96 <pattern_BouncingBall+0x1c2>
            for (int8_t dx = -1; dx <= 1; dx++) {
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4283      	cmp	r3, r0
 8000e58:	d00d      	beq.n	8000e76 <pattern_BouncingBall+0x1a2>
                    y >= 0 && y < CUBE_SIZE && 
 8000e5a:	ea43 0806 	orr.w	r8, r3, r6
 8000e5e:	f1b8 0f07 	cmp.w	r8, #7
 8000e62:	d8f6      	bhi.n	8000e52 <pattern_BouncingBall+0x17e>
                    cube_data[z][y][x] = 1;
 8000e64:	9f01      	ldr	r7, [sp, #4]
 8000e66:	eb07 08cb 	add.w	r8, r7, fp, lsl #3
 8000e6a:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
 8000e6e:	b25f      	sxtb	r7, r3
 8000e70:	f808 9007 	strb.w	r9, [r8, r7]
 8000e74:	e7ed      	b.n	8000e52 <pattern_BouncingBall+0x17e>
        for (int8_t dy = -1; dy <= 1; dy++) {
 8000e76:	3201      	adds	r2, #1
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	4572      	cmp	r2, lr
 8000e7c:	d005      	beq.n	8000e8a <pattern_BouncingBall+0x1b6>
                int8_t y = (int8_t)ball_y + dy;
 8000e7e:	b257      	sxtb	r7, r2
 8000e80:	ea42 060c 	orr.w	r6, r2, ip
 8000e84:	4623      	mov	r3, r4
 8000e86:	9701      	str	r7, [sp, #4]
 8000e88:	e7e7      	b.n	8000e5a <pattern_BouncingBall+0x186>
    for (int8_t dz = -1; dz <= 1; dz++) {
 8000e8a:	f10c 0c01 	add.w	ip, ip, #1
 8000e8e:	fa5f fc8c 	uxtb.w	ip, ip
 8000e92:	458c      	cmp	ip, r1
 8000e94:	d018      	beq.n	8000ec8 <pattern_BouncingBall+0x1f4>
                int8_t z = (int8_t)ball_z + dz;
 8000e96:	fa4f fb8c 	sxtb.w	fp, ip
 8000e9a:	462a      	mov	r2, r5
 8000e9c:	e7ef      	b.n	8000e7e <pattern_BouncingBall+0x1aa>
        vel_z = -vel_z * 0.9f; // Bounce with damping
 8000e9e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000eec <pattern_BouncingBall+0x218>
 8000ea2:	ee67 7ac7 	vnmul.f32	s15, s15, s14
        ball_z = (ball_z < 0) ? 0 : PLANE_COUNT-0.51f; // Adjust position
 8000ea6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000ef0 <pattern_BouncingBall+0x21c>
 8000eaa:	e79b      	b.n	8000de4 <pattern_BouncingBall+0x110>
        vel_y = -vel_y * 0.9f; // Bounce with damping
 8000eac:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000eec <pattern_BouncingBall+0x218>
 8000eb0:	ee25 5a47 	vnmul.f32	s10, s10, s14
        ball_y = (ball_y < 0) ? 0 : CUBE_SIZE-0.51f; // Adjust position
 8000eb4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000ef0 <pattern_BouncingBall+0x21c>
 8000eb8:	e773      	b.n	8000da2 <pattern_BouncingBall+0xce>
        vel_x = -vel_x * 0.9f; // Bounce with damping
 8000eba:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8000eec <pattern_BouncingBall+0x218>
 8000ebe:	ee65 5ac6 	vnmul.f32	s11, s11, s12
        ball_x = (ball_x < 0) ? 0 : CUBE_SIZE-0.51f; // Adjust position
 8000ec2:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8000ef0 <pattern_BouncingBall+0x21c>
 8000ec6:	e74a      	b.n	8000d5e <pattern_BouncingBall+0x8a>
                }
            }
        }
    }
}
 8000ec8:	b003      	add	sp, #12
 8000eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	3c23d70a 	.word	0x3c23d70a
 8000eec:	3f666666 	.word	0x3f666666
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	40efae14 	.word	0x40efae14
 8000ef8:	20000a4c 	.word	0x20000a4c

08000efc <pattern_Snake3D>:

/**
  * @brief  3D snake moving through the cube
  * @retval None
  */
void pattern_Snake3D(void) {
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	ed2d 8b04 	vpush	{d8-d9}
    LED_Cube_Clear();
 8000f02:	f000 fb59 	bl	80015b8 <LED_Cube_Clear>
    static int8_t snake_y[SNAKE_LENGTH];
    static int8_t snake_z[SNAKE_LENGTH];
    
    // Initialize snake if this is first call
    static uint8_t initialized = 0;
    if (!initialized) {
 8000f06:	4b44      	ldr	r3, [pc, #272]	@ (8001018 <pattern_Snake3D+0x11c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b993      	cbnz	r3, 8000f32 <pattern_Snake3D+0x36>
 8000f0c:	4c43      	ldr	r4, [pc, #268]	@ (800101c <pattern_Snake3D+0x120>)
 8000f0e:	4844      	ldr	r0, [pc, #272]	@ (8001020 <pattern_Snake3D+0x124>)
 8000f10:	4944      	ldr	r1, [pc, #272]	@ (8001024 <pattern_Snake3D+0x128>)
        for (uint8_t i = 0; i < SNAKE_LENGTH; i++) {
            snake_x[i] = CUBE_SIZE/2;
 8000f12:	2204      	movs	r2, #4
 8000f14:	f804 2f01 	strb.w	r2, [r4, #1]!
            snake_y[i] = CUBE_SIZE/2;
 8000f18:	f800 2f01 	strb.w	r2, [r0, #1]!
            snake_z[i] = i % PLANE_COUNT;
 8000f1c:	f003 0507 	and.w	r5, r3, #7
 8000f20:	f801 5f01 	strb.w	r5, [r1, #1]!
        for (uint8_t i = 0; i < SNAKE_LENGTH; i++) {
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	d1f3      	bne.n	8000f14 <pattern_Snake3D+0x18>
        }
        initialized = 1;
 8000f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001018 <pattern_Snake3D+0x11c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    }
    
    // Move snake body (each segment follows the one in front)
    for (int8_t i = SNAKE_LENGTH-1; i > 0; i--) {
 8000f32:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <pattern_Snake3D+0x12c>)
 8000f34:	493d      	ldr	r1, [pc, #244]	@ (800102c <pattern_Snake3D+0x130>)
 8000f36:	4a3e      	ldr	r2, [pc, #248]	@ (8001030 <pattern_Snake3D+0x134>)
 8000f38:	f1a3 040f 	sub.w	r4, r3, #15
        snake_x[i] = snake_x[i-1];
 8000f3c:	461d      	mov	r5, r3
 8000f3e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
 8000f42:	7058      	strb	r0, [r3, #1]
        snake_y[i] = snake_y[i-1];
 8000f44:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8000f48:	7048      	strb	r0, [r1, #1]
        snake_z[i] = snake_z[i-1];
 8000f4a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8000f4e:	7050      	strb	r0, [r2, #1]
    for (int8_t i = SNAKE_LENGTH-1; i > 0; i--) {
 8000f50:	42a3      	cmp	r3, r4
 8000f52:	d1f3      	bne.n	8000f3c <pattern_Snake3D+0x40>
    }
    
    // Move head in a 3D sine pattern
    float t = (float)animationStep * 0.1f;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <pattern_Snake3D+0x138>)
 8000f56:	ed93 8a00 	vldr	s16, [r3]
 8000f5a:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8000f5e:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8001038 <pattern_Snake3D+0x13c>
 8000f62:	ee28 8a27 	vmul.f32	s16, s16, s15
    snake_x[0] = (int8_t)(CUBE_SIZE/2 + sinf(t) * (CUBE_SIZE/2-1));
 8000f66:	eeb0 0a48 	vmov.f32	s0, s16
 8000f6a:	f004 fe25 	bl	8005bb8 <sinf>
 8000f6e:	eeb0 9a08 	vmov.f32	s18, #8	@ 0x40400000  3.0
 8000f72:	ee60 7a09 	vmul.f32	s15, s0, s18
 8000f76:	eef1 8a00 	vmov.f32	s17, #16	@ 0x40800000  4.0
 8000f7a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	4c2d      	ldr	r4, [pc, #180]	@ (800103c <pattern_Snake3D+0x140>)
 8000f88:	f804 3901 	strb.w	r3, [r4], #-1
    snake_y[0] = (int8_t)(CUBE_SIZE/2 + sinf(t*1.3f) * (CUBE_SIZE/2-1));
 8000f8c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001040 <pattern_Snake3D+0x144>
 8000f90:	ee28 0a00 	vmul.f32	s0, s16, s0
 8000f94:	f004 fe10 	bl	8005bb8 <sinf>
 8000f98:	4e2a      	ldr	r6, [pc, #168]	@ (8001044 <pattern_Snake3D+0x148>)
 8000f9a:	ee60 7a09 	vmul.f32	s15, s0, s18
 8000f9e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8000fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa6:	ee17 3a90 	vmov	r3, s15
 8000faa:	7033      	strb	r3, [r6, #0]
    snake_z[0] = (int8_t)(PLANE_COUNT/2 + sinf(t*1.7f) * (PLANE_COUNT/2-1));
 8000fac:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001048 <pattern_Snake3D+0x14c>
 8000fb0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8000fb4:	f004 fe00 	bl	8005bb8 <sinf>
 8000fb8:	4a24      	ldr	r2, [pc, #144]	@ (800104c <pattern_Snake3D+0x150>)
 8000fba:	ee60 7a09 	vmul.f32	s15, s0, s18
 8000fbe:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	ee17 3a90 	vmov	r3, s15
 8000fca:	7013      	strb	r3, [r2, #0]
    
    // Draw the snake
    for (uint8_t i = 0; i < SNAKE_LENGTH; i++) {
 8000fcc:	4696      	mov	lr, r2
 8000fce:	4633      	mov	r3, r6
 8000fd0:	f105 020e 	add.w	r2, r5, #14
 8000fd4:	e004      	b.n	8000fe0 <pattern_Snake3D+0xe4>
 8000fd6:	f10e 0e01 	add.w	lr, lr, #1
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4294      	cmp	r4, r2
 8000fde:	d018      	beq.n	8001012 <pattern_Snake3D+0x116>
        // Calculate brightness based on segment position (head is brightest)
        // In binary display, all segments are just on
        
        // Make sure coordinates are within bounds
        if (snake_x[i] >= 0 && snake_x[i] < CUBE_SIZE &&
 8000fe0:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
 8000fe4:	b2c8      	uxtb	r0, r1
 8000fe6:	2807      	cmp	r0, #7
 8000fe8:	d8f5      	bhi.n	8000fd6 <pattern_Snake3D+0xda>
            snake_y[i] >= 0 && snake_y[i] < CUBE_SIZE &&
 8000fea:	f993 0000 	ldrsb.w	r0, [r3]
        if (snake_x[i] >= 0 && snake_x[i] < CUBE_SIZE &&
 8000fee:	b2c5      	uxtb	r5, r0
 8000ff0:	2d07      	cmp	r5, #7
 8000ff2:	d8f0      	bhi.n	8000fd6 <pattern_Snake3D+0xda>
            snake_z[i] >= 0 && snake_z[i] < PLANE_COUNT) {
 8000ff4:	f99e 5000 	ldrsb.w	r5, [lr]
            snake_y[i] >= 0 && snake_y[i] < CUBE_SIZE &&
 8000ff8:	fa5f fc85 	uxtb.w	ip, r5
 8000ffc:	f1bc 0f07 	cmp.w	ip, #7
 8001000:	d8e9      	bhi.n	8000fd6 <pattern_Snake3D+0xda>
            cube_data[snake_z[i]][snake_y[i]][snake_x[i]] = 1;
 8001002:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001006:	4d12      	ldr	r5, [pc, #72]	@ (8001050 <pattern_Snake3D+0x154>)
 8001008:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800100c:	2501      	movs	r5, #1
 800100e:	5445      	strb	r5, [r0, r1]
 8001010:	e7e1      	b.n	8000fd6 <pattern_Snake3D+0xda>
        }
    }
}
 8001012:	ecbd 8b04 	vpop	{d8-d9}
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	2000042c 	.word	0x2000042c
 800101c:	2000041b 	.word	0x2000041b
 8001020:	2000040b 	.word	0x2000040b
 8001024:	200003fb 	.word	0x200003fb
 8001028:	2000042b 	.word	0x2000042b
 800102c:	2000041b 	.word	0x2000041b
 8001030:	2000040b 	.word	0x2000040b
 8001034:	20000434 	.word	0x20000434
 8001038:	3dcccccd 	.word	0x3dcccccd
 800103c:	2000041c 	.word	0x2000041c
 8001040:	3fa66666 	.word	0x3fa66666
 8001044:	2000040c 	.word	0x2000040c
 8001048:	3fd9999a 	.word	0x3fd9999a
 800104c:	200003fc 	.word	0x200003fc
 8001050:	20000a4c 	.word	0x20000a4c

08001054 <pattern_Ripples>:

/**
  * @brief  Expanding ripples from center of cube
  * @retval None
  */
void pattern_Ripples(void) {
 8001054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001058:	ed2d 8b06 	vpush	{d8-d10}
    LED_Cube_Clear();
 800105c:	f000 faac 	bl	80015b8 <LED_Cube_Clear>

    // Generate new ripple occasionally
    static uint32_t ripple_start = 0;
    if (animationStep % 40 == 0) {
 8001060:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <pattern_Ripples+0xe4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a35      	ldr	r2, [pc, #212]	@ (800113c <pattern_Ripples+0xe8>)
 8001066:	fba2 1203 	umull	r1, r2, r2, r3
 800106a:	0952      	lsrs	r2, r2, #5
 800106c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001070:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
        ripple_start = animationStep;
 8001074:	bf04      	itt	eq
 8001076:	4a32      	ldreq	r2, [pc, #200]	@ (8001140 <pattern_Ripples+0xec>)
 8001078:	6013      	streq	r3, [r2, #0]
    }
    
    // Calculate ripple radius
    float elapsed = (float)(animationStep - ripple_start);
 800107a:	4a31      	ldr	r2, [pc, #196]	@ (8001140 <pattern_Ripples+0xec>)
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	ee09 3a90 	vmov	s19, r3
 8001084:	eef8 9a69 	vcvt.f32.u32	s19, s19
    float radius = elapsed * 0.2f;
 8001088:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 8001144 <pattern_Ripples+0xf0>
 800108c:	ee69 9aa7 	vmul.f32	s19, s19, s15
    float center_x = (CUBE_SIZE-1) / 2.0f;
    float center_y = (CUBE_SIZE-1) / 2.0f;
    float center_z = (PLANE_COUNT-1) / 2.0f;
    
    // Draw the ripple (a sphere shell)
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8001090:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 800114c <pattern_Ripples+0xf8>
    float radius = elapsed * 0.2f;
 8001094:	f04f 0800 	mov.w	r8, #0
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
                float dx = (float)x - center_x;
                float dy = (float)y - center_y;
                float dz = (float)z - center_z;
 8001098:	eef0 8a0c 	vmov.f32	s17, #12	@ 0x40600000  3.5
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
                
                // Draw only points at the current ripple radius
                if (fabsf(distance - radius) < 0.7f) {
 800109c:	ed9f aa2a 	vldr	s20, [pc, #168]	@ 8001148 <pattern_Ripples+0xf4>
                float dz = (float)z - center_z;
 80010a0:	fa5f f388 	uxtb.w	r3, r8
 80010a4:	ee09 3a10 	vmov	s18, r3
 80010a8:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 80010ac:	ee39 9a68 	vsub.f32	s18, s18, s17
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 80010b0:	ee29 9a09 	vmul.f32	s18, s18, s18
 80010b4:	464d      	mov	r5, r9
 80010b6:	2700      	movs	r7, #0
                    cube_data[z][y][x] = 1;
 80010b8:	2601      	movs	r6, #1
                float dy = (float)y - center_y;
 80010ba:	b2fb      	uxtb	r3, r7
 80010bc:	ee08 3a10 	vmov	s16, r3
 80010c0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80010c4:	ee38 8a68 	vsub.f32	s16, s16, s17
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 80010c8:	ee28 8a08 	vmul.f32	s16, s16, s16
 80010cc:	2400      	movs	r4, #0
                float dx = (float)x - center_x;
 80010ce:	b2e3      	uxtb	r3, r4
 80010d0:	ee00 3a10 	vmov	s0, r3
 80010d4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80010d8:	ee30 0a68 	vsub.f32	s0, s0, s17
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 80010dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80010e0:	ee30 0a08 	vadd.f32	s0, s0, s16
 80010e4:	ee30 0a09 	vadd.f32	s0, s0, s18
 80010e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d41d      	bmi.n	800112e <pattern_Ripples+0xda>
 80010f2:	eef1 7ac0 	vsqrt.f32	s15, s0
                if (fabsf(distance - radius) < 0.7f) {
 80010f6:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80010fa:	eef0 7ae7 	vabs.f32	s15, s15
 80010fe:	eef4 7aca 	vcmpe.f32	s15, s20
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    cube_data[z][y][x] = 1;
 8001106:	bf48      	it	mi
 8001108:	552e      	strbmi	r6, [r5, r4]
            for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 800110a:	3401      	adds	r4, #1
 800110c:	2c08      	cmp	r4, #8
 800110e:	d1de      	bne.n	80010ce <pattern_Ripples+0x7a>
        for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 8001110:	3701      	adds	r7, #1
 8001112:	3508      	adds	r5, #8
 8001114:	2f08      	cmp	r7, #8
 8001116:	d1d0      	bne.n	80010ba <pattern_Ripples+0x66>
    for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8001118:	f108 0801 	add.w	r8, r8, #1
 800111c:	f109 0940 	add.w	r9, r9, #64	@ 0x40
 8001120:	f1b8 0f08 	cmp.w	r8, #8
 8001124:	d1bc      	bne.n	80010a0 <pattern_Ripples+0x4c>
                }
            }
        }
    }
}
 8001126:	ecbd 8b06 	vpop	{d8-d10}
 800112a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                float distance = sqrtf(dx*dx + dy*dy + dz*dz);
 800112e:	f004 fce1 	bl	8005af4 <sqrtf>
 8001132:	eef0 7a40 	vmov.f32	s15, s0
 8001136:	e7de      	b.n	80010f6 <pattern_Ripples+0xa2>
 8001138:	20000434 	.word	0x20000434
 800113c:	cccccccd 	.word	0xcccccccd
 8001140:	200003f8 	.word	0x200003f8
 8001144:	3e4ccccd 	.word	0x3e4ccccd
 8001148:	3f333333 	.word	0x3f333333
 800114c:	20000a4c 	.word	0x20000a4c

08001150 <pattern_Helix>:

/**
  * @brief  Rotating helical pattern
  * @retval None
  */
void pattern_Helix(void) {
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	ed2d 8b0e 	vpush	{d8-d14}
    LED_Cube_Clear();
 8001156:	f000 fa2f 	bl	80015b8 <LED_Cube_Clear>

    // Helix parameters
    float angle = (float)animationStep * 0.1f;
 800115a:	4b55      	ldr	r3, [pc, #340]	@ (80012b0 <pattern_Helix+0x160>)
 800115c:	ed93 ba00 	vldr	s22, [r3]
 8001160:	eeb8 ba4b 	vcvt.f32.u32	s22, s22
 8001164:	eddf 7a53 	vldr	s15, [pc, #332]	@ 80012b4 <pattern_Helix+0x164>
 8001168:	ee2b ba27 	vmul.f32	s22, s22, s15
 800116c:	2428      	movs	r4, #40	@ 0x28
    // Center of the cube base
    float center_x = (CUBE_SIZE-1) / 2.0f;
    float center_y = (CUBE_SIZE-1) / 2.0f;
    
    // Draw two opposing helices
    for (float t = 0; t < 10.0f; t += 0.25f) {
 800116e:	ed9f 9a52 	vldr	s18, [pc, #328]	@ 80012b8 <pattern_Helix+0x168>
        // First helix
        float x1 = center_x + radius * cosf(angle + t);
 8001172:	eddf aa52 	vldr	s21, [pc, #328]	@ 80012bc <pattern_Helix+0x16c>
 8001176:	eeb0 aa0c 	vmov.f32	s20, #12	@ 0x40600000  3.5
        float y1 = center_y + radius * sinf(angle + t);
        float z1 = (t / height_scale) * PLANE_COUNT;
 800117a:	eef1 ca04 	vmov.f32	s25, #20	@ 0x40a00000  5.0
 800117e:	eef2 9a00 	vmov.f32	s19, #32	@ 0x41000000  8.0
        
        // Second helix (180 degrees offset)
        float x2 = center_x + radius * cosf(angle + t + 3.14159f);
 8001182:	ed9f ca4f 	vldr	s24, [pc, #316]	@ 80012c0 <pattern_Helix+0x170>
        float y2 = center_y + radius * sinf(angle + t + 3.14159f);
        float z2 = (t / height_scale) * PLANE_COUNT;
        
        // Draw the points if they're in bounds
        if (x1 >= 0 && x1 < CUBE_SIZE && y1 >= 0 && y1 < CUBE_SIZE && z1 >= 0 && z1 < PLANE_COUNT) {
            cube_data[(int)z1][(int)y1][(int)x1] = 1;
 8001186:	4e4f      	ldr	r6, [pc, #316]	@ (80012c4 <pattern_Helix+0x174>)
 8001188:	2501      	movs	r5, #1
    for (float t = 0; t < 10.0f; t += 0.25f) {
 800118a:	eef5 ba00 	vmov.f32	s23, #80	@ 0x3e800000  0.250
 800118e:	e004      	b.n	800119a <pattern_Helix+0x4a>
 8001190:	ee39 9a2b 	vadd.f32	s18, s18, s23
 8001194:	3c01      	subs	r4, #1
 8001196:	f000 8087 	beq.w	80012a8 <pattern_Helix+0x158>
        float x1 = center_x + radius * cosf(angle + t);
 800119a:	ee7b da09 	vadd.f32	s27, s22, s18
 800119e:	eeb0 0a6d 	vmov.f32	s0, s27
 80011a2:	f004 fcc5 	bl	8005b30 <cosf>
 80011a6:	ee60 8a2a 	vmul.f32	s17, s0, s21
 80011aa:	ee78 8a8a 	vadd.f32	s17, s17, s20
        float z1 = (t / height_scale) * PLANE_COUNT;
 80011ae:	ee89 da2c 	vdiv.f32	s26, s18, s25
 80011b2:	ee2d da29 	vmul.f32	s26, s26, s19
        float x2 = center_x + radius * cosf(angle + t + 3.14159f);
 80011b6:	ee3d ea8c 	vadd.f32	s28, s27, s24
 80011ba:	eeb0 0a4e 	vmov.f32	s0, s28
 80011be:	f004 fcb7 	bl	8005b30 <cosf>
 80011c2:	ee20 8a2a 	vmul.f32	s16, s0, s21
 80011c6:	ee38 8a0a 	vadd.f32	s16, s16, s20
        if (x1 >= 0 && x1 < CUBE_SIZE && y1 >= 0 && y1 < CUBE_SIZE && z1 >= 0 && z1 < PLANE_COUNT) {
 80011ca:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	db31      	blt.n	8001238 <pattern_Helix+0xe8>
 80011d4:	eef4 8ae9 	vcmpe.f32	s17, s19
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d52c      	bpl.n	8001238 <pattern_Helix+0xe8>
        float y1 = center_y + radius * sinf(angle + t);
 80011de:	eeb0 0a6d 	vmov.f32	s0, s27
 80011e2:	f004 fce9 	bl	8005bb8 <sinf>
 80011e6:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80011ea:	ee30 0a0a 	vadd.f32	s0, s0, s20
        if (x1 >= 0 && x1 < CUBE_SIZE && y1 >= 0 && y1 < CUBE_SIZE && z1 >= 0 && z1 < PLANE_COUNT) {
 80011ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	db1f      	blt.n	8001238 <pattern_Helix+0xe8>
 80011f8:	eeb4 0ae9 	vcmpe.f32	s0, s19
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	d51a      	bpl.n	8001238 <pattern_Helix+0xe8>
 8001202:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	db15      	blt.n	8001238 <pattern_Helix+0xe8>
 800120c:	eeb4 dae9 	vcmpe.f32	s26, s19
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d510      	bpl.n	8001238 <pattern_Helix+0xe8>
            cube_data[(int)z1][(int)y1][(int)x1] = 1;
 8001216:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	eefd 7acd 	vcvt.s32.f32	s15, s26
 8001222:	ee17 2a90 	vmov	r2, s15
 8001226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800122a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 800122e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001232:	ee18 2a90 	vmov	r2, s17
 8001236:	549d      	strb	r5, [r3, r2]
        }
        
        if (x2 >= 0 && x2 < CUBE_SIZE && y2 >= 0 && y2 < CUBE_SIZE && z2 >= 0 && z2 < PLANE_COUNT) {
 8001238:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	dba6      	blt.n	8001190 <pattern_Helix+0x40>
 8001242:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d5a1      	bpl.n	8001190 <pattern_Helix+0x40>
        float y2 = center_y + radius * sinf(angle + t + 3.14159f);
 800124c:	eeb0 0a4e 	vmov.f32	s0, s28
 8001250:	f004 fcb2 	bl	8005bb8 <sinf>
 8001254:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8001258:	ee30 0a0a 	vadd.f32	s0, s0, s20
        if (x2 >= 0 && x2 < CUBE_SIZE && y2 >= 0 && y2 < CUBE_SIZE && z2 >= 0 && z2 < PLANE_COUNT) {
 800125c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	db94      	blt.n	8001190 <pattern_Helix+0x40>
 8001266:	eeb4 0ae9 	vcmpe.f32	s0, s19
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	d58f      	bpl.n	8001190 <pattern_Helix+0x40>
 8001270:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	db8a      	blt.n	8001190 <pattern_Helix+0x40>
 800127a:	eeb4 dae9 	vcmpe.f32	s26, s19
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d585      	bpl.n	8001190 <pattern_Helix+0x40>
            cube_data[(int)z2][(int)y2][(int)x2] = 1;
 8001284:	eebd dacd 	vcvt.s32.f32	s26, s26
 8001288:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	ee1d 2a10 	vmov	r2, s26
 8001294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001298:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800129c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80012a0:	ee18 2a10 	vmov	r2, s16
 80012a4:	549d      	strb	r5, [r3, r2]
 80012a6:	e773      	b.n	8001190 <pattern_Helix+0x40>
        }
    }
}
 80012a8:	ecbd 8b0e 	vpop	{d8-d14}
 80012ac:	bd70      	pop	{r4, r5, r6, pc}
 80012ae:	bf00      	nop
 80012b0:	20000434 	.word	0x20000434
 80012b4:	3dcccccd 	.word	0x3dcccccd
 80012b8:	00000000 	.word	0x00000000
 80012bc:	402aaaab 	.word	0x402aaaab
 80012c0:	40490fd0 	.word	0x40490fd0
 80012c4:	20000a4c 	.word	0x20000a4c

080012c8 <pattern_Fountain>:

/**
  * @brief  Fountain effect spraying from the bottom
  * @retval None
  */
void pattern_Fountain(void) {
 80012c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012cc:	ed2d 8b04 	vpush	{d8-d9}
    // Particle array (static so it persists between calls)
    static Particle particles[MAX_PARTICLES];
    static uint8_t initialized = 0;
    
    // Initialize particles if needed
    if (!initialized) {
 80012d0:	4b74      	ldr	r3, [pc, #464]	@ (80014a4 <pattern_Fountain+0x1dc>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b953      	cbnz	r3, 80012ec <pattern_Fountain+0x24>
 80012d6:	4b74      	ldr	r3, [pc, #464]	@ (80014a8 <pattern_Fountain+0x1e0>)
 80012d8:	f503 7152 	add.w	r1, r3, #840	@ 0x348
        for (uint8_t i = 0; i < MAX_PARTICLES; i++) {
            particles[i].active = 0;
 80012dc:	2200      	movs	r2, #0
 80012de:	761a      	strb	r2, [r3, #24]
        for (uint8_t i = 0; i < MAX_PARTICLES; i++) {
 80012e0:	331c      	adds	r3, #28
 80012e2:	428b      	cmp	r3, r1
 80012e4:	d1fb      	bne.n	80012de <pattern_Fountain+0x16>
        }
        initialized = 1;
 80012e6:	4b6f      	ldr	r3, [pc, #444]	@ (80014a4 <pattern_Fountain+0x1dc>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
    }
    
    // Clear the cube
    LED_Cube_Clear();
 80012ec:	f000 f964 	bl	80015b8 <LED_Cube_Clear>
    
    // Create new particles
    if (animationStep % 3 == 0) { // Every few frames, spawn new particles
 80012f0:	4b6e      	ldr	r3, [pc, #440]	@ (80014ac <pattern_Fountain+0x1e4>)
 80012f2:	681c      	ldr	r4, [r3, #0]
 80012f4:	4a6e      	ldr	r2, [pc, #440]	@ (80014b0 <pattern_Fountain+0x1e8>)
 80012f6:	fba2 3204 	umull	r3, r2, r2, r4
 80012fa:	f022 0301 	bic.w	r3, r2, #1
 80012fe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001302:	1ae4      	subs	r4, r4, r3
 8001304:	d162      	bne.n	80013cc <pattern_Fountain+0x104>
 8001306:	4b68      	ldr	r3, [pc, #416]	@ (80014a8 <pattern_Fountain+0x1e0>)
        for (uint8_t i = 0; i < MAX_PARTICLES; i++) {
            if (!particles[i].active) {
 8001308:	7e1a      	ldrb	r2, [r3, #24]
 800130a:	b122      	cbz	r2, 8001316 <pattern_Fountain+0x4e>
        for (uint8_t i = 0; i < MAX_PARTICLES; i++) {
 800130c:	3401      	adds	r4, #1
 800130e:	331c      	adds	r3, #28
 8001310:	2c1e      	cmp	r4, #30
 8001312:	d1f9      	bne.n	8001308 <pattern_Fountain+0x40>
 8001314:	e05a      	b.n	80013cc <pattern_Fountain+0x104>
                particles[i].x = CUBE_SIZE / 2.0f;
 8001316:	4f64      	ldr	r7, [pc, #400]	@ (80014a8 <pattern_Fountain+0x1e0>)
 8001318:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800131c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001320:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001324:	602b      	str	r3, [r5, #0]
                particles[i].y = CUBE_SIZE / 2.0f;
 8001326:	606b      	str	r3, [r5, #4]
                particles[i].z = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60ab      	str	r3, [r5, #8]
                
                // Random velocity with upward bias
                particles[i].vx = ((float)(rand() % 100) / 100.0f - 0.5f) * 0.3f;
 800132c:	f003 fa2e 	bl	800478c <rand>
 8001330:	4e60      	ldr	r6, [pc, #384]	@ (80014b4 <pattern_Fountain+0x1ec>)
 8001332:	fb86 3200 	smull	r3, r2, r6, r0
 8001336:	17c3      	asrs	r3, r0, #31
 8001338:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800133c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8001340:	fb09 0013 	mls	r0, r9, r3, r0
 8001344:	ee07 0a90 	vmov	s15, r0
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ed9f 8a5a 	vldr	s16, [pc, #360]	@ 80014b8 <pattern_Fountain+0x1f0>
 8001350:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8001354:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
 8001358:	ee77 7a49 	vsub.f32	s15, s14, s18
 800135c:	eddf 8a57 	vldr	s17, [pc, #348]	@ 80014bc <pattern_Fountain+0x1f4>
 8001360:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001364:	edc5 7a03 	vstr	s15, [r5, #12]
                particles[i].vy = ((float)(rand() % 100) / 100.0f - 0.5f) * 0.3f;
 8001368:	f003 fa10 	bl	800478c <rand>
 800136c:	fb86 3200 	smull	r3, r2, r6, r0
 8001370:	17c3      	asrs	r3, r0, #31
 8001372:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8001376:	fb09 0013 	mls	r0, r9, r3, r0
 800137a:	ee07 0a90 	vmov	s15, r0
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8001386:	ee77 7a49 	vsub.f32	s15, s14, s18
 800138a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800138e:	edc5 7a04 	vstr	s15, [r5, #16]
                particles[i].vz = ((float)(rand() % 100) / 100.0f) * 0.4f + 0.1f;
 8001392:	f003 f9fb 	bl	800478c <rand>
 8001396:	fb86 3600 	smull	r3, r6, r6, r0
 800139a:	17c3      	asrs	r3, r0, #31
 800139c:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 80013a0:	fb09 0013 	mls	r0, r9, r3, r0
 80013a4:	ee07 0a90 	vmov	s15, r0
 80013a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ac:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80013b0:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80014c0 <pattern_Fountain+0x1f8>
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014c4 <pattern_Fountain+0x1fc>
 80013bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013c0:	edc5 7a05 	vstr	s15, [r5, #20]
                
                particles[i].active = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	762b      	strb	r3, [r5, #24]
                particles[i].age = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	836b      	strh	r3, [r5, #26]
            }
        }
    }
    
    // Update and draw all particles
    for (uint8_t i = 0; i < MAX_PARTICLES; i++) {
 80013cc:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <pattern_Fountain+0x1e0>)
 80013ce:	f503 7152 	add.w	r1, r3, #840	@ 0x348
            particles[i].x += particles[i].vx;
            particles[i].y += particles[i].vy;
            particles[i].z += particles[i].vz;
            
            // Apply gravity
            particles[i].vz -= 0.03f;
 80013d2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80014c8 <pattern_Fountain+0x200>
            // Fix and complete the fountain pattern
            if (particles[i].x < 0 || particles[i].x >= CUBE_SIZE ||
                particles[i].y < 0 || particles[i].y >= CUBE_SIZE ||
                particles[i].z < 0 || particles[i].z >= PLANE_COUNT ||
                particles[i].age > 50) {
                particles[i].active = 0;    
 80013d6:	2000      	movs	r0, #0
            if (particles[i].x < 0 || particles[i].x >= CUBE_SIZE ||
 80013d8:	eef2 5a00 	vmov.f32	s11, #32	@ 0x41000000  8.0

            // Draw the particle if it's still active
            int px = (int)particles[i].x;
            int py = (int)particles[i].y;
            int pz = (int)particles[i].z;
            cube_data[pz][py][px] = 1;
 80013dc:	4c3b      	ldr	r4, [pc, #236]	@ (80014cc <pattern_Fountain+0x204>)
 80013de:	f04f 0c01 	mov.w	ip, #1
 80013e2:	e004      	b.n	80013ee <pattern_Fountain+0x126>
                particles[i].active = 0;    
 80013e4:	f88e 0018 	strb.w	r0, [lr, #24]
    for (uint8_t i = 0; i < MAX_PARTICLES; i++) {
 80013e8:	331c      	adds	r3, #28
 80013ea:	428b      	cmp	r3, r1
 80013ec:	d056      	beq.n	800149c <pattern_Fountain+0x1d4>
        if (particles[i].active) {
 80013ee:	469e      	mov	lr, r3
 80013f0:	7e1a      	ldrb	r2, [r3, #24]
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d0f8      	beq.n	80013e8 <pattern_Fountain+0x120>
            particles[i].x += particles[i].vx;
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80013fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001402:	edc3 7a00 	vstr	s15, [r3]
            particles[i].y += particles[i].vy;
 8001406:	ed93 7a01 	vldr	s14, [r3, #4]
 800140a:	edd3 6a04 	vldr	s13, [r3, #16]
 800140e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001412:	ed83 7a01 	vstr	s14, [r3, #4]
            particles[i].z += particles[i].vz;
 8001416:	edd3 6a05 	vldr	s13, [r3, #20]
 800141a:	ed93 6a02 	vldr	s12, [r3, #8]
 800141e:	ee36 6a86 	vadd.f32	s12, s13, s12
 8001422:	ed83 6a02 	vstr	s12, [r3, #8]
            particles[i].vz -= 0.03f;
 8001426:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800142a:	edc3 6a05 	vstr	s13, [r3, #20]
            particles[i].age++;
 800142e:	8b5a      	ldrh	r2, [r3, #26]
 8001430:	3201      	adds	r2, #1
 8001432:	b292      	uxth	r2, r2
 8001434:	835a      	strh	r2, [r3, #26]
            if (particles[i].x < 0 || particles[i].x >= CUBE_SIZE ||
 8001436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d4d1      	bmi.n	80013e4 <pattern_Fountain+0x11c>
 8001440:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001448:	dacc      	bge.n	80013e4 <pattern_Fountain+0x11c>
 800144a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d4c7      	bmi.n	80013e4 <pattern_Fountain+0x11c>
                particles[i].y < 0 || particles[i].y >= CUBE_SIZE ||
 8001454:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	dac2      	bge.n	80013e4 <pattern_Fountain+0x11c>
 800145e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	d4bd      	bmi.n	80013e4 <pattern_Fountain+0x11c>
                particles[i].z < 0 || particles[i].z >= PLANE_COUNT ||
 8001468:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	dab8      	bge.n	80013e4 <pattern_Fountain+0x11c>
 8001472:	2a32      	cmp	r2, #50	@ 0x32
 8001474:	d8b6      	bhi.n	80013e4 <pattern_Fountain+0x11c>
            int pz = (int)particles[i].z;
 8001476:	eebd 6ac6 	vcvt.s32.f32	s12, s12
            int py = (int)particles[i].y;
 800147a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800147e:	ee17 2a10 	vmov	r2, s14
            cube_data[pz][py][px] = 1;
 8001482:	ee16 5a10 	vmov	r5, s12
 8001486:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
            int px = (int)particles[i].x;
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            cube_data[pz][py][px] = 1;
 800148e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001492:	ee17 5a90 	vmov	r5, s15
 8001496:	f802 c005 	strb.w	ip, [r2, r5]
 800149a:	e7a5      	b.n	80013e8 <pattern_Fountain+0x120>
        }
    }
}
 800149c:	ecbd 8b04 	vpop	{d8-d9}
 80014a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014a4:	200003f4 	.word	0x200003f4
 80014a8:	200000ac 	.word	0x200000ac
 80014ac:	20000434 	.word	0x20000434
 80014b0:	aaaaaaab 	.word	0xaaaaaaab
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	42c80000 	.word	0x42c80000
 80014bc:	3e99999a 	.word	0x3e99999a
 80014c0:	3ecccccd 	.word	0x3ecccccd
 80014c4:	3dcccccd 	.word	0x3dcccccd
 80014c8:	3cf5c28f 	.word	0x3cf5c28f
 80014cc:	20000a4c 	.word	0x20000a4c

080014d0 <CUBE_Patterns_ProcessAnimation>:
{
 80014d0:	b508      	push	{r3, lr}
    uint32_t currentTime = HAL_GetTick();
 80014d2:	f001 fb21 	bl	8002b18 <HAL_GetTick>
    if (patternMode == PATTERN_DYNAMIC && 
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <CUBE_Patterns_ProcessAnimation+0x84>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d000      	beq.n	80014e0 <CUBE_Patterns_ProcessAnimation+0x10>
}
 80014de:	bd08      	pop	{r3, pc}
        (currentTime - lastAnimationUpdate >= animationSpeed)) {
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <CUBE_Patterns_ProcessAnimation+0x88>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ac3      	subs	r3, r0, r3
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <CUBE_Patterns_ProcessAnimation+0x8c>)
    if (patternMode == PATTERN_DYNAMIC && 
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d3f7      	bcc.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
        lastAnimationUpdate = currentTime;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <CUBE_Patterns_ProcessAnimation+0x88>)
 80014f0:	6018      	str	r0, [r3, #0]
        animationStep++;  // Advance animation frame
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <CUBE_Patterns_ProcessAnimation+0x90>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	3001      	adds	r0, #1
 80014f8:	6018      	str	r0, [r3, #0]
        switch (currentPattern) {
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <CUBE_Patterns_ProcessAnimation+0x94>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b09      	cmp	r3, #9
 8001500:	d824      	bhi.n	800154c <CUBE_Patterns_ProcessAnimation+0x7c>
 8001502:	e8df f003 	tbb	[pc, r3]
 8001506:	0805      	.short	0x0805
 8001508:	14110e0b 	.word	0x14110e0b
 800150c:	201d1a17 	.word	0x201d1a17
                pattern_PlaneWave();
 8001510:	f7ff f9d0 	bl	80008b4 <pattern_PlaneWave>
                break;
 8001514:	e7e3      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Rain();
 8001516:	f7ff fa25 	bl	8000964 <pattern_Rain>
                break;
 800151a:	e7e0      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Sphere(animationStep);
 800151c:	f7ff fa6c 	bl	80009f8 <pattern_Sphere>
                break;
 8001520:	e7dd      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Spiral();
 8001522:	f7ff fadd 	bl	8000ae0 <pattern_Spiral>
                break;
 8001526:	e7da      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_FireEffect();
 8001528:	f7ff fb4e 	bl	8000bc8 <pattern_FireEffect>
                break;
 800152c:	e7d7      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_BouncingBall();
 800152e:	f7ff fbd1 	bl	8000cd4 <pattern_BouncingBall>
                break;
 8001532:	e7d4      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Snake3D();
 8001534:	f7ff fce2 	bl	8000efc <pattern_Snake3D>
                break;
 8001538:	e7d1      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Ripples();
 800153a:	f7ff fd8b 	bl	8001054 <pattern_Ripples>
                break;
 800153e:	e7ce      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Helix();
 8001540:	f7ff fe06 	bl	8001150 <pattern_Helix>
                break;
 8001544:	e7cb      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                pattern_Fountain();
 8001546:	f7ff febf 	bl	80012c8 <pattern_Fountain>
                break;
 800154a:	e7c8      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
                CUBE_Patterns_ShowStaticPattern(0); // Default to basic pattern
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff f82b 	bl	80005a8 <CUBE_Patterns_ShowStaticPattern>
}
 8001552:	e7c4      	b.n	80014de <CUBE_Patterns_ProcessAnimation+0xe>
 8001554:	20000438 	.word	0x20000438
 8001558:	20000430 	.word	0x20000430
 800155c:	20000018 	.word	0x20000018
 8001560:	20000434 	.word	0x20000434
 8001564:	20000439 	.word	0x20000439

08001568 <LED_Cube_GetRefreshRate>:
 * @brief Calculate and return the current refresh rate
 * @return Current refresh rate in frames per second
 */
float LED_Cube_GetRefreshRate(void) {
    return current_fps;
}
 8001568:	4b01      	ldr	r3, [pc, #4]	@ (8001570 <LED_Cube_GetRefreshRate+0x8>)
 800156a:	ed93 0a00 	vldr	s0, [r3]
 800156e:	4770      	bx	lr
 8001570:	2000043c 	.word	0x2000043c

08001574 <LED_Cube_Init>:
}

/**
 * @brief Initialize the LED cube
 */
void LED_Cube_Init(void) {
 8001574:	b510      	push	{r4, lr}
    // Clear the cube data
    memset(cube_data, 0, sizeof(cube_data));
 8001576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800157a:	2100      	movs	r1, #0
 800157c:	480b      	ldr	r0, [pc, #44]	@ (80015ac <LED_Cube_Init+0x38>)
 800157e:	f003 fa68 	bl	8004a52 <memset>
    
    // Clear the framebuffer
    memset(cube_framebuffer, 0, sizeof(cube_framebuffer));
 8001582:	4c0b      	ldr	r4, [pc, #44]	@ (80015b0 <LED_Cube_Init+0x3c>)
 8001584:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001588:	2100      	movs	r1, #0
 800158a:	4620      	mov	r0, r4
 800158c:	f003 fa61 	bl	8004a52 <memset>
    
    // Initialize each plane (8 channels)
    for (uint8_t i = 0; i < 8; i++) {
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <LED_Cube_Init+0x40>)
    memset(cube_framebuffer, 0, sizeof(cube_framebuffer));
 8001592:	2200      	movs	r2, #0
        ws2812b.item[i].channel = i;
        ws2812b.item[i].frameBufferPointer = &cube_framebuffer[i * 64 * 3]; // Point to appropriate section
        ws2812b.item[i].frameBufferSize = 64 * 3; // 64 LEDs × 3 bytes each
 8001594:	21c0      	movs	r1, #192	@ 0xc0
        ws2812b.item[i].channel = i;
 8001596:	731a      	strb	r2, [r3, #12]
        ws2812b.item[i].frameBufferPointer = &cube_framebuffer[i * 64 * 3]; // Point to appropriate section
 8001598:	601c      	str	r4, [r3, #0]
        ws2812b.item[i].frameBufferSize = 64 * 3; // 64 LEDs × 3 bytes each
 800159a:	6059      	str	r1, [r3, #4]
    for (uint8_t i = 0; i < 8; i++) {
 800159c:	3201      	adds	r2, #1
 800159e:	3310      	adds	r3, #16
 80015a0:	34c0      	adds	r4, #192	@ 0xc0
 80015a2:	2a08      	cmp	r2, #8
 80015a4:	d1f7      	bne.n	8001596 <LED_Cube_Init+0x22>
    }
    
    // Initialize the WS2812B hardware
    ws2812b_init();
 80015a6:	f001 f839 	bl	800261c <ws2812b_init>
}
 80015aa:	bd10      	pop	{r4, pc}
 80015ac:	20000a4c 	.word	0x20000a4c
 80015b0:	2000044c 	.word	0x2000044c
 80015b4:	20000fc8 	.word	0x20000fc8

080015b8 <LED_Cube_Clear>:
}

/**
 * @brief Clear the LED cube
 */
void LED_Cube_Clear(void) {
 80015b8:	b508      	push	{r3, lr}
    memset(cube_data, 0, sizeof(cube_data));
 80015ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015be:	2100      	movs	r1, #0
 80015c0:	4801      	ldr	r0, [pc, #4]	@ (80015c8 <LED_Cube_Clear+0x10>)
 80015c2:	f003 fa46 	bl	8004a52 <memset>
}
 80015c6:	bd08      	pop	{r3, pc}
 80015c8:	20000a4c 	.word	0x20000a4c

080015cc <LED_Cube_SetFullData>:
void LED_Cube_SetFullData(uint8_t* data, uint16_t size) {
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	4606      	mov	r6, r0
 80015d0:	460d      	mov	r5, r1
    LED_Cube_Clear();
 80015d2:	f7ff fff1 	bl	80015b8 <LED_Cube_Clear>
    for (uint16_t byteIndex = 0; byteIndex < size; byteIndex++) {
 80015d6:	b335      	cbz	r5, 8001626 <LED_Cube_SetFullData+0x5a>
 80015d8:	4634      	mov	r4, r6
 80015da:	442e      	add	r6, r5
    uint16_t bitIndex = 0;
 80015dc:	2300      	movs	r3, #0
                cube_data[z][y][x] = state;
 80015de:	4d12      	ldr	r5, [pc, #72]	@ (8001628 <LED_Cube_SetFullData+0x5c>)
 80015e0:	e01d      	b.n	800161e <LED_Cube_SetFullData+0x52>
            bitIndex++;
 80015e2:	3301      	adds	r3, #1
 80015e4:	b29b      	uxth	r3, r3
            if (bitIndex >= PLANE_COUNT * CUBE_SIZE * CUBE_SIZE) {
 80015e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ea:	d216      	bcs.n	800161a <LED_Cube_SetFullData+0x4e>
        for (uint8_t bit = 0; bit < 8; bit++) {
 80015ec:	3a01      	subs	r2, #1
 80015ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 80015f2:	d012      	beq.n	800161a <LED_Cube_SetFullData+0x4e>
            z = bitIndex / (CUBE_SIZE * CUBE_SIZE);
 80015f4:	f3c3 1087 	ubfx	r0, r3, #6, #8
            if (z < PLANE_COUNT && y < CUBE_SIZE && x < CUBE_SIZE) {
 80015f8:	2807      	cmp	r0, #7
 80015fa:	d8f2      	bhi.n	80015e2 <LED_Cube_SetFullData+0x16>
                cube_data[z][y][x] = state;
 80015fc:	f3c3 01c2 	ubfx	r1, r3, #3, #3
 8001600:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8001604:	f003 0007 	and.w	r0, r3, #7
 8001608:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
            uint8_t state = (currentByte >> (7 - bit)) & 0x01;
 800160c:	fa4e fc02 	asr.w	ip, lr, r2
 8001610:	f00c 0c01 	and.w	ip, ip, #1
                cube_data[z][y][x] = state;
 8001614:	f801 c000 	strb.w	ip, [r1, r0]
 8001618:	e7e3      	b.n	80015e2 <LED_Cube_SetFullData+0x16>
    for (uint16_t byteIndex = 0; byteIndex < size; byteIndex++) {
 800161a:	42a6      	cmp	r6, r4
 800161c:	d003      	beq.n	8001626 <LED_Cube_SetFullData+0x5a>
        uint8_t currentByte = data[byteIndex];
 800161e:	f814 eb01 	ldrb.w	lr, [r4], #1
 8001622:	2207      	movs	r2, #7
 8001624:	e7e6      	b.n	80015f4 <LED_Cube_SetFullData+0x28>
}
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	20000a4c 	.word	0x20000a4c

0800162c <LED_Cube_Process>:
 */
void LED_Cube_Process(void) {
    uint8_t z, y, x;
    
    // Only update if the previous transfer is complete
    if (!ws2812b.transferComplete) {
 800162c:	4b95      	ldr	r3, [pc, #596]	@ (8001884 <LED_Cube_Process+0x258>)
 800162e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8125 	beq.w	8001882 <LED_Cube_Process+0x256>
void LED_Cube_Process(void) {
 8001638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800163c:	b087      	sub	sp, #28
        return;
    }
    
    // Update rainbow effect offset for animation
    // rainbowOffset += 1;
    hueOffset += 0.5f;  // Smaller values = slower transitions
 800163e:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <LED_Cube_Process+0x25c>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001648:	ee77 7a87 	vadd.f32	s15, s15, s14
    if (hueOffset >= 256.0f) {
 800164c:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800188c <LED_Cube_Process+0x260>
 8001650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	bfa8      	it	ge
 800165a:	eddf 7a8d 	vldrge	s15, [pc, #564]	@ 8001890 <LED_Cube_Process+0x264>
        hueOffset = 0.0f;
 800165e:	4b8a      	ldr	r3, [pc, #552]	@ (8001888 <LED_Cube_Process+0x25c>)
 8001660:	edc3 7a00 	vstr	s15, [r3]
                    if (currentMode == MODE_STL) {
                        // Orange color for STL mode
                        color = 0x8CFF00;  // GRB format
                    } else {
                        // Rainbow colors for animation mode (existing code)
                        uint8_t hue = (uint8_t)((serpIndex * 8 + z * 4 + (uint8_t)hueOffset) % 256);
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	edcd 7a00 	vstr	s15, [sp]
 800166c:	f89d 3000 	ldrb.w	r3, [sp]
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	4a88      	ldr	r2, [pc, #544]	@ (8001894 <LED_Cube_Process+0x268>)
 8001674:	2300      	movs	r3, #0
 8001676:	9301      	str	r3, [sp, #4]
                    cube_framebuffer[ledIndex*3]   = g; // Green
                    cube_framebuffer[ledIndex*3+1] = r; // Red
                    cube_framebuffer[ledIndex*3+2] = b; // Blue
                } else {
                    // If LED is off, set to black
                    cube_framebuffer[ledIndex*3]   = 0; // G
 8001678:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 80018b8 <LED_Cube_Process+0x28c>
    return (uint8_t)(colorValue * brightness);
 800167c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001898 <LED_Cube_Process+0x26c>
 8001680:	e0c9      	b.n	8001816 <LED_Cube_Process+0x1ea>
        return y * CUBE_SIZE + x;
 8001682:	460b      	mov	r3, r1
                uint16_t ledIndex = (z * LEDS_PER_PLANE) + serpIndex;
 8001684:	eb03 000e 	add.w	r0, r3, lr
 8001688:	b280      	uxth	r0, r0
                if (cube_data[z][y][x]) {
 800168a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800168e:	2c00      	cmp	r4, #0
 8001690:	f000 8082 	beq.w	8001798 <LED_Cube_Process+0x16c>
                    if (currentMode == MODE_STL) {
 8001694:	4c81      	ldr	r4, [pc, #516]	@ (800189c <LED_Cube_Process+0x270>)
 8001696:	7824      	ldrb	r4, [r4, #0]
 8001698:	b2e4      	uxtb	r4, r4
 800169a:	2c01      	cmp	r4, #1
 800169c:	d07a      	beq.n	8001794 <LED_Cube_Process+0x168>
                        uint8_t hue = (uint8_t)((serpIndex * 8 + z * 4 + (uint8_t)hueOffset) % 256);
 800169e:	9c01      	ldr	r4, [sp, #4]
 80016a0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80016a4:	9c02      	ldr	r4, [sp, #8]
 80016a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016aa:	425c      	negs	r4, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	b2e4      	uxtb	r4, r4
 80016b0:	bf58      	it	pl
 80016b2:	4263      	negpl	r3, r4
    if (s == 0) {
        r = g = b = v;
        return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
    }
    
    region = h / 43;
 80016b4:	b2dc      	uxtb	r4, r3
 80016b6:	4a7a      	ldr	r2, [pc, #488]	@ (80018a0 <LED_Cube_Process+0x274>)
 80016b8:	fba2 4904 	umull	r4, r9, r2, r4
 80016bc:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    remainder = (h - (region * 43)) * 6; 
 80016c0:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 80016c4:	fb02 3309 	mla	r3, r2, r9, r3
 80016c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016cc:	005b      	lsls	r3, r3, #1
    
    p = (v * (255 - s)) >> 8;
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	ebc3 2403 	rsb	r4, r3, r3, lsl #8
 80016d4:	1224      	asrs	r4, r4, #8
 80016d6:	f1c4 04ff 	rsb	r4, r4, #255	@ 0xff
 80016da:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80016de:	f3c4 2407 	ubfx	r4, r4, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80016e2:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80016e6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80016ea:	121b      	asrs	r3, r3, #8
 80016ec:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80016f0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80016f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    
    switch (region) {
 80016f8:	f1b9 0f04 	cmp.w	r9, #4
 80016fc:	d842      	bhi.n	8001784 <LED_Cube_Process+0x158>
 80016fe:	e8df f009 	tbb	[pc, r9]
 8001702:	4503      	.short	0x4503
 8001704:	3733      	.short	0x3733
 8001706:	3c          	.byte	0x3c
 8001707:	00          	.byte	0x00
        case 0:  r = v; g = t; b = p; break;
 8001708:	24ff      	movs	r4, #255	@ 0xff
        case 3:  r = p; g = q; b = v; break;
        case 4:  r = t; g = p; b = v; break;
        default: r = v; g = p; b = q; break;
    }
    
    return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001710:	ea43 0309 	orr.w	r3, r3, r9
                    cube_framebuffer[ledIndex*3]   = g; // Green
 8001714:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    return (uint8_t)(colorValue * brightness);
 8001718:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800171c:	ee07 2a90 	vmov	s15, r2
 8001720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172c:	ee17 4a90 	vmov	r4, s15
 8001730:	f80a 4000 	strb.w	r4, [sl, r0]
                    cube_framebuffer[ledIndex*3+1] = r; // Red
 8001734:	4450      	add	r0, sl
                    uint8_t r = applyBrightness((color >> 16) & 0xFF);
 8001736:	0c1c      	lsrs	r4, r3, #16
 8001738:	ee07 4a90 	vmov	s15, r4
    return (uint8_t)(colorValue * brightness);
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	ee17 4a90 	vmov	r4, s15
 800174c:	7044      	strb	r4, [r0, #1]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001760:	ee17 3a90 	vmov	r3, s15
 8001764:	7083      	strb	r3, [r0, #2]
 8001766:	e01e      	b.n	80017a6 <LED_Cube_Process+0x17a>
        case 2:  r = p; g = v; b = t; break;
 8001768:	4699      	mov	r9, r3
 800176a:	23ff      	movs	r3, #255	@ 0xff
 800176c:	2400      	movs	r4, #0
 800176e:	e7cc      	b.n	800170a <LED_Cube_Process+0xde>
        case 3:  r = p; g = q; b = v; break;
 8001770:	4623      	mov	r3, r4
 8001772:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8001776:	2400      	movs	r4, #0
 8001778:	e7c7      	b.n	800170a <LED_Cube_Process+0xde>
        case 4:  r = t; g = p; b = v; break;
 800177a:	461c      	mov	r4, r3
 800177c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8001780:	2300      	movs	r3, #0
 8001782:	e7c2      	b.n	800170a <LED_Cube_Process+0xde>
        default: r = v; g = p; b = q; break;
 8001784:	46a1      	mov	r9, r4
 8001786:	2300      	movs	r3, #0
 8001788:	24ff      	movs	r4, #255	@ 0xff
 800178a:	e7be      	b.n	800170a <LED_Cube_Process+0xde>
    switch (region) {
 800178c:	f04f 0900 	mov.w	r9, #0
 8001790:	23ff      	movs	r3, #255	@ 0xff
 8001792:	e7ba      	b.n	800170a <LED_Cube_Process+0xde>
                        color = 0x8CFF00;  // GRB format
 8001794:	4b43      	ldr	r3, [pc, #268]	@ (80018a4 <LED_Cube_Process+0x278>)
 8001796:	e7bd      	b.n	8001714 <LED_Cube_Process+0xe8>
                    cube_framebuffer[ledIndex*3]   = 0; // G
 8001798:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800179c:	f80a 6000 	strb.w	r6, [sl, r0]
                    cube_framebuffer[ledIndex*3+1] = 0; // R
 80017a0:	4450      	add	r0, sl
 80017a2:	7046      	strb	r6, [r0, #1]
                    cube_framebuffer[ledIndex*3+2] = 0; // B
 80017a4:	7086      	strb	r6, [r0, #2]
            for (x = 0; x < CUBE_SIZE; x++) {
 80017a6:	3101      	adds	r1, #1
 80017a8:	b2c9      	uxtb	r1, r1
 80017aa:	42b9      	cmp	r1, r7
 80017ac:	d007      	beq.n	80017be <LED_Cube_Process+0x192>
    if (y % 2 == 0) {
 80017ae:	9b00      	ldr	r3, [sp, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f43f af66 	beq.w	8001682 <LED_Cube_Process+0x56>
        return y * CUBE_SIZE + (CUBE_SIZE - 1 - x);
 80017b6:	eba8 0301 	sub.w	r3, r8, r1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	e762      	b.n	8001684 <LED_Cube_Process+0x58>
        for (y = 0; y < CUBE_SIZE; y++) {
 80017be:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80017c2:	9c05      	ldr	r4, [sp, #20]
 80017c4:	465a      	mov	r2, fp
 80017c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80017ca:	f10b 0b01 	add.w	fp, fp, #1
 80017ce:	fa5f fb8b 	uxtb.w	fp, fp
 80017d2:	3708      	adds	r7, #8
 80017d4:	b2ff      	uxtb	r7, r7
 80017d6:	f109 0310 	add.w	r3, r9, #16
 80017da:	fa5f f983 	uxtb.w	r9, r3
 80017de:	3408      	adds	r4, #8
 80017e0:	f1bb 0f08 	cmp.w	fp, #8
 80017e4:	d011      	beq.n	800180a <LED_Cube_Process+0x1de>
            for (x = 0; x < CUBE_SIZE; x++) {
 80017e6:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 80017ea:	b2c9      	uxtb	r1, r1
 80017ec:	4625      	mov	r5, r4
    if (y % 2 == 0) {
 80017ee:	f00b 0c01 	and.w	ip, fp, #1
        return y * CUBE_SIZE + (CUBE_SIZE - 1 - x);
 80017f2:	f109 0807 	add.w	r8, r9, #7
                    cube_framebuffer[ledIndex*3]   = 0; // G
 80017f6:	2600      	movs	r6, #0
 80017f8:	f8cd b00c 	str.w	fp, [sp, #12]
 80017fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8001800:	9405      	str	r4, [sp, #20]
 8001802:	4693      	mov	fp, r2
 8001804:	f8cd c000 	str.w	ip, [sp]
 8001808:	e7d1      	b.n	80017ae <LED_Cube_Process+0x182>
    for (z = 0; z < PLANE_COUNT; z++) {
 800180a:	9b01      	ldr	r3, [sp, #4]
 800180c:	3301      	adds	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	3240      	adds	r2, #64	@ 0x40
 8001812:	2b08      	cmp	r3, #8
 8001814:	d00a      	beq.n	800182c <LED_Cube_Process+0x200>
        for (y = 0; y < CUBE_SIZE; y++) {
 8001816:	9b01      	ldr	r3, [sp, #4]
 8001818:	ea4f 1e83 	mov.w	lr, r3, lsl #6
 800181c:	fa1f fe8e 	uxth.w	lr, lr
                        color = 0x8CFF00;  // GRB format
 8001820:	4614      	mov	r4, r2
 8001822:	2000      	movs	r0, #0
 8001824:	2708      	movs	r7, #8
        for (y = 0; y < CUBE_SIZE; y++) {
 8001826:	4683      	mov	fp, r0
 8001828:	4681      	mov	r9, r0
 800182a:	e7dc      	b.n	80017e6 <LED_Cube_Process+0x1ba>
    ws2812b.startTransfer = 1;
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <LED_Cube_Process+0x258>)
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    frame_count++;
 8001834:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <LED_Cube_Process+0x27c>)
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	6013      	str	r3, [r2, #0]
    uint32_t current_time = HAL_GetTick();
 800183c:	f001 f96c 	bl	8002b18 <HAL_GetTick>
    if (current_time - last_fps_time >= 1000) {
 8001840:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <LED_Cube_Process+0x280>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ac3      	subs	r3, r0, r3
 8001846:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800184a:	d315      	bcc.n	8001878 <LED_Cube_Process+0x24c>
        current_fps = (float)frame_count * 1000.0f / (current_time - last_fps_time);
 800184c:	4916      	ldr	r1, [pc, #88]	@ (80018a8 <LED_Cube_Process+0x27c>)
 800184e:	edd1 7a00 	vldr	s15, [r1]
 8001852:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001856:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80018b0 <LED_Cube_Process+0x284>
 800185a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001866:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <LED_Cube_Process+0x288>)
 800186c:	edc3 6a00 	vstr	s13, [r3]
        frame_count = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	600b      	str	r3, [r1, #0]
        last_fps_time = current_time;
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <LED_Cube_Process+0x280>)
 8001876:	6018      	str	r0, [r3, #0]
    ws2812b_handle();
 8001878:	f001 f818 	bl	80028ac <ws2812b_handle>
}
 800187c:	b007      	add	sp, #28
 800187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001882:	4770      	bx	lr
 8001884:	20000fc8 	.word	0x20000fc8
 8001888:	20000448 	.word	0x20000448
 800188c:	43800000 	.word	0x43800000
 8001890:	00000000 	.word	0x00000000
 8001894:	20000a4b 	.word	0x20000a4b
 8001898:	3f333333 	.word	0x3f333333
 800189c:	20000d68 	.word	0x20000d68
 80018a0:	2fa0be83 	.word	0x2fa0be83
 80018a4:	008cff00 	.word	0x008cff00
 80018a8:	20000444 	.word	0x20000444
 80018ac:	20000440 	.word	0x20000440
 80018b0:	447a0000 	.word	0x447a0000
 80018b4:	2000043c 	.word	0x2000043c
 80018b8:	2000044c 	.word	0x2000044c

080018bc <rotateAndUpdateSTL>:
  * @brief Apply rotation to STL data and update the LED cube
  * @param rotation Rotation type (0-9)
  * @param data Original STL data
  */
 void rotateAndUpdateSTL(uint8_t rotation) 
 {
 80018bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c0:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80018c4:	4604      	mov	r4, r0
   // Create temporary buffer for rotated data
   uint8_t tempCube[PLANE_COUNT][CUBE_SIZE][CUBE_SIZE] = {0};
 80018c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ca:	2100      	movs	r1, #0
 80018cc:	a804      	add	r0, sp, #16
 80018ce:	f003 f8c0 	bl	8004a52 <memset>
   
   // First unpack original data into a temp array
   uint16_t bitIndex = 0;
   for (uint16_t byteIndex = 0; byteIndex < CUBE_BUFFER_SIZE; byteIndex++) {
 80018d2:	4f5a      	ldr	r7, [pc, #360]	@ (8001a3c <rotateAndUpdateSTL+0x180>)
 80018d4:	f107 0c40 	add.w	ip, r7, #64	@ 0x40
   uint16_t bitIndex = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e01d      	b.n	8001918 <rotateAndUpdateSTL+0x5c>
       
       if (z < PLANE_COUNT && y < CUBE_SIZE && x < CUBE_SIZE) {
         tempCube[z][y][x] = state;
       }
       
       bitIndex++;
 80018dc:	3301      	adds	r3, #1
 80018de:	b29b      	uxth	r3, r3
       if (bitIndex >= 512) break;
 80018e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018e4:	d216      	bcs.n	8001914 <rotateAndUpdateSTL+0x58>
     for (uint8_t bit = 0; bit < 8; bit++) {
 80018e6:	3a01      	subs	r2, #1
 80018e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80018ec:	d012      	beq.n	8001914 <rotateAndUpdateSTL+0x58>
       uint8_t z = bitIndex / 64;
 80018ee:	f3c3 1087 	ubfx	r0, r3, #6, #8
       if (z < PLANE_COUNT && y < CUBE_SIZE && x < CUBE_SIZE) {
 80018f2:	2807      	cmp	r0, #7
 80018f4:	d8f2      	bhi.n	80018dc <rotateAndUpdateSTL+0x20>
         tempCube[z][y][x] = state;
 80018f6:	f3c3 01c2 	ubfx	r1, r3, #3, #3
 80018fa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80018fe:	f003 0007 	and.w	r0, r3, #7
 8001902:	ad04      	add	r5, sp, #16
 8001904:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
       uint8_t state = (currentByte >> (7 - bit)) & 0x01;
 8001908:	fa46 f502 	asr.w	r5, r6, r2
 800190c:	f005 0501 	and.w	r5, r5, #1
         tempCube[z][y][x] = state;
 8001910:	540d      	strb	r5, [r1, r0]
 8001912:	e7e3      	b.n	80018dc <rotateAndUpdateSTL+0x20>
   for (uint16_t byteIndex = 0; byteIndex < CUBE_BUFFER_SIZE; byteIndex++) {
 8001914:	4567      	cmp	r7, ip
 8001916:	d003      	beq.n	8001920 <rotateAndUpdateSTL+0x64>
     uint8_t currentByte = originalSTLData[byteIndex];
 8001918:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800191c:	2207      	movs	r2, #7
 800191e:	e7e6      	b.n	80018ee <rotateAndUpdateSTL+0x32>
     }
   }
   
   // Clear cube data
   memset(cube_data, 0, sizeof(cube_data));
 8001920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001924:	2100      	movs	r1, #0
 8001926:	4846      	ldr	r0, [pc, #280]	@ (8001a40 <rotateAndUpdateSTL+0x184>)
 8001928:	f003 f893 	bl	8004a52 <memset>
   
   // Apply rotation
   for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 800192c:	f10d 0a10 	add.w	sl, sp, #16
   memset(cube_data, 0, sizeof(cube_data));
 8001930:	2200      	movs	r2, #0
 8001932:	f04f 0c07 	mov.w	ip, #7
     for (uint8_t y = 0; y < CUBE_SIZE; y++) {
       for (uint8_t x = 0; x < CUBE_SIZE; x++) {
         uint8_t nx = 0, ny = 0, nz = 0;
         
         switch (rotation) {
 8001936:	46e3      	mov	fp, ip
 8001938:	3c01      	subs	r4, #1
             nx = x; ny = y; nz = z;
         }
         
         // Apply rotated data
         if (nx < CUBE_SIZE && ny < CUBE_SIZE && nz < PLANE_COUNT) {
           cube_data[nz][ny][nx] = tempCube[z][y][x];
 800193a:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8001a40 <rotateAndUpdateSTL+0x184>
 800193e:	e06d      	b.n	8001a1c <rotateAndUpdateSTL+0x160>
         switch (rotation) {
 8001940:	f8dd a004 	ldr.w	sl, [sp, #4]
             nx = x; ny = CUBE_SIZE-1-z; nz = y;
 8001944:	9e02      	ldr	r6, [sp, #8]
         if (nx < CUBE_SIZE && ny < CUBE_SIZE && nz < PLANE_COUNT) {
 8001946:	ea45 0006 	orr.w	r0, r5, r6
 800194a:	ea4a 0000 	orr.w	r0, sl, r0
 800194e:	b2c0      	uxtb	r0, r0
 8001950:	2807      	cmp	r0, #7
 8001952:	d806      	bhi.n	8001962 <rotateAndUpdateSTL+0xa6>
           cube_data[nz][ny][nx] = tempCube[z][y][x];
 8001954:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8001958:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 800195c:	f89c 0000 	ldrb.w	r0, [ip]
 8001960:	5570      	strb	r0, [r6, r5]
       for (uint8_t x = 0; x < CUBE_SIZE; x++) {
 8001962:	3b01      	subs	r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f10c 0c01 	add.w	ip, ip, #1
 800196a:	2bff      	cmp	r3, #255	@ 0xff
 800196c:	d03d      	beq.n	80019ea <rotateAndUpdateSTL+0x12e>
 800196e:	f1c3 0507 	rsb	r5, r3, #7
 8001972:	b2ed      	uxtb	r5, r5
         switch (rotation) {
 8001974:	2c08      	cmp	r4, #8
 8001976:	d835      	bhi.n	80019e4 <rotateAndUpdateSTL+0x128>
 8001978:	a001      	add	r0, pc, #4	@ (adr r0, 8001980 <rotateAndUpdateSTL+0xc4>)
 800197a:	f850 f024 	ldr.w	pc, [r0, r4, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001941 	.word	0x08001941
 8001984:	080019a5 	.word	0x080019a5
 8001988:	080019ad 	.word	0x080019ad
 800198c:	080019b5 	.word	0x080019b5
 8001990:	080019bd 	.word	0x080019bd
 8001994:	080019c7 	.word	0x080019c7
 8001998:	080019cf 	.word	0x080019cf
 800199c:	080019d5 	.word	0x080019d5
 80019a0:	080019dd 	.word	0x080019dd
             nx = z; ny = y; nz = CUBE_SIZE-1-x;
 80019a4:	469a      	mov	sl, r3
             break;
 80019a6:	9e01      	ldr	r6, [sp, #4]
 80019a8:	4645      	mov	r5, r8
 80019aa:	e7cc      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             break;
 80019ac:	46c2      	mov	sl, r8
 80019ae:	462e      	mov	r6, r5
             nx = CUBE_SIZE-1-y; ny = x; nz = z;
 80019b0:	463d      	mov	r5, r7
             break;
 80019b2:	e7c8      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             nx = x; ny = CUBE_SIZE-1-y; nz = CUBE_SIZE-1-z;
 80019b4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80019b8:	463e      	mov	r6, r7
             break;
 80019ba:	e7c4      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             nx = CUBE_SIZE-1-x; ny = y; nz = CUBE_SIZE-1-z;
 80019bc:	f8dd a008 	ldr.w	sl, [sp, #8]
             break;
 80019c0:	9e01      	ldr	r6, [sp, #4]
             nx = CUBE_SIZE-1-x; ny = y; nz = CUBE_SIZE-1-z;
 80019c2:	461d      	mov	r5, r3
             break;
 80019c4:	e7bf      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             break;
 80019c6:	46c2      	mov	sl, r8
             nx = CUBE_SIZE-1-x; ny = CUBE_SIZE-1-y; nz = z;
 80019c8:	463e      	mov	r6, r7
 80019ca:	461d      	mov	r5, r3
             break;
 80019cc:	e7bb      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             nx = x; ny = z; nz = CUBE_SIZE-1-y;
 80019ce:	46ba      	mov	sl, r7
             break;
 80019d0:	4646      	mov	r6, r8
 80019d2:	e7b8      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             break;
 80019d4:	46aa      	mov	sl, r5
 80019d6:	9e01      	ldr	r6, [sp, #4]
             nx = CUBE_SIZE-1-z; ny = y; nz = x;
 80019d8:	9d02      	ldr	r5, [sp, #8]
             break;
 80019da:	e7b4      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
             break;
 80019dc:	46c2      	mov	sl, r8
             nx = y; ny = CUBE_SIZE-1-x; nz = z;
 80019de:	461e      	mov	r6, r3
             break;
 80019e0:	9d01      	ldr	r5, [sp, #4]
 80019e2:	e7b0      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
         switch (rotation) {
 80019e4:	46c2      	mov	sl, r8
 80019e6:	9e01      	ldr	r6, [sp, #4]
 80019e8:	e7ad      	b.n	8001946 <rotateAndUpdateSTL+0x8a>
     for (uint8_t y = 0; y < CUBE_SIZE; y++) {
 80019ea:	9e03      	ldr	r6, [sp, #12]
 80019ec:	3f01      	subs	r7, #1
 80019ee:	b2ff      	uxtb	r7, r7
 80019f0:	3608      	adds	r6, #8
 80019f2:	2fff      	cmp	r7, #255	@ 0xff
 80019f4:	d009      	beq.n	8001a0a <rotateAndUpdateSTL+0x14e>
 80019f6:	f1c7 0a07 	rsb	sl, r7, #7
 80019fa:	fa5f fa8a 	uxtb.w	sl, sl
     uint8_t currentByte = originalSTLData[byteIndex];
 80019fe:	46b4      	mov	ip, r6
 8001a00:	465b      	mov	r3, fp
 8001a02:	f8cd a004 	str.w	sl, [sp, #4]
 8001a06:	9603      	str	r6, [sp, #12]
 8001a08:	e7b1      	b.n	800196e <rotateAndUpdateSTL+0xb2>
   for (uint8_t z = 0; z < PLANE_COUNT; z++) {
 8001a0a:	f10e 3cff 	add.w	ip, lr, #4294967295
 8001a0e:	fa5f fc8c 	uxtb.w	ip, ip
 8001a12:	f101 0a40 	add.w	sl, r1, #64	@ 0x40
 8001a16:	3208      	adds	r2, #8
 8001a18:	2a40      	cmp	r2, #64	@ 0x40
 8001a1a:	d00a      	beq.n	8001a32 <rotateAndUpdateSTL+0x176>
 8001a1c:	f1cc 0807 	rsb	r8, ip, #7
 8001a20:	fa5f f888 	uxtb.w	r8, r8
         switch (rotation) {
 8001a24:	4656      	mov	r6, sl
 8001a26:	465f      	mov	r7, fp
             nx = CUBE_SIZE-1-z; ny = y; nz = x;
 8001a28:	f8cd c008 	str.w	ip, [sp, #8]
 8001a2c:	46e6      	mov	lr, ip
 8001a2e:	4651      	mov	r1, sl
 8001a30:	e7e1      	b.n	80019f6 <rotateAndUpdateSTL+0x13a>
         }
       }
     }
   }
 }
 8001a32:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000c4f 	.word	0x20000c4f
 8001a40:	20000a4c 	.word	0x20000a4c

08001a44 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a44:	b508      	push	{r3, lr}
  if (huart->Instance == USART2)
 8001a46:	6802      	ldr	r2, [r0, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_UART_RxCpltCallback+0x50>)
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d000      	beq.n	8001a50 <HAL_UART_RxCpltCallback+0xc>
    }
    
    /* Restart UART reception for next byte */
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
  }
}
 8001a4e:	bd08      	pop	{r3, pc}
    uint16_t nextHead = (ringBufferHead + 1) % UART_RING_BUFFER_SIZE;
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_UART_RxCpltCallback+0x54>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	425a      	negs	r2, r3
 8001a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a62:	bf58      	it	pl
 8001a64:	4253      	negpl	r3, r2
 8001a66:	b29b      	uxth	r3, r3
    if (nextHead != ringBufferTail) {
 8001a68:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <HAL_UART_RxCpltCallback+0x58>)
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d009      	beq.n	8001a86 <HAL_UART_RxCpltCallback+0x42>
    uint8_t receivedByte = uartRxBuffer[0];
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_UART_RxCpltCallback+0x5c>)
 8001a74:	f892 c000 	ldrb.w	ip, [r2]
      uartRingBuffer[ringBufferHead] = receivedByte;
 8001a78:	4907      	ldr	r1, [pc, #28]	@ (8001a98 <HAL_UART_RxCpltCallback+0x54>)
 8001a7a:	880a      	ldrh	r2, [r1, #0]
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x60>)
 8001a80:	f800 c002 	strb.w	ip, [r0, r2]
      ringBufferHead = nextHead;
 8001a84:	800b      	strh	r3, [r1, #0]
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8001a86:	2201      	movs	r2, #1
 8001a88:	4905      	ldr	r1, [pc, #20]	@ (8001aa0 <HAL_UART_RxCpltCallback+0x5c>)
 8001a8a:	4807      	ldr	r0, [pc, #28]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x64>)
 8001a8c:	f002 fe6b 	bl	8004766 <HAL_UART_Receive_IT>
}
 8001a90:	e7dd      	b.n	8001a4e <HAL_UART_RxCpltCallback+0xa>
 8001a92:	bf00      	nop
 8001a94:	40004400 	.word	0x40004400
 8001a98:	20000c94 	.word	0x20000c94
 8001a9c:	20000c92 	.word	0x20000c92
 8001aa0:	20000d5c 	.word	0x20000d5c
 8001aa4:	20000c98 	.word	0x20000c98
 8001aa8:	20000d74 	.word	0x20000d74

08001aac <processUartRingBuffer>:
/**
  * @brief Process data in the UART ring buffer
  * @retval None
  */
 void processUartRingBuffer(void)
 {
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   /* Process all available bytes in ring buffer */
   while (ringBufferHead != ringBufferTail) {
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <processUartRingBuffer+0xf0>)
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba0 <processUartRingBuffer+0xf4>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d06d      	beq.n	8001b9a <processUartRingBuffer+0xee>
     /* Get the next byte from buffer */
     uint8_t receivedByte = uartRingBuffer[ringBufferTail];
 8001abe:	4c38      	ldr	r4, [pc, #224]	@ (8001ba0 <processUartRingBuffer+0xf4>)
 8001ac0:	4e38      	ldr	r6, [pc, #224]	@ (8001ba4 <processUartRingBuffer+0xf8>)
     ringBufferTail = (ringBufferTail + 1) % UART_RING_BUFFER_SIZE;
     
     /* Only process data in STL mode */
     if (currentMode == MODE_STL) {
 8001ac2:	4d39      	ldr	r5, [pc, #228]	@ (8001ba8 <processUartRingBuffer+0xfc>)
 8001ac4:	e023      	b.n	8001b0e <processUartRingBuffer+0x62>
       /* Process based on current state */
       switch (rxState) {
         case 0: // Waiting for start marker
           if (receivedByte == CUBE_START_MARKER) {
             /* Start marker received, prepare to receive data */
             cubeDataIndex = 0;
 8001ac6:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <processUartRingBuffer+0x100>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	801a      	strh	r2, [r3, #0]
             rxState = 1;
 8001acc:	2201      	movs	r2, #1
 8001ace:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <processUartRingBuffer+0x104>)
 8001ad0:	701a      	strb	r2, [r3, #0]
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // LED on during reception
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	4837      	ldr	r0, [pc, #220]	@ (8001bb4 <processUartRingBuffer+0x108>)
 8001ad6:	f001 fc43 	bl	8003360 <HAL_GPIO_WritePin>
 8001ada:	e011      	b.n	8001b00 <processUartRingBuffer+0x54>
           }
           break;
           
         case 1: // Receiving data
           /* Store the received byte */
           if (cubeDataIndex < CUBE_BUFFER_SIZE) {
 8001adc:	4b33      	ldr	r3, [pc, #204]	@ (8001bac <processUartRingBuffer+0x100>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ae2:	d807      	bhi.n	8001af4 <processUartRingBuffer+0x48>
             cubeDataBuffer[cubeDataIndex++] = receivedByte;
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	4830      	ldr	r0, [pc, #192]	@ (8001bac <processUartRingBuffer+0x100>)
 8001aea:	8002      	strh	r2, [r0, #0]
 8001aec:	4832      	ldr	r0, [pc, #200]	@ (8001bb8 <processUartRingBuffer+0x10c>)
 8001aee:	54c1      	strb	r1, [r0, r3]
           }
           
           /* If we received all expected data, wait for end marker */
           if (cubeDataIndex >= CUBE_BUFFER_SIZE) {
 8001af0:	2a3f      	cmp	r2, #63	@ 0x3f
 8001af2:	d905      	bls.n	8001b00 <processUartRingBuffer+0x54>
             rxState = 2;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <processUartRingBuffer+0x104>)
 8001af6:	2202      	movs	r2, #2
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e001      	b.n	8001b00 <processUartRingBuffer+0x54>
           }
           break;
           
          case 2: // Waiting for end marker
          if (receivedByte == CUBE_END_MARKER) {
 8001afc:	295a      	cmp	r1, #90	@ 0x5a
 8001afe:	d029      	beq.n	8001b54 <processUartRingBuffer+0xa8>
   while (ringBufferHead != ringBufferTail) {
 8001b00:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <processUartRingBuffer+0xf0>)
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	b292      	uxth	r2, r2
 8001b06:	8823      	ldrh	r3, [r4, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d045      	beq.n	8001b9a <processUartRingBuffer+0xee>
     uint8_t receivedByte = uartRingBuffer[ringBufferTail];
 8001b0e:	8823      	ldrh	r3, [r4, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	5cf3      	ldrb	r3, [r6, r3]
 8001b14:	b2d9      	uxtb	r1, r3
     ringBufferTail = (ringBufferTail + 1) % UART_RING_BUFFER_SIZE;
 8001b16:	8823      	ldrh	r3, [r4, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	425a      	negs	r2, r3
 8001b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b26:	bf58      	it	pl
 8001b28:	4253      	negpl	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	8023      	strh	r3, [r4, #0]
     if (currentMode == MODE_STL) {
 8001b2e:	782b      	ldrb	r3, [r5, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d1e4      	bne.n	8001b00 <processUartRingBuffer+0x54>
       switch (rxState) {
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <processUartRingBuffer+0x104>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d0ce      	beq.n	8001adc <processUartRingBuffer+0x30>
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d0dc      	beq.n	8001afc <processUartRingBuffer+0x50>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1dc      	bne.n	8001b00 <processUartRingBuffer+0x54>
           if (receivedByte == CUBE_START_MARKER) {
 8001b46:	29a5      	cmp	r1, #165	@ 0xa5
 8001b48:	d0bd      	beq.n	8001ac6 <processUartRingBuffer+0x1a>
             HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED for feedback
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	4819      	ldr	r0, [pc, #100]	@ (8001bb4 <processUartRingBuffer+0x108>)
 8001b4e:	f001 fc0d 	bl	800336c <HAL_GPIO_TogglePin>
 8001b52:	e7d5      	b.n	8001b00 <processUartRingBuffer+0x54>
            /* End marker received, process the complete cube data */
            // Store a copy of the original data for rotations
            memcpy(originalSTLData, cubeDataBuffer, CUBE_BUFFER_SIZE);
 8001b54:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8001bb8 <processUartRingBuffer+0x10c>
 8001b58:	4f18      	ldr	r7, [pc, #96]	@ (8001bbc <processUartRingBuffer+0x110>)
 8001b5a:	46f4      	mov	ip, lr
 8001b5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001b60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001b66:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001b6c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b6e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001b72:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
            currentRotation = ROTATION_NONE;  // Reset rotation state
 8001b76:	2700      	movs	r7, #0
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <processUartRingBuffer+0x114>)
 8001b7a:	701f      	strb	r7, [r3, #0]
            
            LED_Cube_SetFullData(cubeDataBuffer, CUBE_BUFFER_SIZE);
 8001b7c:	2140      	movs	r1, #64	@ 0x40
 8001b7e:	4670      	mov	r0, lr
 8001b80:	f7ff fd24 	bl	80015cc <LED_Cube_SetFullData>
            rxState = 0;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <processUartRingBuffer+0x104>)
 8001b86:	701f      	strb	r7, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b88:	463a      	mov	r2, r7
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <processUartRingBuffer+0x108>)
 8001b8e:	f001 fbe7 	bl	8003360 <HAL_GPIO_WritePin>
            blinkLedFlag = 1;  // Set flag for LED feedback
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <processUartRingBuffer+0x118>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e7b2      	b.n	8001b00 <processUartRingBuffer+0x54>
          }
          break;
       }
     }
   }
 }
 8001b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b9c:	20000c94 	.word	0x20000c94
 8001ba0:	20000c92 	.word	0x20000c92
 8001ba4:	20000c98 	.word	0x20000c98
 8001ba8:	20000d68 	.word	0x20000d68
 8001bac:	20000d1a 	.word	0x20000d1a
 8001bb0:	20000d18 	.word	0x20000d18
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	20000d1c 	.word	0x20000d1c
 8001bbc:	20000c50 	.word	0x20000c50
 8001bc0:	20000c90 	.word	0x20000c90
 8001bc4:	20000d70 	.word	0x20000d70

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b500      	push	{lr}
 8001bca:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bcc:	2230      	movs	r2, #48	@ 0x30
 8001bce:	2100      	movs	r1, #0
 8001bd0:	a808      	add	r0, sp, #32
 8001bd2:	f002 ff3e 	bl	8004a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9303      	str	r3, [sp, #12]
 8001bda:	9304      	str	r3, [sp, #16]
 8001bdc:	9305      	str	r3, [sp, #20]
 8001bde:	9306      	str	r3, [sp, #24]
 8001be0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <SystemClock_Config+0xa0>)
 8001be6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001be8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001bec:	6411      	str	r1, [r2, #64]	@ 0x40
 8001bee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bf0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001bf4:	9201      	str	r2, [sp, #4]
 8001bf6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c6c <SystemClock_Config+0xa4>)
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c1a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c24:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c26:	2304      	movs	r3, #4
 8001c28:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c2a:	22a8      	movs	r2, #168	@ 0xa8
 8001c2c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c2e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c30:	2307      	movs	r3, #7
 8001c32:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c34:	a808      	add	r0, sp, #32
 8001c36:	f001 fba3 	bl	8003380 <HAL_RCC_OscConfig>
 8001c3a:	b980      	cbnz	r0, 8001c5e <SystemClock_Config+0x96>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c40:	2102      	movs	r1, #2
 8001c42:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c4c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c50:	a803      	add	r0, sp, #12
 8001c52:	f001 fdff 	bl	8003854 <HAL_RCC_ClockConfig>
 8001c56:	b920      	cbnz	r0, 8001c62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
}
 8001c58:	b015      	add	sp, #84	@ 0x54
 8001c5a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <SystemClock_Config+0x98>
 8001c62:	b672      	cpsid	i
 8001c64:	e7fe      	b.n	8001c64 <SystemClock_Config+0x9c>
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <main>:
{
 8001c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c74:	b097      	sub	sp, #92	@ 0x5c
  HAL_Init();
 8001c76:	f000 ff29 	bl	8002acc <HAL_Init>
  SystemClock_Config();
 8001c7a:	f7ff ffa5 	bl	8001bc8 <SystemClock_Config>
  huart2.Instance = USART2;
 8001c7e:	48b4      	ldr	r0, [pc, #720]	@ (8001f50 <main+0x2e0>)
 8001c80:	4bb4      	ldr	r3, [pc, #720]	@ (8001f54 <main+0x2e4>)
 8001c82:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001c84:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001c88:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c8e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c90:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c92:	220c      	movs	r2, #12
 8001c94:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	f002 fab6 	bl	800420a <HAL_UART_Init>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	f040 809b 	bne.w	8001dda <main+0x16a>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	2026      	movs	r0, #38	@ 0x26
 8001caa:	f000 ff61 	bl	8002b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cae:	2026      	movs	r0, #38	@ 0x26
 8001cb0:	f000 ff94 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	9406      	str	r4, [sp, #24]
 8001cb8:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	9402      	str	r4, [sp, #8]
 8001cbc:	4da6      	ldr	r5, [pc, #664]	@ (8001f58 <main+0x2e8>)
 8001cbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	632b      	str	r3, [r5, #48]	@ 0x30
 8001cc6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cd0:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
 8001cd4:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;  // Interrupt on both edges
 8001cd8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001cdc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;                  // Use internal pull-up
 8001cde:	2701      	movs	r7, #1
 8001ce0:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	4e9e      	ldr	r6, [pc, #632]	@ (8001f5c <main+0x2ec>)
 8001ce4:	a903      	add	r1, sp, #12
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f001 fa4c 	bl	8003184 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cf0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8001cf2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cf6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;           // Use internal pull-up
 8001cf8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	a903      	add	r1, sp, #12
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f001 fa41 	bl	8003184 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d02:	4622      	mov	r2, r4
 8001d04:	4621      	mov	r1, r4
 8001d06:	2028      	movs	r0, #40	@ 0x28
 8001d08:	f000 ff32 	bl	8002b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d0c:	2028      	movs	r0, #40	@ 0x28
 8001d0e:	f000 ff65 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  button1State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001d12:	4641      	mov	r1, r8
 8001d14:	4630      	mov	r0, r6
 8001d16:	f001 fb1d 	bl	8003354 <HAL_GPIO_ReadPin>
 8001d1a:	4b91      	ldr	r3, [pc, #580]	@ (8001f60 <main+0x2f0>)
 8001d1c:	7018      	strb	r0, [r3, #0]
  lastButton1State = button1State;
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4a90      	ldr	r2, [pc, #576]	@ (8001f64 <main+0x2f4>)
 8001d24:	7013      	strb	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	9401      	str	r4, [sp, #4]
 8001d28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001d2a:	433b      	orrs	r3, r7
 8001d2c:	632b      	str	r3, [r5, #48]	@ 0x30
 8001d2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001d30:	403b      	ands	r3, r7
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	9413      	str	r4, [sp, #76]	@ 0x4c
 8001d38:	9414      	str	r4, [sp, #80]	@ 0x50
 8001d3a:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pin = GPIO_PIN_5;  // On-board LED (PA5)
 8001d3c:	2620      	movs	r6, #32
 8001d3e:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	9712      	str	r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f5a5 5560 	sub.w	r5, r5, #14336	@ 0x3800
 8001d46:	a911      	add	r1, sp, #68	@ 0x44
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f001 fa1b 	bl	8003184 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d4e:	463a      	mov	r2, r7
 8001d50:	4631      	mov	r1, r6
 8001d52:	4628      	mov	r0, r5
 8001d54:	f001 fb04 	bl	8003360 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001d58:	20c8      	movs	r0, #200	@ 0xc8
 8001d5a:	f000 fee3 	bl	8002b24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d5e:	4622      	mov	r2, r4
 8001d60:	4631      	mov	r1, r6
 8001d62:	4628      	mov	r0, r5
 8001d64:	f001 fafc 	bl	8003360 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001d68:	20c8      	movs	r0, #200	@ 0xc8
 8001d6a:	f000 fedb 	bl	8002b24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d6e:	463a      	mov	r2, r7
 8001d70:	4631      	mov	r1, r6
 8001d72:	4628      	mov	r0, r5
 8001d74:	f001 faf4 	bl	8003360 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001d78:	20c8      	movs	r0, #200	@ 0xc8
 8001d7a:	f000 fed3 	bl	8002b24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4631      	mov	r1, r6
 8001d82:	4628      	mov	r0, r5
 8001d84:	f001 faec 	bl	8003360 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001d88:	20c8      	movs	r0, #200	@ 0xc8
 8001d8a:	f000 fecb 	bl	8002b24 <HAL_Delay>
  LED_Cube_Init();
 8001d8e:	f7ff fbf1 	bl	8001574 <LED_Cube_Init>
  CUBE_Patterns_Init();
 8001d92:	f7fe fd53 	bl	800083c <CUBE_Patterns_Init>
 8001d96:	2603      	movs	r6, #3
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d98:	462f      	mov	r7, r5
 8001d9a:	2520      	movs	r5, #32
    HAL_Delay(100);
 8001d9c:	2464      	movs	r4, #100	@ 0x64
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4629      	mov	r1, r5
 8001da2:	4638      	mov	r0, r7
 8001da4:	f001 fadc 	bl	8003360 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001da8:	4620      	mov	r0, r4
 8001daa:	f000 febb 	bl	8002b24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	4629      	mov	r1, r5
 8001db2:	4638      	mov	r0, r7
 8001db4:	f001 fad4 	bl	8003360 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001db8:	4620      	mov	r0, r4
 8001dba:	f000 feb3 	bl	8002b24 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 8001dbe:	3e01      	subs	r6, #1
 8001dc0:	d1ed      	bne.n	8001d9e <main+0x12e>
  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4968      	ldr	r1, [pc, #416]	@ (8001f68 <main+0x2f8>)
 8001dc6:	4862      	ldr	r0, [pc, #392]	@ (8001f50 <main+0x2e0>)
 8001dc8:	f002 fccd 	bl	8004766 <HAL_UART_Receive_IT>
  uint8_t readySignal[1] = {READY_SIGNAL};
 8001dcc:	23aa      	movs	r3, #170	@ 0xaa
 8001dce:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
    if (HAL_GetTick() - lastFpsDisplay >= 2000) {
 8001dd2:	4d66      	ldr	r5, [pc, #408]	@ (8001f6c <main+0x2fc>)
      if (currentMode == MODE_ANIMATION) {
 8001dd4:	4c66      	ldr	r4, [pc, #408]	@ (8001f70 <main+0x300>)
        lastButton1State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001dd6:	4f61      	ldr	r7, [pc, #388]	@ (8001f5c <main+0x2ec>)
 8001dd8:	e060      	b.n	8001e9c <main+0x22c>
 8001dda:	b672      	cpsid	i
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <main+0x16c>
      lastFpsDisplay = HAL_GetTick();
 8001dde:	f000 fe9b 	bl	8002b18 <HAL_GetTick>
 8001de2:	6028      	str	r0, [r5, #0]
      float fps = LED_Cube_GetRefreshRate();
 8001de4:	f7ff fbc0 	bl	8001568 <LED_Cube_GetRefreshRate>
      int whole = (int)fps;
 8001de8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
      int frac = (int)((fps - whole) * 10); // Get first decimal place
 8001dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001df4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001df8:	ee20 0a07 	vmul.f32	s0, s0, s14
      sprintf(buffer, "LED Cube refresh rate: %d.%d Hz\r\n", whole, frac);
 8001dfc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8001e00:	ee17 3a10 	vmov	r3, s14
 8001e04:	ee17 2a90 	vmov	r2, s15
 8001e08:	495a      	ldr	r1, [pc, #360]	@ (8001f74 <main+0x304>)
 8001e0a:	a803      	add	r0, sp, #12
 8001e0c:	f002 fdbe 	bl	800498c <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001e10:	a803      	add	r0, sp, #12
 8001e12:	f7fe f9e5 	bl	80001e0 <strlen>
 8001e16:	2364      	movs	r3, #100	@ 0x64
 8001e18:	b282      	uxth	r2, r0
 8001e1a:	a903      	add	r1, sp, #12
 8001e1c:	484c      	ldr	r0, [pc, #304]	@ (8001f50 <main+0x2e0>)
 8001e1e:	f002 fa24 	bl	800426a <HAL_UART_Transmit>
 8001e22:	e042      	b.n	8001eaa <main+0x23a>
        CUBE_Patterns_NextPattern();
 8001e24:	f7fe fd24 	bl	8000870 <CUBE_Patterns_NextPattern>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001e28:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 8001f90 <main+0x320>
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2120      	movs	r1, #32
 8001e30:	4640      	mov	r0, r8
 8001e32:	f001 fa95 	bl	8003360 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8001e36:	2032      	movs	r0, #50	@ 0x32
 8001e38:	f000 fe74 	bl	8002b24 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2120      	movs	r1, #32
 8001e40:	4640      	mov	r0, r8
 8001e42:	f001 fa8d 	bl	8003360 <HAL_GPIO_WritePin>
    if (button1LongPressDetected) {
 8001e46:	4b4c      	ldr	r3, [pc, #304]	@ (8001f78 <main+0x308>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b12b      	cbz	r3, 8001e58 <main+0x1e8>
      button1LongPressDetected = 0;  // Clear flag
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <main+0x308>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
      if (currentMode == MODE_ANIMATION) {
 8001e52:	7823      	ldrb	r3, [r4, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d057      	beq.n	8001f08 <main+0x298>
    if (button2Pressed) {
 8001e58:	4b48      	ldr	r3, [pc, #288]	@ (8001f7c <main+0x30c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b15b      	cbz	r3, 8001e76 <main+0x206>
      button2Pressed = 0;  // Clear flag
 8001e5e:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <main+0x30c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
      if (currentMode == MODE_ANIMATION) {
 8001e64:	7823      	ldrb	r3, [r4, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8094 	beq.w	8001f94 <main+0x324>
      else if (currentMode == MODE_STL) {
 8001e6c:	7823      	ldrb	r3, [r4, #0]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f000 80cf 	beq.w	8002014 <main+0x3a4>
    processUartRingBuffer();
 8001e76:	f7ff fe19 	bl	8001aac <processUartRingBuffer>
    uint32_t currentTime = HAL_GetTick();
 8001e7a:	f000 fe4d 	bl	8002b18 <HAL_GetTick>
 8001e7e:	4680      	mov	r8, r0
    if (currentMode == MODE_ANIMATION) {
 8001e80:	7823      	ldrb	r3, [r4, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80fb 	beq.w	800207e <main+0x40e>
    else if (currentMode == MODE_STL) {
 8001e88:	7823      	ldrb	r3, [r4, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	f000 80fb 	beq.w	8002088 <main+0x418>
    if (blinkLedFlag) {
 8001e92:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <main+0x310>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 810a 	bne.w	80020b0 <main+0x440>
    if (HAL_GetTick() - lastFpsDisplay >= 2000) {
 8001e9c:	f000 fe3c 	bl	8002b18 <HAL_GetTick>
 8001ea0:	682b      	ldr	r3, [r5, #0]
 8001ea2:	1ac0      	subs	r0, r0, r3
 8001ea4:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8001ea8:	d299      	bcs.n	8001dde <main+0x16e>
    if (button1Pressed) {
 8001eaa:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <main+0x314>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0c9      	beq.n	8001e46 <main+0x1d6>
      button1Pressed = 0;  // Clear flag
 8001eb2:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <main+0x314>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
      if (currentMode == MODE_ANIMATION) {
 8001eb8:	7823      	ldrb	r3, [r4, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0b2      	beq.n	8001e24 <main+0x1b4>
      else if (currentMode == MODE_STL) {
 8001ebe:	7823      	ldrb	r3, [r4, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d1bf      	bne.n	8001e46 <main+0x1d6>
        currentRotation = (currentRotation + 1) % ROTATION_COUNT;
 8001ec6:	4930      	ldr	r1, [pc, #192]	@ (8001f88 <main+0x318>)
 8001ec8:	780b      	ldrb	r3, [r1, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f8c <main+0x31c>)
 8001ece:	fb82 0203 	smull	r0, r2, r2, r3
 8001ed2:	f002 00fc 	and.w	r0, r2, #252	@ 0xfc
 8001ed6:	eb00 02a2 	add.w	r2, r0, r2, asr #2
 8001eda:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	700b      	strb	r3, [r1, #0]
        rotateAndUpdateSTL(currentRotation);
 8001ee2:	7808      	ldrb	r0, [r1, #0]
 8001ee4:	f7ff fcea 	bl	80018bc <rotateAndUpdateSTL>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001ee8:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8001f90 <main+0x320>
 8001eec:	2201      	movs	r2, #1
 8001eee:	2120      	movs	r1, #32
 8001ef0:	4640      	mov	r0, r8
 8001ef2:	f001 fa35 	bl	8003360 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8001ef6:	2032      	movs	r0, #50	@ 0x32
 8001ef8:	f000 fe14 	bl	8002b24 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2120      	movs	r1, #32
 8001f00:	4640      	mov	r0, r8
 8001f02:	f001 fa2d 	bl	8003360 <HAL_GPIO_WritePin>
 8001f06:	e79e      	b.n	8001e46 <main+0x1d6>
        uint8_t newMode = (CUBE_Patterns_GetMode() == PATTERN_STATIC) ? 
 8001f08:	f7fe fb48 	bl	800059c <CUBE_Patterns_GetMode>
        CUBE_Patterns_SetMode(newMode);
 8001f0c:	fab0 f080 	clz	r0, r0
 8001f10:	0940      	lsrs	r0, r0, #5
 8001f12:	f7fe fb35 	bl	8000580 <CUBE_Patterns_SetMode>
 8001f16:	f04f 0803 	mov.w	r8, #3
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001f1a:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8001f90 <main+0x320>
 8001f1e:	f04f 0a20 	mov.w	sl, #32
          HAL_Delay(50);
 8001f22:	f04f 0932 	mov.w	r9, #50	@ 0x32
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	4651      	mov	r1, sl
 8001f2a:	4658      	mov	r0, fp
 8001f2c:	f001 fa18 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(50);
 8001f30:	4648      	mov	r0, r9
 8001f32:	f000 fdf7 	bl	8002b24 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	4651      	mov	r1, sl
 8001f3a:	4658      	mov	r0, fp
 8001f3c:	f001 fa10 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(50);
 8001f40:	4648      	mov	r0, r9
 8001f42:	f000 fdef 	bl	8002b24 <HAL_Delay>
        for (int i = 0; i < 3; i++) {
 8001f46:	f1b8 0801 	subs.w	r8, r8, #1
 8001f4a:	d1ec      	bne.n	8001f26 <main+0x2b6>
 8001f4c:	e784      	b.n	8001e58 <main+0x1e8>
 8001f4e:	bf00      	nop
 8001f50:	20000d74 	.word	0x20000d74
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	2000001d 	.word	0x2000001d
 8001f64:	2000001c 	.word	0x2000001c
 8001f68:	20000d5c 	.word	0x20000d5c
 8001f6c:	20000c4c 	.word	0x20000c4c
 8001f70:	20000d68 	.word	0x20000d68
 8001f74:	08006694 	.word	0x08006694
 8001f78:	20000d69 	.word	0x20000d69
 8001f7c:	20000d71 	.word	0x20000d71
 8001f80:	20000d70 	.word	0x20000d70
 8001f84:	20000d72 	.word	0x20000d72
 8001f88:	20000c90 	.word	0x20000c90
 8001f8c:	66666667 	.word	0x66666667
 8001f90:	40020000 	.word	0x40020000
        currentMode = MODE_STL;
 8001f94:	f04f 0a01 	mov.w	sl, #1
 8001f98:	f884 a000 	strb.w	sl, [r4]
        LED_Cube_Clear();
 8001f9c:	f7ff fb0c 	bl	80015b8 <LED_Cube_Clear>
        lastButton1State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa4:	4638      	mov	r0, r7
 8001fa6:	f001 f9d5 	bl	8003354 <HAL_GPIO_ReadPin>
 8001faa:	4b4c      	ldr	r3, [pc, #304]	@ (80020dc <main+0x46c>)
 8001fac:	7018      	strb	r0, [r3, #0]
        button1State = lastButton1State;
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4a4b      	ldr	r2, [pc, #300]	@ (80020e0 <main+0x470>)
 8001fb4:	7013      	strb	r3, [r2, #0]
        button1LongPressDetected = 0;
 8001fb6:	f04f 0900 	mov.w	r9, #0
 8001fba:	4b4a      	ldr	r3, [pc, #296]	@ (80020e4 <main+0x474>)
 8001fbc:	f883 9000 	strb.w	r9, [r3]
        button1Pressed = 0;
 8001fc0:	4b49      	ldr	r3, [pc, #292]	@ (80020e8 <main+0x478>)
 8001fc2:	f883 9000 	strb.w	r9, [r3]
        lastButton1Press = HAL_GetTick();
 8001fc6:	f000 fda7 	bl	8002b18 <HAL_GetTick>
 8001fca:	4b48      	ldr	r3, [pc, #288]	@ (80020ec <main+0x47c>)
 8001fcc:	6018      	str	r0, [r3, #0]
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001fce:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80020f4 <main+0x484>
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	f001 f9c2 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8001fdc:	2064      	movs	r0, #100	@ 0x64
 8001fde:	f000 fda1 	bl	8002b24 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fe2:	464a      	mov	r2, r9
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	f001 f9ba 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8001fec:	2064      	movs	r0, #100	@ 0x64
 8001fee:	f000 fd99 	bl	8002b24 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	4640      	mov	r0, r8
 8001ff8:	f001 f9b2 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8001ffc:	2064      	movs	r0, #100	@ 0x64
 8001ffe:	f000 fd91 	bl	8002b24 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002002:	464a      	mov	r2, r9
 8002004:	2120      	movs	r1, #32
 8002006:	4640      	mov	r0, r8
 8002008:	f001 f9aa 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 800200c:	2064      	movs	r0, #100	@ 0x64
 800200e:	f000 fd89 	bl	8002b24 <HAL_Delay>
        for (int i = 0; i < 2; i++) {
 8002012:	e730      	b.n	8001e76 <main+0x206>
        currentMode = MODE_ANIMATION;
 8002014:	f04f 0800 	mov.w	r8, #0
 8002018:	f884 8000 	strb.w	r8, [r4]
        lastButton1State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800201c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002020:	4638      	mov	r0, r7
 8002022:	f001 f997 	bl	8003354 <HAL_GPIO_ReadPin>
 8002026:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <main+0x46c>)
 8002028:	7018      	strb	r0, [r3, #0]
        button1State = lastButton1State;
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4a2c      	ldr	r2, [pc, #176]	@ (80020e0 <main+0x470>)
 8002030:	7013      	strb	r3, [r2, #0]
        button1LongPressDetected = 0;
 8002032:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <main+0x474>)
 8002034:	f883 8000 	strb.w	r8, [r3]
        button1Pressed = 0; 
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <main+0x478>)
 800203a:	f883 8000 	strb.w	r8, [r3]
        lastButton1Press = HAL_GetTick();
 800203e:	f000 fd6b 	bl	8002b18 <HAL_GetTick>
 8002042:	4b2a      	ldr	r3, [pc, #168]	@ (80020ec <main+0x47c>)
 8002044:	6018      	str	r0, [r3, #0]
 8002046:	f04f 0803 	mov.w	r8, #3
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800204a:	f8df b0a8 	ldr.w	fp, [pc, #168]	@ 80020f4 <main+0x484>
 800204e:	f04f 0a20 	mov.w	sl, #32
          HAL_Delay(100);
 8002052:	f04f 0964 	mov.w	r9, #100	@ 0x64
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	4651      	mov	r1, sl
 800205a:	4658      	mov	r0, fp
 800205c:	f001 f980 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8002060:	4648      	mov	r0, r9
 8002062:	f000 fd5f 	bl	8002b24 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	4651      	mov	r1, sl
 800206a:	4658      	mov	r0, fp
 800206c:	f001 f978 	bl	8003360 <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8002070:	4648      	mov	r0, r9
 8002072:	f000 fd57 	bl	8002b24 <HAL_Delay>
        for (int i = 0; i < 3; i++) {
 8002076:	f1b8 0801 	subs.w	r8, r8, #1
 800207a:	d1ec      	bne.n	8002056 <main+0x3e6>
 800207c:	e6fb      	b.n	8001e76 <main+0x206>
        CUBE_Patterns_ProcessAnimation();
 800207e:	f7ff fa27 	bl	80014d0 <CUBE_Patterns_ProcessAnimation>
        LED_Cube_Process();  // Always process the cube display
 8002082:	f7ff fad3 	bl	800162c <LED_Cube_Process>
 8002086:	e704      	b.n	8001e92 <main+0x222>
        LED_Cube_Process();
 8002088:	f7ff fad0 	bl	800162c <LED_Cube_Process>
        if (currentTime - lastReadySignalTime >= 500) {
 800208c:	eba8 0306 	sub.w	r3, r8, r6
 8002090:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002094:	f4ff aefd 	bcc.w	8001e92 <main+0x222>
            HAL_UART_Transmit(&huart2, readySignal, 1, 100);
 8002098:	2364      	movs	r3, #100	@ 0x64
 800209a:	2201      	movs	r2, #1
 800209c:	a910      	add	r1, sp, #64	@ 0x40
 800209e:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <main+0x480>)
 80020a0:	f002 f8e3 	bl	800426a <HAL_UART_Transmit>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020a4:	2120      	movs	r1, #32
 80020a6:	4813      	ldr	r0, [pc, #76]	@ (80020f4 <main+0x484>)
 80020a8:	f001 f960 	bl	800336c <HAL_GPIO_TogglePin>
            lastReadySignalTime = currentTime;
 80020ac:	4646      	mov	r6, r8
 80020ae:	e6f0      	b.n	8001e92 <main+0x222>
        blinkLedFlag = 0;
 80020b0:	f04f 0900 	mov.w	r9, #0
 80020b4:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <main+0x488>)
 80020b6:	f883 9000 	strb.w	r9, [r3]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80020ba:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 80020f4 <main+0x484>
 80020be:	2201      	movs	r2, #1
 80020c0:	2120      	movs	r1, #32
 80020c2:	4640      	mov	r0, r8
 80020c4:	f001 f94c 	bl	8003360 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fd2b 	bl	8002b24 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80020ce:	464a      	mov	r2, r9
 80020d0:	2120      	movs	r1, #32
 80020d2:	4640      	mov	r0, r8
 80020d4:	f001 f944 	bl	8003360 <HAL_GPIO_WritePin>
 80020d8:	e6e0      	b.n	8001e9c <main+0x22c>
 80020da:	bf00      	nop
 80020dc:	2000001c 	.word	0x2000001c
 80020e0:	2000001d 	.word	0x2000001d
 80020e4:	20000d69 	.word	0x20000d69
 80020e8:	20000d72 	.word	0x20000d72
 80020ec:	20000d64 	.word	0x20000d64
 80020f0:	20000d74 	.word	0x20000d74
 80020f4:	40020000 	.word	0x40020000
 80020f8:	20000d70 	.word	0x20000d70

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
 void HAL_MspInit(void)
 {
 80020fc:	b508      	push	{r3, lr}
 
   /* USER CODE BEGIN MspInit 0 */
 
   /* USER CODE END MspInit 0 */
   
   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fe:	2003      	movs	r0, #3
 8002100:	f000 fd24 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>
 
   /* System interrupt init*/
   /* MemoryManagement_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	4611      	mov	r1, r2
 8002108:	f06f 000b 	mvn.w	r0, #11
 800210c:	f000 fd30 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* BusFault_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	4611      	mov	r1, r2
 8002114:	f06f 000a 	mvn.w	r0, #10
 8002118:	f000 fd2a 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* UsageFault_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	4611      	mov	r1, r2
 8002120:	f06f 0009 	mvn.w	r0, #9
 8002124:	f000 fd24 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* SVCall_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	4611      	mov	r1, r2
 800212c:	f06f 0004 	mvn.w	r0, #4
 8002130:	f000 fd1e 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* DebugMonitor_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	4611      	mov	r1, r2
 8002138:	f06f 0003 	mvn.w	r0, #3
 800213c:	f000 fd18 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* PendSV_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	4611      	mov	r1, r2
 8002144:	f06f 0001 	mvn.w	r0, #1
 8002148:	f000 fd12 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* SysTick_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	4611      	mov	r1, r2
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 fd0c 	bl	8002b70 <HAL_NVIC_SetPriority>
   /* System interrupt init*/
 
   /* USER CODE BEGIN MspInit 1 */
 
   /* USER CODE END MspInit 1 */
 }
 8002158:	bd08      	pop	{r3, pc}
	...

0800215c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800215c:	b500      	push	{lr}
 800215e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	2300      	movs	r3, #0
 8002162:	9303      	str	r3, [sp, #12]
 8002164:	9304      	str	r3, [sp, #16]
 8002166:	9305      	str	r3, [sp, #20]
 8002168:	9306      	str	r3, [sp, #24]
 800216a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800216c:	6802      	ldr	r2, [r0, #0]
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_UART_MspInit+0x64>)
 8002170:	429a      	cmp	r2, r3
 8002172:	d002      	beq.n	800217a <HAL_UART_MspInit+0x1e>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002174:	b009      	add	sp, #36	@ 0x24
 8002176:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800217a:	2100      	movs	r1, #0
 800217c:	9101      	str	r1, [sp, #4]
 800217e:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8002182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002184:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
 800218a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800218c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002190:	9201      	str	r2, [sp, #4]
 8002192:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	9102      	str	r1, [sp, #8]
 8002196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	631a      	str	r2, [r3, #48]	@ 0x30
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021a8:	230c      	movs	r3, #12
 80021aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b0:	2307      	movs	r3, #7
 80021b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	a903      	add	r1, sp, #12
 80021b6:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <HAL_UART_MspInit+0x68>)
 80021b8:	f000 ffe4 	bl	8003184 <HAL_GPIO_Init>
}
 80021bc:	e7da      	b.n	8002174 <HAL_UART_MspInit+0x18>
 80021be:	bf00      	nop
 80021c0:	40004400 	.word	0x40004400
 80021c4:	40020000 	.word	0x40020000

080021c8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021c8:	4770      	bx	lr

080021ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler>

080021cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler>

080021ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler>

080021d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler>

080021d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	4770      	bx	lr

080021d4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d4:	4770      	bx	lr

080021d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021da:	f000 fc91 	bl	8002b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021de:	bd08      	pop	{r3, pc}

080021e0 <USART2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021e2:	4802      	ldr	r0, [pc, #8]	@ (80021ec <USART2_IRQHandler+0xc>)
 80021e4:	f002 f928 	bl	8004438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021e8:	bd08      	pop	{r3, pc}
 80021ea:	bf00      	nop
 80021ec:	20000d74 	.word	0x20000d74

080021f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts (for buttons).
  */
void EXTI15_10_IRQHandler(void)
{
 80021f0:	b510      	push	{r4, lr}
  uint32_t currentTime = HAL_GetTick();
 80021f2:	f000 fc91 	bl	8002b18 <HAL_GetTick>
 80021f6:	4604      	mov	r4, r0
  
  /* PC13 - Button 1 (with long press detection) */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <EXTI15_10_IRQHandler+0xa8>)
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002200:	d113      	bne.n	800222a <EXTI15_10_IRQHandler+0x3a>
    
    lastButton1State = button1State;
  }
  
  /* PC10 - Button 2 (Animation button) - No changes to this logic */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)
 8002202:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <EXTI15_10_IRQHandler+0xa8>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800220a:	d00d      	beq.n	8002228 <EXTI15_10_IRQHandler+0x38>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <EXTI15_10_IRQHandler+0xa8>)
 800220e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002212:	615a      	str	r2, [r3, #20]
    
    // Debounce check
    if (currentTime - lastButton2Press > DEBOUNCE_TIME*2)
 8002214:	4b21      	ldr	r3, [pc, #132]	@ (800229c <EXTI15_10_IRQHandler+0xac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1ae3      	subs	r3, r4, r3
 800221a:	2b96      	cmp	r3, #150	@ 0x96
 800221c:	d904      	bls.n	8002228 <EXTI15_10_IRQHandler+0x38>
    {
      lastButton2Press = currentTime;
 800221e:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <EXTI15_10_IRQHandler+0xac>)
 8002220:	601c      	str	r4, [r3, #0]
      
      // Set flag to be processed in main loop
      button2Pressed = 1;
 8002222:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <EXTI15_10_IRQHandler+0xb0>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
      
      // Simple feedback (non-blocking)
      // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }
  }
}
 8002228:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800222a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <EXTI15_10_IRQHandler+0xa8>)
 8002230:	6159      	str	r1, [r3, #20]
    button1State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8002232:	481c      	ldr	r0, [pc, #112]	@ (80022a4 <EXTI15_10_IRQHandler+0xb4>)
 8002234:	f001 f88e 	bl	8003354 <HAL_GPIO_ReadPin>
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <EXTI15_10_IRQHandler+0xb8>)
 800223a:	7018      	strb	r0, [r3, #0]
    if (currentTime - lastButton1Press > DEBOUNCE_TIME)
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <EXTI15_10_IRQHandler+0xbc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1ae3      	subs	r3, r4, r3
 8002242:	2b4b      	cmp	r3, #75	@ 0x4b
 8002244:	d90c      	bls.n	8002260 <EXTI15_10_IRQHandler+0x70>
      if (button1State == GPIO_PIN_RESET && lastButton1State == GPIO_PIN_SET)
 8002246:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <EXTI15_10_IRQHandler+0xb8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b923      	cbnz	r3, 8002256 <EXTI15_10_IRQHandler+0x66>
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <EXTI15_10_IRQHandler+0xc0>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d00a      	beq.n	800226c <EXTI15_10_IRQHandler+0x7c>
      else if (button1State == GPIO_PIN_SET && lastButton1State == GPIO_PIN_RESET)
 8002256:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <EXTI15_10_IRQHandler+0xb8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d00a      	beq.n	8002276 <EXTI15_10_IRQHandler+0x86>
    lastButton1State = button1State;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <EXTI15_10_IRQHandler+0xb8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <EXTI15_10_IRQHandler+0xc0>)
 8002268:	7013      	strb	r3, [r2, #0]
 800226a:	e7ca      	b.n	8002202 <EXTI15_10_IRQHandler+0x12>
        button1PressStartTime = currentTime;
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <EXTI15_10_IRQHandler+0xc4>)
 800226e:	601c      	str	r4, [r3, #0]
        lastButton1Press = currentTime;
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <EXTI15_10_IRQHandler+0xbc>)
 8002272:	601c      	str	r4, [r3, #0]
 8002274:	e7f4      	b.n	8002260 <EXTI15_10_IRQHandler+0x70>
      else if (button1State == GPIO_PIN_SET && lastButton1State == GPIO_PIN_RESET)
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <EXTI15_10_IRQHandler+0xc0>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <EXTI15_10_IRQHandler+0x70>
        uint32_t pressDuration = currentTime - button1PressStartTime;
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <EXTI15_10_IRQHandler+0xc4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1ae3      	subs	r3, r4, r3
        if (pressDuration >= BUTTON_LONG_PRESS_TIME)
 8002284:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
          button1LongPressDetected = 1;
 8002288:	bf2c      	ite	cs
 800228a:	4b0b      	ldrcs	r3, [pc, #44]	@ (80022b8 <EXTI15_10_IRQHandler+0xc8>)
          button1Pressed = 1;
 800228c:	4b0b      	ldrcc	r3, [pc, #44]	@ (80022bc <EXTI15_10_IRQHandler+0xcc>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
        lastButton1Press = currentTime;
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <EXTI15_10_IRQHandler+0xbc>)
 8002294:	601c      	str	r4, [r3, #0]
 8002296:	e7e3      	b.n	8002260 <EXTI15_10_IRQHandler+0x70>
 8002298:	40013c00 	.word	0x40013c00
 800229c:	20000d60 	.word	0x20000d60
 80022a0:	20000d71 	.word	0x20000d71
 80022a4:	40020800 	.word	0x40020800
 80022a8:	2000001d 	.word	0x2000001d
 80022ac:	20000d64 	.word	0x20000d64
 80022b0:	2000001c 	.word	0x2000001c
 80022b4:	20000d6c 	.word	0x20000d6c
 80022b8:	20000d69 	.word	0x20000d69
 80022bc:	20000d72 	.word	0x20000d72

080022c0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80022c0:	2001      	movs	r0, #1
 80022c2:	4770      	bx	lr

080022c4 <_kill>:

int _kill(int pid, int sig)
{
 80022c4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022c6:	f002 fc13 	bl	8004af0 <__errno>
 80022ca:	2316      	movs	r3, #22
 80022cc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80022ce:	f04f 30ff 	mov.w	r0, #4294967295
 80022d2:	bd08      	pop	{r3, pc}

080022d4 <_exit>:

void _exit (int status)
{
 80022d4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80022d6:	f002 fc0b 	bl	8004af0 <__errno>
 80022da:	2316      	movs	r3, #22
 80022dc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80022de:	e7fe      	b.n	80022de <_exit+0xa>

080022e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	1e16      	subs	r6, r2, #0
 80022e4:	dd07      	ble.n	80022f6 <_read+0x16>
 80022e6:	460c      	mov	r4, r1
 80022e8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80022ea:	f3af 8000 	nop.w
 80022ee:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	42a5      	cmp	r5, r4
 80022f4:	d1f9      	bne.n	80022ea <_read+0xa>
  }

  return len;
}
 80022f6:	4630      	mov	r0, r6
 80022f8:	bd70      	pop	{r4, r5, r6, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	1e16      	subs	r6, r2, #0
 80022fe:	dd07      	ble.n	8002310 <_write+0x16>
 8002300:	460c      	mov	r4, r1
 8002302:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002304:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002308:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	42a5      	cmp	r5, r4
 800230e:	d1f9      	bne.n	8002304 <_write+0xa>
  }
  return len;
}
 8002310:	4630      	mov	r0, r6
 8002312:	bd70      	pop	{r4, r5, r6, pc}

08002314 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800231a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002320:	2000      	movs	r0, #0
 8002322:	4770      	bx	lr

08002324 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002324:	2001      	movs	r0, #1
 8002326:	4770      	bx	lr

08002328 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002328:	2000      	movs	r0, #0
 800232a:	4770      	bx	lr

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b508      	push	{r3, lr}
 800232e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <_sbrk+0x38>)
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	b152      	cbz	r2, 800234c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4a0b      	ldr	r2, [pc, #44]	@ (8002364 <_sbrk+0x38>)
 8002338:	6810      	ldr	r0, [r2, #0]
 800233a:	4403      	add	r3, r0
 800233c:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <_sbrk+0x3c>)
 800233e:	490b      	ldr	r1, [pc, #44]	@ (800236c <_sbrk+0x40>)
 8002340:	1a52      	subs	r2, r2, r1
 8002342:	4293      	cmp	r3, r2
 8002344:	d806      	bhi.n	8002354 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002346:	4a07      	ldr	r2, [pc, #28]	@ (8002364 <_sbrk+0x38>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800234a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800234c:	4a05      	ldr	r2, [pc, #20]	@ (8002364 <_sbrk+0x38>)
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <_sbrk+0x44>)
 8002350:	6011      	str	r1, [r2, #0]
 8002352:	e7f0      	b.n	8002336 <_sbrk+0xa>
    errno = ENOMEM;
 8002354:	f002 fbcc 	bl	8004af0 <__errno>
 8002358:	230c      	movs	r3, #12
 800235a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	e7f3      	b.n	800234a <_sbrk+0x1e>
 8002362:	bf00      	nop
 8002364:	20000dbc 	.word	0x20000dbc
 8002368:	20018000 	.word	0x20018000
 800236c:	00000400 	.word	0x00000400
 8002370:	200011a8 	.word	0x200011a8

08002374 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	4a03      	ldr	r2, [pc, #12]	@ (8002384 <SystemInit+0x10>)
 8002376:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800237a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800237e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <DMA_TransferError>:
	__HAL_TIM_ENABLE(&TIM1_handle);
}


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8002388:	b082      	sub	sp, #8
	volatile int i = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
	i++;
 800238e:	9b01      	ldr	r3, [sp, #4]
 8002390:	3301      	adds	r3, #1
 8002392:	9301      	str	r3, [sp, #4]
}
 8002394:	b002      	add	sp, #8
 8002396:	4770      	bx	lr

08002398 <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8002398:	b470      	push	{r4, r5, r6}

	// Apply gamma
	red = gammaTable[red];
 800239a:	4e2e      	ldr	r6, [pc, #184]	@ (8002454 <ws2812b_set_pixel+0xbc>)
	green = gammaTable[green];
	blue = gammaTable[blue];


	uint32_t calcCol = (column*24);
	uint32_t invRed = ~red;
 800239c:	5cb4      	ldrb	r4, [r6, r2]
 800239e:	43e4      	mvns	r4, r4
	uint32_t invGreen = ~green;
 80023a0:	5cf5      	ldrb	r5, [r6, r3]
 80023a2:	43ed      	mvns	r5, r5
	uint32_t invBlue = ~blue;
 80023a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80023a8:	5cf2      	ldrb	r2, [r6, r3]
 80023aa:	43d2      	mvns	r2, r2
	uint32_t calcCol = (column*24);
 80023ac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 80023b0:	4929      	ldr	r1, [pc, #164]	@ (8002458 <ws2812b_set_pixel+0xc0>)
 80023b2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80023b6:	f101 4161 	add.w	r1, r1, #3774873600	@ 0xe1000000
 80023ba:	f501 1180 	add.w	r1, r1, #1048576	@ 0x100000
 80023be:	014e      	lsls	r6, r1, #5
 80023c0:	0083      	lsls	r3, r0, #2
 80023c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5

	*bitBand =  (invGreen >> 7);
 80023c6:	09e9      	lsrs	r1, r5, #7
 80023c8:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
	bitBand+=16;

	*bitBand = (invGreen >> 6);
 80023cc:	09a9      	lsrs	r1, r5, #6
 80023ce:	6419      	str	r1, [r3, #64]	@ 0x40
	bitBand+=16;

	*bitBand = (invGreen >> 5);
 80023d0:	0969      	lsrs	r1, r5, #5
 80023d2:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
	bitBand+=16;

	*bitBand = (invGreen >> 4);
 80023d6:	0929      	lsrs	r1, r5, #4
 80023d8:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
	bitBand+=16;

	*bitBand = (invGreen >> 3);
 80023dc:	08e9      	lsrs	r1, r5, #3
 80023de:	f8c3 1100 	str.w	r1, [r3, #256]	@ 0x100
	bitBand+=16;

	*bitBand = (invGreen >> 2);
 80023e2:	08a9      	lsrs	r1, r5, #2
 80023e4:	f8c3 1140 	str.w	r1, [r3, #320]	@ 0x140
	bitBand+=16;

	*bitBand = (invGreen >> 1);
 80023e8:	0869      	lsrs	r1, r5, #1
 80023ea:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
	bitBand+=16;

	*bitBand = (invGreen >> 0);
 80023ee:	f8c3 51c0 	str.w	r5, [r3, #448]	@ 0x1c0
	bitBand+=16;

	// RED
	*bitBand =  (invRed >> 7);
 80023f2:	09e1      	lsrs	r1, r4, #7
 80023f4:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
	bitBand+=16;

	*bitBand = (invRed >> 6);
 80023f8:	09a1      	lsrs	r1, r4, #6
 80023fa:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
	bitBand+=16;

	*bitBand = (invRed >> 5);
 80023fe:	0961      	lsrs	r1, r4, #5
 8002400:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
	bitBand+=16;

	*bitBand = (invRed >> 4);
 8002404:	0921      	lsrs	r1, r4, #4
 8002406:	f8c3 12c0 	str.w	r1, [r3, #704]	@ 0x2c0
	bitBand+=16;

	*bitBand = (invRed >> 3);
 800240a:	08e1      	lsrs	r1, r4, #3
 800240c:	f8c3 1300 	str.w	r1, [r3, #768]	@ 0x300
	bitBand+=16;

	*bitBand = (invRed >> 2);
 8002410:	08a1      	lsrs	r1, r4, #2
 8002412:	f8c3 1340 	str.w	r1, [r3, #832]	@ 0x340
	bitBand+=16;

	*bitBand = (invRed >> 1);
 8002416:	0861      	lsrs	r1, r4, #1
 8002418:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
	bitBand+=16;

	*bitBand = (invRed >> 0);
 800241c:	f8c3 43c0 	str.w	r4, [r3, #960]	@ 0x3c0
	bitBand+=16;

	// BLUE
	*bitBand =  (invBlue >> 7);
 8002420:	09d1      	lsrs	r1, r2, #7
 8002422:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
	bitBand+=16;

	*bitBand = (invBlue >> 6);
 8002426:	0991      	lsrs	r1, r2, #6
 8002428:	f8c3 1440 	str.w	r1, [r3, #1088]	@ 0x440
	bitBand+=16;

	*bitBand = (invBlue >> 5);
 800242c:	0951      	lsrs	r1, r2, #5
 800242e:	f8c3 1480 	str.w	r1, [r3, #1152]	@ 0x480
	bitBand+=16;

	*bitBand = (invBlue >> 4);
 8002432:	0911      	lsrs	r1, r2, #4
 8002434:	f8c3 14c0 	str.w	r1, [r3, #1216]	@ 0x4c0
	bitBand+=16;

	*bitBand = (invBlue >> 3);
 8002438:	08d1      	lsrs	r1, r2, #3
 800243a:	f8c3 1500 	str.w	r1, [r3, #1280]	@ 0x500
	bitBand+=16;

	*bitBand = (invBlue >> 2);
 800243e:	0891      	lsrs	r1, r2, #2
 8002440:	f8c3 1540 	str.w	r1, [r3, #1344]	@ 0x540
	bitBand+=16;

	*bitBand = (invBlue >> 1);
 8002444:	0851      	lsrs	r1, r2, #1
 8002446:	f8c3 1580 	str.w	r1, [r3, #1408]	@ 0x580
	bitBand+=16;

	*bitBand = (invBlue >> 0);
 800244a:	f8c3 25c0 	str.w	r2, [r3, #1472]	@ 0x5c0
	bitBand+=16;

#endif
}
 800244e:	bc70      	pop	{r4, r5, r6}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	080066d0 	.word	0x080066d0
 8002458:	20000f68 	.word	0x20000f68

0800245c <loadNextFramebufferData>:
{
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	b082      	sub	sp, #8
	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002460:	6805      	ldr	r5, [r0, #0]
 8002462:	6884      	ldr	r4, [r0, #8]
 8002464:	1c63      	adds	r3, r4, #1
 8002466:	6083      	str	r3, [r0, #8]
 8002468:	5d2a      	ldrb	r2, [r5, r4]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800246a:	1ca6      	adds	r6, r4, #2
 800246c:	6086      	str	r6, [r0, #8]
 800246e:	5ceb      	ldrb	r3, [r5, r3]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002470:	3403      	adds	r4, #3
 8002472:	6084      	str	r4, [r0, #8]
 8002474:	5dad      	ldrb	r5, [r5, r6]
	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8002476:	6846      	ldr	r6, [r0, #4]
		bItem->frameBufferCounter = 0;
 8002478:	42b4      	cmp	r4, r6
 800247a:	bf08      	it	eq
 800247c:	2400      	moveq	r4, #0
 800247e:	6084      	str	r4, [r0, #8]
	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002480:	9500      	str	r5, [sp, #0]
 8002482:	b289      	uxth	r1, r1
 8002484:	7b00      	ldrb	r0, [r0, #12]
 8002486:	f7ff ff87 	bl	8002398 <ws2812b_set_pixel>
}
 800248a:	b002      	add	sp, #8
 800248c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002490 <DMA_TransferCompleteHandler>:
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <DMA_TransferCompleteHandler+0xb0>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	2b40      	cmp	r3, #64	@ 0x40
 8002498:	d012      	beq.n	80024c0 <DMA_TransferCompleteHandler+0x30>
{
 800249a:	b570      	push	{r4, r5, r6, lr}
 800249c:	4c28      	ldr	r4, [pc, #160]	@ (8002540 <DMA_TransferCompleteHandler+0xb0>)
 800249e:	f104 0680 	add.w	r6, r4, #128	@ 0x80
			loadNextFramebufferData(&ws2812b.item[i], 1);
 80024a2:	2501      	movs	r5, #1
 80024a4:	4629      	mov	r1, r5
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ffd8 	bl	800245c <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80024ac:	3410      	adds	r4, #16
 80024ae:	42b4      	cmp	r4, r6
 80024b0:	d1f8      	bne.n	80024a4 <DMA_TransferCompleteHandler+0x14>
		ws2812b.repeatCounter++;
 80024b2:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <DMA_TransferCompleteHandler+0xb0>)
 80024b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80024b8:	3301      	adds	r3, #1
 80024ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80024be:	bd70      	pop	{r4, r5, r6, pc}
		ws2812b.repeatCounter = 0;
 80024c0:	2000      	movs	r0, #0
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <DMA_TransferCompleteHandler+0xb0>)
 80024c4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
		TIM1->CR1 &= ~TIM_CR1_CEN;
 80024c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002544 <DMA_TransferCompleteHandler+0xb4>)
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]
		__HAL_DMA_DISABLE(&dmaUpdate);
 80024d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <DMA_TransferCompleteHandler+0xb8>)
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	680b      	ldr	r3, [r1, #0]
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <DMA_TransferCompleteHandler+0xbc>)
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	680b      	ldr	r3, [r1, #0]
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 80024ea:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <DMA_TransferCompleteHandler+0xc0>)
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	680b      	ldr	r3, [r1, #0]
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	600b      	str	r3, [r1, #0]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80024f6:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <DMA_TransferCompleteHandler+0xc4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8002500:	60d9      	str	r1, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002502:	68d9      	ldr	r1, [r3, #12]
 8002504:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8002508:	60d9      	str	r1, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 800250a:	68d9      	ldr	r1, [r3, #12]
 800250c:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002510:	60d9      	str	r1, [r3, #12]
		TIM1->ARR = timer_reset_pulse_period;
 8002512:	4911      	ldr	r1, [pc, #68]	@ (8002558 <DMA_TransferCompleteHandler+0xc8>)
 8002514:	6809      	ldr	r1, [r1, #0]
 8002516:	62d1      	str	r1, [r2, #44]	@ 0x2c
		TIM1->CNT = 0;
 8002518:	6250      	str	r0, [r2, #36]	@ 0x24
		TIM1->EGR = TIM_EGR_UG;
 800251a:	2101      	movs	r1, #1
 800251c:	6151      	str	r1, [r2, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800251e:	f06f 0101 	mvn.w	r1, #1
 8002522:	6119      	str	r1, [r3, #16]
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	f041 0101 	orr.w	r1, r1, #1
 800252a:	60d9      	str	r1, [r3, #12]
		TIM1->CR1 |= TIM_CR1_CEN;
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <DMA_TransferCompleteHandler+0xcc>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <DMA_TransferCompleteHandler+0xd0>)
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000fc8 	.word	0x20000fc8
 8002544:	40010000 	.word	0x40010000
 8002548:	20000e80 	.word	0x20000e80
 800254c:	20000e20 	.word	0x20000e20
 8002550:	20000dc0 	.word	0x20000dc0
 8002554:	20000f20 	.word	0x20000f20
 8002558:	20000ee0 	.word	0x20000ee0
 800255c:	20000024 	.word	0x20000024
 8002560:	40020800 	.word	0x40020800

08002564 <DMA_TransferHalfHandler>:
{
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	b082      	sub	sp, #8
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <DMA_TransferHalfHandler+0x44>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	2b40      	cmp	r3, #64	@ 0x40
 8002570:	d012      	beq.n	8002598 <DMA_TransferHalfHandler+0x34>
 8002572:	4c0d      	ldr	r4, [pc, #52]	@ (80025a8 <DMA_TransferHalfHandler+0x44>)
 8002574:	f104 0680 	add.w	r6, r4, #128	@ 0x80
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8002578:	2500      	movs	r5, #0
 800257a:	4629      	mov	r1, r5
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff ff6d 	bl	800245c <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002582:	3410      	adds	r4, #16
 8002584:	42b4      	cmp	r4, r6
 8002586:	d1f8      	bne.n	800257a <DMA_TransferHalfHandler+0x16>
		ws2812b.repeatCounter++;
 8002588:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <DMA_TransferHalfHandler+0x44>)
 800258a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800258e:	3301      	adds	r3, #1
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002594:	b002      	add	sp, #8
 8002596:	bd70      	pop	{r4, r5, r6, pc}
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8002598:	2000      	movs	r0, #0
 800259a:	9000      	str	r0, [sp, #0]
 800259c:	4603      	mov	r3, r0
 800259e:	4602      	mov	r2, r0
 80025a0:	4601      	mov	r1, r0
 80025a2:	f7ff fef9 	bl	8002398 <ws2812b_set_pixel>
 80025a6:	e7f5      	b.n	8002594 <DMA_TransferHalfHandler+0x30>
 80025a8:	20000fc8 	.word	0x20000fc8

080025ac <DMA2_Stream2_IRQHandler>:
{
 80025ac:	b510      	push	{r4, lr}
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80025ae:	4c05      	ldr	r4, [pc, #20]	@ (80025c4 <DMA2_Stream2_IRQHandler+0x18>)
 80025b0:	2320      	movs	r3, #32
 80025b2:	61a3      	str	r3, [r4, #24]
	  HAL_DMA_IRQHandler(&dmaCC2);
 80025b4:	4804      	ldr	r0, [pc, #16]	@ (80025c8 <DMA2_Stream2_IRQHandler+0x1c>)
 80025b6:	f000 fcf7 	bl	8002fa8 <HAL_DMA_IRQHandler>
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80025ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025be:	61a3      	str	r3, [r4, #24]
}
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	bf00      	nop
 80025c4:	40020000 	.word	0x40020000
 80025c8:	20000dc0 	.word	0x20000dc0

080025cc <TIM1_UP_TIM10_IRQHandler>:
{
 80025cc:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&TIM1_handle);
 80025ce:	4802      	ldr	r0, [pc, #8]	@ (80025d8 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80025d0:	f001 fac7 	bl	8003b62 <HAL_TIM_IRQHandler>
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop
 80025d8:	20000f20 	.word	0x20000f20

080025dc <HAL_TIM_PeriodElapsedCallback>:
    ws2812b.timerPeriodCounter = 0;
 80025dc:	480b      	ldr	r0, [pc, #44]	@ (800260c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    TIM1->CR1 = 0; // disable timer
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025e6:	6013      	str	r3, [r2, #0]
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	f021 0101 	bic.w	r1, r1, #1
 80025f2:	60d9      	str	r1, [r3, #12]
    TIM1->ARR = tim_period;
 80025f4:	4908      	ldr	r1, [pc, #32]	@ (8002618 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80025f6:	6809      	ldr	r1, [r1, #0]
 80025f8:	62d1      	str	r1, [r2, #44]	@ 0x2c
    TIM1->EGR = TIM_EGR_UG;
 80025fa:	2101      	movs	r1, #1
 80025fc:	6151      	str	r1, [r2, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80025fe:	f06f 0201 	mvn.w	r2, #1
 8002602:	611a      	str	r2, [r3, #16]
    ws2812b.transferComplete = 1;
 8002604:	f880 1080 	strb.w	r1, [r0, #128]	@ 0x80
}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000fc8 	.word	0x20000fc8
 8002610:	40010000 	.word	0x40010000
 8002614:	20000f20 	.word	0x20000f20
 8002618:	20000ee4 	.word	0x20000ee4

0800261c <ws2812b_init>:


void ws2812b_init()
{
 800261c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002620:	b089      	sub	sp, #36	@ 0x24
	WS2812B_GPIO_CLK_ENABLE();
 8002622:	2400      	movs	r4, #0
 8002624:	9402      	str	r4, [sp, #8]
 8002626:	4e85      	ldr	r6, [pc, #532]	@ (800283c <ws2812b_init+0x220>)
 8002628:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6333      	str	r3, [r6, #48]	@ 0x30
 8002630:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	9302      	str	r3, [sp, #8]
 8002638:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 800263a:	23ff      	movs	r3, #255	@ 0xff
 800263c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002642:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8002644:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8002646:	a903      	add	r1, sp, #12
 8002648:	487d      	ldr	r0, [pc, #500]	@ (8002840 <ws2812b_init+0x224>)
 800264a:	f000 fd9b 	bl	8003184 <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE();
 800264e:	9403      	str	r4, [sp, #12]
 8002650:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8002652:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002656:	6333      	str	r3, [r6, #48]	@ 0x30
 8002658:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	9303      	str	r3, [sp, #12]
 8002660:	9b03      	ldr	r3, [sp, #12]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002662:	4d78      	ldr	r5, [pc, #480]	@ (8002844 <ws2812b_init+0x228>)
 8002664:	f04f 0b40 	mov.w	fp, #64	@ 0x40
 8002668:	f8c5 b008 	str.w	fp, [r5, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 800266c:	60ec      	str	r4, [r5, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800266e:	612c      	str	r4, [r5, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002674:	616b      	str	r3, [r5, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002676:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800267a:	61ab      	str	r3, [r5, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 800267c:	f44f 7a80 	mov.w	sl, #256	@ 0x100
 8002680:	f8c5 a01c 	str.w	sl, [r5, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002684:	f44f 3940 	mov.w	r9, #196608	@ 0x30000
 8002688:	f8c5 9020 	str.w	r9, [r5, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 800268c:	f04f 6840 	mov.w	r8, #201326592	@ 0xc000000
 8002690:	f8c5 8004 	str.w	r8, [r5, #4]
	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002694:	626c      	str	r4, [r5, #36]	@ 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002696:	2703      	movs	r7, #3
 8002698:	62af      	str	r7, [r5, #40]	@ 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 800269a:	62ec      	str	r4, [r5, #44]	@ 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800269c:	632c      	str	r4, [r5, #48]	@ 0x30
	dmaUpdate.Instance = DMA2_Stream5;
 800269e:	4b6a      	ldr	r3, [pc, #424]	@ (8002848 <ws2812b_init+0x22c>)
 80026a0:	602b      	str	r3, [r5, #0]
	HAL_DMA_DeInit(&dmaUpdate);
 80026a2:	4628      	mov	r0, r5
 80026a4:	f000 fb74 	bl	8002d90 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 80026a8:	4628      	mov	r0, r5
 80026aa:	f000 fad9 	bl	8002c60 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 80026ae:	2330      	movs	r3, #48	@ 0x30
 80026b0:	4a66      	ldr	r2, [pc, #408]	@ (800284c <ws2812b_init+0x230>)
 80026b2:	4967      	ldr	r1, [pc, #412]	@ (8002850 <ws2812b_init+0x234>)
 80026b4:	4628      	mov	r0, r5
 80026b6:	f000 fb9d 	bl	8002df4 <HAL_DMA_Start>
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ba:	4d66      	ldr	r5, [pc, #408]	@ (8002854 <ws2812b_init+0x238>)
 80026bc:	f8c5 b008 	str.w	fp, [r5, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c0:	60ec      	str	r4, [r5, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80026c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026c6:	612b      	str	r3, [r5, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026cc:	616b      	str	r3, [r5, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026d2:	61ab      	str	r3, [r5, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80026d4:	f8c5 a01c 	str.w	sl, [r5, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026d8:	f8c5 9020 	str.w	r9, [r5, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 80026dc:	f8c5 8004 	str.w	r8, [r5, #4]
	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e0:	626c      	str	r4, [r5, #36]	@ 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026e2:	62af      	str	r7, [r5, #40]	@ 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 80026e4:	62ec      	str	r4, [r5, #44]	@ 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026e6:	632c      	str	r4, [r5, #48]	@ 0x30
	dmaCC1.Instance = DMA2_Stream1;
 80026e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <ws2812b_init+0x23c>)
 80026ea:	602b      	str	r3, [r5, #0]
	HAL_DMA_DeInit(&dmaCC1);
 80026ec:	4628      	mov	r0, r5
 80026ee:	f000 fb4f 	bl	8002d90 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 fab4 	bl	8002c60 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 80026f8:	2330      	movs	r3, #48	@ 0x30
 80026fa:	4a58      	ldr	r2, [pc, #352]	@ (800285c <ws2812b_init+0x240>)
 80026fc:	4958      	ldr	r1, [pc, #352]	@ (8002860 <ws2812b_init+0x244>)
 80026fe:	4628      	mov	r0, r5
 8002700:	f000 fb78 	bl	8002df4 <HAL_DMA_Start>
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002704:	4d57      	ldr	r5, [pc, #348]	@ (8002864 <ws2812b_init+0x248>)
 8002706:	f8c5 b008 	str.w	fp, [r5, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 800270a:	60ec      	str	r4, [r5, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 800270c:	612c      	str	r4, [r5, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800270e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002712:	616b      	str	r3, [r5, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002714:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002718:	61ab      	str	r3, [r5, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 800271a:	f8c5 a01c 	str.w	sl, [r5, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800271e:	f8c5 9020 	str.w	r9, [r5, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8002722:	f8c5 8004 	str.w	r8, [r5, #4]
	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002726:	626c      	str	r4, [r5, #36]	@ 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002728:	62af      	str	r7, [r5, #40]	@ 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 800272a:	62ec      	str	r4, [r5, #44]	@ 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800272c:	632c      	str	r4, [r5, #48]	@ 0x30
	dmaCC2.Instance = DMA2_Stream2;
 800272e:	4b4e      	ldr	r3, [pc, #312]	@ (8002868 <ws2812b_init+0x24c>)
 8002730:	602b      	str	r3, [r5, #0]
	HAL_DMA_DeInit(&dmaCC2);
 8002732:	4628      	mov	r0, r5
 8002734:	f000 fb2c 	bl	8002d90 <HAL_DMA_DeInit>
	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8002738:	4b4c      	ldr	r3, [pc, #304]	@ (800286c <ws2812b_init+0x250>)
 800273a:	63eb      	str	r3, [r5, #60]	@ 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 800273c:	4b4c      	ldr	r3, [pc, #304]	@ (8002870 <ws2812b_init+0x254>)
 800273e:	642b      	str	r3, [r5, #64]	@ 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 8002740:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <ws2812b_init+0x258>)
 8002742:	64eb      	str	r3, [r5, #76]	@ 0x4c
	HAL_DMA_Init(&dmaCC2);
 8002744:	4628      	mov	r0, r5
 8002746:	f000 fa8b 	bl	8002c60 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800274a:	4622      	mov	r2, r4
 800274c:	4621      	mov	r1, r4
 800274e:	203a      	movs	r0, #58	@ 0x3a
 8002750:	f000 fa0e 	bl	8002b70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002754:	203a      	movs	r0, #58	@ 0x3a
 8002756:	f000 fa41 	bl	8002bdc <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 800275a:	2330      	movs	r3, #48	@ 0x30
 800275c:	4a3b      	ldr	r2, [pc, #236]	@ (800284c <ws2812b_init+0x230>)
 800275e:	4946      	ldr	r1, [pc, #280]	@ (8002878 <ws2812b_init+0x25c>)
 8002760:	4628      	mov	r0, r5
 8002762:	f000 fb7f 	bl	8002e64 <HAL_DMA_Start_IT>
	__HAL_RCC_TIM1_CLK_ENABLE();
 8002766:	9401      	str	r4, [sp, #4]
 8002768:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6473      	str	r3, [r6, #68]	@ 0x44
 8002770:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	9b01      	ldr	r3, [sp, #4]
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800277a:	4b40      	ldr	r3, [pc, #256]	@ (800287c <ws2812b_init+0x260>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	0a13      	lsrs	r3, r2, #8
 8002780:	493f      	ldr	r1, [pc, #252]	@ (8002880 <ws2812b_init+0x264>)
 8002782:	fba1 1303 	umull	r1, r3, r1, r3
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	493e      	ldr	r1, [pc, #248]	@ (8002884 <ws2812b_init+0x268>)
 800278a:	600b      	str	r3, [r1, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 800278c:	493e      	ldr	r1, [pc, #248]	@ (8002888 <ws2812b_init+0x26c>)
 800278e:	fba1 1202 	umull	r1, r2, r1, r2
 8002792:	0ad2      	lsrs	r2, r2, #11
 8002794:	493d      	ldr	r1, [pc, #244]	@ (800288c <ws2812b_init+0x270>)
 8002796:	600a      	str	r2, [r1, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 8002798:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800279c:	0076      	lsls	r6, r6, #1
	TIM1_handle.Instance = TIM1;
 800279e:	4d3c      	ldr	r5, [pc, #240]	@ (8002890 <ws2812b_init+0x274>)
 80027a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002894 <ws2812b_init+0x278>)
 80027a2:	602a      	str	r2, [r5, #0]
	TIM1_handle.Init.Period            = tim_period;
 80027a4:	60eb      	str	r3, [r5, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 80027a6:	616c      	str	r4, [r5, #20]
	TIM1_handle.Init.Prescaler         = 0;
 80027a8:	606c      	str	r4, [r5, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80027aa:	612c      	str	r4, [r5, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80027ac:	60ac      	str	r4, [r5, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80027ae:	4628      	mov	r0, r5
 80027b0:	f001 faf2 	bl	8003d98 <HAL_TIM_PWM_Init>
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027b4:	4622      	mov	r2, r4
 80027b6:	4621      	mov	r1, r4
 80027b8:	2019      	movs	r0, #25
 80027ba:	f000 f9d9 	bl	8002b70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027be:	2019      	movs	r0, #25
 80027c0:	f000 fa0c 	bl	8002bdc <HAL_NVIC_EnableIRQ>
	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 80027c4:	4934      	ldr	r1, [pc, #208]	@ (8002898 <ws2812b_init+0x27c>)
 80027c6:	2760      	movs	r7, #96	@ 0x60
 80027c8:	600f      	str	r7, [r1, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80027ca:	608c      	str	r4, [r1, #8]
	uint32_t cc1 = (10 * tim_period) / 36;
 80027cc:	4b33      	ldr	r3, [pc, #204]	@ (800289c <ws2812b_init+0x280>)
 80027ce:	fba3 2306 	umull	r2, r3, r3, r6
 80027d2:	08db      	lsrs	r3, r3, #3
	tim2OC1.Pulse        = cc1;
 80027d4:	604b      	str	r3, [r1, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80027d6:	60cc      	str	r4, [r1, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 80027d8:	610c      	str	r4, [r1, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 80027da:	4622      	mov	r2, r4
 80027dc:	4628      	mov	r0, r5
 80027de:	f001 fb35 	bl	8003e4c <HAL_TIM_PWM_ConfigChannel>
	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 80027e2:	492f      	ldr	r1, [pc, #188]	@ (80028a0 <ws2812b_init+0x284>)
 80027e4:	600f      	str	r7, [r1, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80027e6:	608c      	str	r4, [r1, #8]
	uint32_t cc2 = (10 * tim_period) / 15;
 80027e8:	4b2e      	ldr	r3, [pc, #184]	@ (80028a4 <ws2812b_init+0x288>)
 80027ea:	fba3 3606 	umull	r3, r6, r3, r6
 80027ee:	08f6      	lsrs	r6, r6, #3
	tim2OC2.Pulse        = cc2;
 80027f0:	604e      	str	r6, [r1, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80027f2:	60cc      	str	r4, [r1, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 80027f4:	610c      	str	r4, [r1, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80027f6:	614c      	str	r4, [r1, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027f8:	618c      	str	r4, [r1, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 80027fa:	2204      	movs	r2, #4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f001 fb25 	bl	8003e4c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_Start(&TIM1_handle);
 8002802:	4628      	mov	r0, r5
 8002804:	f001 f972 	bl	8003aec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 8002808:	4621      	mov	r1, r4
 800280a:	4628      	mov	r0, r5
 800280c:	f001 fb9c 	bl	8003f48 <HAL_TIM_PWM_Start>
	__HAL_TIM_DISABLE(&TIM1_handle);
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	6a19      	ldr	r1, [r3, #32]
 8002814:	f241 1211 	movw	r2, #4369	@ 0x1111
 8002818:	4211      	tst	r1, r2
 800281a:	d108      	bne.n	800282e <ws2812b_init+0x212>
 800281c:	6a19      	ldr	r1, [r3, #32]
 800281e:	f240 4244 	movw	r2, #1092	@ 0x444
 8002822:	4211      	tst	r1, r2
 8002824:	d103      	bne.n	800282e <ws2812b_init+0x212>
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
	DMA2_init();
	TIM1_init();


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <ws2812b_init+0x28c>)
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002836:	b009      	add	sp, #36	@ 0x24
 8002838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	40020800 	.word	0x40020800
 8002844:	20000e80 	.word	0x20000e80
 8002848:	40026488 	.word	0x40026488
 800284c:	40020818 	.word	0x40020818
 8002850:	20000028 	.word	0x20000028
 8002854:	20000e20 	.word	0x20000e20
 8002858:	40026428 	.word	0x40026428
 800285c:	4002081a 	.word	0x4002081a
 8002860:	20000f68 	.word	0x20000f68
 8002864:	20000dc0 	.word	0x20000dc0
 8002868:	40026440 	.word	0x40026440
 800286c:	08002491 	.word	0x08002491
 8002870:	08002565 	.word	0x08002565
 8002874:	08002389 	.word	0x08002389
 8002878:	20000024 	.word	0x20000024
 800287c:	20000020 	.word	0x20000020
 8002880:	014f8b59 	.word	0x014f8b59
 8002884:	20000ee4 	.word	0x20000ee4
 8002888:	1b4e81b5 	.word	0x1b4e81b5
 800288c:	20000ee0 	.word	0x20000ee0
 8002890:	20000f20 	.word	0x20000f20
 8002894:	40010000 	.word	0x40010000
 8002898:	20000f04 	.word	0x20000f04
 800289c:	38e38e39 	.word	0x38e38e39
 80028a0:	20000ee8 	.word	0x20000ee8
 80028a4:	88888889 	.word	0x88888889
 80028a8:	20000fc8 	.word	0x20000fc8

080028ac <ws2812b_handle>:


void ws2812b_handle()
{
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(ws2812b.startTransfer) {
 80028ae:	4b54      	ldr	r3, [pc, #336]	@ (8002a00 <ws2812b_handle+0x154>)
 80028b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80028b4:	b903      	cbnz	r3, 80028b8 <ws2812b_handle+0xc>
		ws2812b.startTransfer = 0;
		WS2812_sendbuf();
	}

}
 80028b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ws2812b.startTransfer = 0;
 80028b8:	4e51      	ldr	r6, [pc, #324]	@ (8002a00 <ws2812b_handle+0x154>)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f886 3081 	strb.w	r3, [r6, #129]	@ 0x81
	ws2812b.transferComplete = 0;
 80028c0:	f886 3080 	strb.w	r3, [r6, #128]	@ 0x80
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80028c4:	4634      	mov	r4, r6
 80028c6:	3680      	adds	r6, #128	@ 0x80
		ws2812b.item[i].frameBufferCounter = 0;
 80028c8:	461d      	mov	r5, r3
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 80028ca:	2701      	movs	r7, #1
		ws2812b.item[i].frameBufferCounter = 0;
 80028cc:	60a5      	str	r5, [r4, #8]
		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 80028ce:	4629      	mov	r1, r5
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fdc3 	bl	800245c <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 80028d6:	4639      	mov	r1, r7
 80028d8:	4620      	mov	r0, r4
 80028da:	f7ff fdbf 	bl	800245c <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80028de:	3410      	adds	r4, #16
 80028e0:	42b4      	cmp	r4, r6
 80028e2:	d1f3      	bne.n	80028cc <ws2812b_handle+0x20>
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80028e4:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <ws2812b_handle+0x158>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a47      	ldr	r2, [pc, #284]	@ (8002a08 <ws2812b_handle+0x15c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d945      	bls.n	800297a <ws2812b_handle+0xce>
 80028ee:	3a58      	subs	r2, #88	@ 0x58
 80028f0:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80028f4:	60d1      	str	r1, [r2, #12]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80028f6:	4a45      	ldr	r2, [pc, #276]	@ (8002a0c <ws2812b_handle+0x160>)
 80028f8:	6810      	ldr	r0, [r2, #0]
 80028fa:	4a43      	ldr	r2, [pc, #268]	@ (8002a08 <ws2812b_handle+0x15c>)
 80028fc:	4290      	cmp	r0, r2
 80028fe:	d952      	bls.n	80029a6 <ws2812b_handle+0xfa>
 8002900:	3a58      	subs	r2, #88	@ 0x58
 8002902:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8002906:	60d1      	str	r1, [r2, #12]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8002908:	4a41      	ldr	r2, [pc, #260]	@ (8002a10 <ws2812b_handle+0x164>)
 800290a:	6811      	ldr	r1, [r2, #0]
 800290c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a08 <ws2812b_handle+0x15c>)
 800290e:	4291      	cmp	r1, r2
 8002910:	d95f      	bls.n	80029d2 <ws2812b_handle+0x126>
 8002912:	3a58      	subs	r2, #88	@ 0x58
 8002914:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 8002918:	60d4      	str	r4, [r2, #12]
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 800291a:	2230      	movs	r2, #48	@ 0x30
 800291c:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 800291e:	6042      	str	r2, [r0, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 8002920:	604a      	str	r2, [r1, #4]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8002922:	493c      	ldr	r1, [pc, #240]	@ (8002a14 <ws2812b_handle+0x168>)
 8002924:	680a      	ldr	r2, [r1, #0]
 8002926:	f06f 001f 	mvn.w	r0, #31
 800292a:	6110      	str	r0, [r2, #16]
	__HAL_DMA_ENABLE(&dmaUpdate);
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8002934:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <ws2812b_handle+0x160>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6013      	str	r3, [r2, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <ws2812b_handle+0x164>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6013      	str	r3, [r2, #0]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 800294c:	680b      	ldr	r3, [r1, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002954:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002964:	60da      	str	r2, [r3, #12]
	TIM1->CNT = tim_period-1;
 8002966:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <ws2812b_handle+0x16c>)
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	3a01      	subs	r2, #1
 800296c:	492b      	ldr	r1, [pc, #172]	@ (8002a1c <ws2812b_handle+0x170>)
 800296e:	624a      	str	r2, [r1, #36]	@ 0x24
	__HAL_TIM_ENABLE(&TIM1_handle);
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	e79d      	b.n	80028b6 <ws2812b_handle+0xa>
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 800297a:	4a29      	ldr	r2, [pc, #164]	@ (8002a20 <ws2812b_handle+0x174>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d905      	bls.n	800298c <ws2812b_handle+0xe0>
 8002980:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 8002984:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8002988:	6091      	str	r1, [r2, #8]
 800298a:	e7b4      	b.n	80028f6 <ws2812b_handle+0x4a>
 800298c:	4a25      	ldr	r2, [pc, #148]	@ (8002a24 <ws2812b_handle+0x178>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d904      	bls.n	800299c <ws2812b_handle+0xf0>
 8002992:	3a58      	subs	r2, #88	@ 0x58
 8002994:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8002998:	60d1      	str	r1, [r2, #12]
 800299a:	e7ac      	b.n	80028f6 <ws2812b_handle+0x4a>
 800299c:	4a22      	ldr	r2, [pc, #136]	@ (8002a28 <ws2812b_handle+0x17c>)
 800299e:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80029a2:	6091      	str	r1, [r2, #8]
 80029a4:	e7a7      	b.n	80028f6 <ws2812b_handle+0x4a>
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80029a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a20 <ws2812b_handle+0x174>)
 80029a8:	4290      	cmp	r0, r2
 80029aa:	d905      	bls.n	80029b8 <ws2812b_handle+0x10c>
 80029ac:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 80029b0:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80029b4:	6091      	str	r1, [r2, #8]
 80029b6:	e7a7      	b.n	8002908 <ws2812b_handle+0x5c>
 80029b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a24 <ws2812b_handle+0x178>)
 80029ba:	4290      	cmp	r0, r2
 80029bc:	d904      	bls.n	80029c8 <ws2812b_handle+0x11c>
 80029be:	3a58      	subs	r2, #88	@ 0x58
 80029c0:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80029c4:	60d1      	str	r1, [r2, #12]
 80029c6:	e79f      	b.n	8002908 <ws2812b_handle+0x5c>
 80029c8:	4a17      	ldr	r2, [pc, #92]	@ (8002a28 <ws2812b_handle+0x17c>)
 80029ca:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80029ce:	6091      	str	r1, [r2, #8]
 80029d0:	e79a      	b.n	8002908 <ws2812b_handle+0x5c>
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 80029d2:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <ws2812b_handle+0x174>)
 80029d4:	4291      	cmp	r1, r2
 80029d6:	d905      	bls.n	80029e4 <ws2812b_handle+0x138>
 80029d8:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 80029dc:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 80029e0:	6094      	str	r4, [r2, #8]
 80029e2:	e79a      	b.n	800291a <ws2812b_handle+0x6e>
 80029e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a24 <ws2812b_handle+0x178>)
 80029e6:	4291      	cmp	r1, r2
 80029e8:	d904      	bls.n	80029f4 <ws2812b_handle+0x148>
 80029ea:	3a58      	subs	r2, #88	@ 0x58
 80029ec:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 80029f0:	60d4      	str	r4, [r2, #12]
 80029f2:	e792      	b.n	800291a <ws2812b_handle+0x6e>
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <ws2812b_handle+0x17c>)
 80029f6:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 80029fa:	6094      	str	r4, [r2, #8]
 80029fc:	e78d      	b.n	800291a <ws2812b_handle+0x6e>
 80029fe:	bf00      	nop
 8002a00:	20000fc8 	.word	0x20000fc8
 8002a04:	20000e80 	.word	0x20000e80
 8002a08:	40026458 	.word	0x40026458
 8002a0c:	20000e20 	.word	0x20000e20
 8002a10:	20000dc0 	.word	0x20000dc0
 8002a14:	20000f20 	.word	0x20000f20
 8002a18:	20000ee4 	.word	0x20000ee4
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	400260b8 	.word	0x400260b8
 8002a24:	40026058 	.word	0x40026058
 8002a28:	40026000 	.word	0x40026000

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a30:	f7ff fca0 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	@ (8002a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f002 f84f 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5e:	f7ff f907 	bl	8001c70 <main>
  bx  lr    
 8002a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002a70:	08006c98 	.word	0x08006c98
  ldr r2, =_sbss
 8002a74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002a78:	200011a4 	.word	0x200011a4

08002a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC_IRQHandler>
	...

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b510      	push	{r4, lr}
 8002a82:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_InitTick+0x40>)
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a90:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <HAL_InitTick+0x44>)
 8002a92:	6810      	ldr	r0, [r2, #0]
 8002a94:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a98:	f000 f8ae 	bl	8002bf8 <HAL_SYSTICK_Config>
 8002a9c:	b968      	cbnz	r0, 8002aba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	2c0f      	cmp	r4, #15
 8002aa0:	d901      	bls.n	8002aa6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	e00a      	b.n	8002abc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8002aae:	f000 f85f 	bl	8002b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_InitTick+0x48>)
 8002ab4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	e000      	b.n	8002abc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002aba:	2001      	movs	r0, #1
}
 8002abc:	bd10      	pop	{r4, pc}
 8002abe:	bf00      	nop
 8002ac0:	2000002c 	.word	0x2000002c
 8002ac4:	20000020 	.word	0x20000020
 8002ac8:	20000030 	.word	0x20000030

08002acc <HAL_Init>:
{
 8002acc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ace:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_Init+0x30>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ade:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 f82f 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff ffc6 	bl	8002a80 <HAL_InitTick>
  HAL_MspInit();
 8002af4:	f7ff fb02 	bl	80020fc <HAL_MspInit>
}
 8002af8:	2000      	movs	r0, #0
 8002afa:	bd08      	pop	{r3, pc}
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b00:	4a03      	ldr	r2, [pc, #12]	@ (8002b10 <HAL_IncTick+0x10>)
 8002b02:	6811      	ldr	r1, [r2, #0]
 8002b04:	4b03      	ldr	r3, [pc, #12]	@ (8002b14 <HAL_IncTick+0x14>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	440b      	add	r3, r1
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20001054 	.word	0x20001054
 8002b14:	2000002c 	.word	0x2000002c

08002b18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b18:	4b01      	ldr	r3, [pc, #4]	@ (8002b20 <HAL_GetTick+0x8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20001054 	.word	0x20001054

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b538      	push	{r3, r4, r5, lr}
 8002b26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fff6 	bl	8002b18 <HAL_GetTick>
 8002b2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b32:	d002      	beq.n	8002b3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_Delay+0x24>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b3a:	f7ff ffed 	bl	8002b18 <HAL_GetTick>
 8002b3e:	1b40      	subs	r0, r0, r5
 8002b40:	42a0      	cmp	r0, r4
 8002b42:	d3fa      	bcc.n	8002b3a <HAL_Delay+0x16>
  {
  }
}
 8002b44:	bd38      	pop	{r3, r4, r5, pc}
 8002b46:	bf00      	nop
 8002b48:	2000002c 	.word	0x2000002c

08002b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4907      	ldr	r1, [pc, #28]	@ (8002b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b4e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	0203      	lsls	r3, r0, #8
 8002b52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b5a:	0412      	lsls	r2, r2, #16
 8002b5c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002b68:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b70:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b72:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <HAL_NVIC_SetPriority+0x64>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7a:	f1c3 0c07 	rsb	ip, r3, #7
 8002b7e:	f1bc 0f04 	cmp.w	ip, #4
 8002b82:	bf28      	it	cs
 8002b84:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b88:	f103 0e04 	add.w	lr, r3, #4
 8002b8c:	f1be 0f06 	cmp.w	lr, #6
 8002b90:	bf8c      	ite	hi
 8002b92:	3b03      	subhi	r3, #3
 8002b94:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b96:	f04f 3eff 	mov.w	lr, #4294967295
 8002b9a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b9e:	ea21 010c 	bic.w	r1, r1, ip
 8002ba2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	fa0e fe03 	lsl.w	lr, lr, r3
 8002ba8:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	db09      	blt.n	8002bc6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	0109      	lsls	r1, r1, #4
 8002bb4:	b2c9      	uxtb	r1, r1
 8002bb6:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002bba:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002bbe:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002bc2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	f000 000f 	and.w	r0, r0, #15
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	b2c9      	uxtb	r1, r1
 8002bce:	4b02      	ldr	r3, [pc, #8]	@ (8002bd8 <HAL_NVIC_SetPriority+0x68>)
 8002bd0:	5419      	strb	r1, [r3, r0]
 8002bd2:	e7f6      	b.n	8002bc2 <HAL_NVIC_SetPriority+0x52>
 8002bd4:	e000ed00 	.word	0xe000ed00
 8002bd8:	e000ed14 	.word	0xe000ed14

08002bdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	db07      	blt.n	8002bf0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be0:	0941      	lsrs	r1, r0, #5
 8002be2:	f000 001f 	and.w	r0, r0, #31
 8002be6:	2301      	movs	r3, #1
 8002be8:	4083      	lsls	r3, r0
 8002bea:	4a02      	ldr	r2, [pc, #8]	@ (8002bf4 <HAL_NVIC_EnableIRQ+0x18>)
 8002bec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	3801      	subs	r0, #1
 8002bfa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002bfe:	d20b      	bcs.n	8002c18 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002c04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	4a05      	ldr	r2, [pc, #20]	@ (8002c1c <HAL_SYSTICK_Config+0x24>)
 8002c08:	21f0      	movs	r1, #240	@ 0xf0
 8002c0a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0e:	2000      	movs	r0, #0
 8002c10:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	2207      	movs	r2, #7
 8002c14:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c18:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c20:	b410      	push	{r4}
 8002c22:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c24:	6803      	ldr	r3, [r0, #0]
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	3810      	subs	r0, #16
 8002c2a:	490b      	ldr	r1, [pc, #44]	@ (8002c58 <DMA_CalcBaseAndBitshift+0x38>)
 8002c2c:	fba1 4100 	umull	r4, r1, r1, r0
 8002c30:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4c0a      	ldr	r4, [pc, #40]	@ (8002c5c <DMA_CalcBaseAndBitshift+0x3c>)
 8002c34:	5c61      	ldrb	r1, [r4, r1]
 8002c36:	65d1      	str	r1, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c38:	285f      	cmp	r0, #95	@ 0x5f
 8002c3a:	d908      	bls.n	8002c4e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c3c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	1d18      	adds	r0, r3, #4
 8002c46:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c4c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4e:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8002c52:	f020 0003 	bic.w	r0, r0, #3
 8002c56:	e7f6      	b.n	8002c46 <DMA_CalcBaseAndBitshift+0x26>
 8002c58:	aaaaaaab 	.word	0xaaaaaaab
 8002c5c:	080067d0 	.word	0x080067d0

08002c60 <HAL_DMA_Init>:
{
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff ff58 	bl	8002b18 <HAL_GetTick>
  if(hdma == NULL)
 8002c68:	2c00      	cmp	r4, #0
 8002c6a:	f000 808c 	beq.w	8002d86 <HAL_DMA_Init+0x126>
 8002c6e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002c76:	2300      	movs	r3, #0
 8002c78:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	f012 0f01 	tst.w	r2, #1
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c90:	f7ff ff42 	bl	8002b18 <HAL_GetTick>
 8002c94:	1b43      	subs	r3, r0, r5
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d9f5      	bls.n	8002c86 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c9e:	2003      	movs	r0, #3
 8002ca0:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8002ca4:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8002ca6:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ca8:	4938      	ldr	r1, [pc, #224]	@ (8002d8c <HAL_DMA_Init+0x12c>)
 8002caa:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	68a0      	ldr	r0, [r4, #8]
 8002cb0:	4302      	orrs	r2, r0
 8002cb2:	68e0      	ldr	r0, [r4, #12]
 8002cb4:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb6:	6920      	ldr	r0, [r4, #16]
 8002cb8:	4302      	orrs	r2, r0
 8002cba:	6960      	ldr	r0, [r4, #20]
 8002cbc:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbe:	69a0      	ldr	r0, [r4, #24]
 8002cc0:	4302      	orrs	r2, r0
 8002cc2:	69e0      	ldr	r0, [r4, #28]
 8002cc4:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc6:	6a20      	ldr	r0, [r4, #32]
 8002cc8:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cca:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ccc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002cce:	2904      	cmp	r1, #4
 8002cd0:	d021      	beq.n	8002d16 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8002cd2:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002cd4:	6821      	ldr	r1, [r4, #0]
 8002cd6:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd8:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8002cdc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cde:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d10a      	bne.n	8002cfa <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8002ce4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002ce6:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ce8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002cea:	b133      	cbz	r3, 8002cfa <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cec:	69a5      	ldr	r5, [r4, #24]
 8002cee:	bb3d      	cbnz	r5, 8002d40 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8002cf0:	2801      	cmp	r0, #1
 8002cf2:	d01f      	beq.n	8002d34 <HAL_DMA_Init+0xd4>
 8002cf4:	f030 0002 	bics.w	r0, r0, #2
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8002cfa:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7ff ff8f 	bl	8002c20 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d02:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002d04:	233f      	movs	r3, #63	@ 0x3f
 8002d06:	4093      	lsls	r3, r2
 8002d08:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002d14:	e7c6      	b.n	8002ca4 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002d18:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002d1a:	4301      	orrs	r1, r0
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	e7d8      	b.n	8002cd2 <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d20:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0e8      	beq.n	8002cfa <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d28:	2340      	movs	r3, #64	@ 0x40
 8002d2a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8002d32:	e7b7      	b.n	8002ca4 <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d38:	bf14      	ite	ne
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	e7f1      	b.n	8002d24 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d40:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 8002d44:	d008      	beq.n	8002d58 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d9ee      	bls.n	8002d28 <HAL_DMA_Init+0xc8>
 8002d4a:	2803      	cmp	r0, #3
 8002d4c:	d1d5      	bne.n	8002cfa <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4e:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0d1      	beq.n	8002cfa <HAL_DMA_Init+0x9a>
 8002d56:	e7e7      	b.n	8002d28 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8002d58:	2803      	cmp	r0, #3
 8002d5a:	d8ce      	bhi.n	8002cfa <HAL_DMA_Init+0x9a>
 8002d5c:	a501      	add	r5, pc, #4	@ (adr r5, 8002d64 <HAL_DMA_Init+0x104>)
 8002d5e:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002d29 	.word	0x08002d29
 8002d68:	08002d75 	.word	0x08002d75
 8002d6c:	08002d29 	.word	0x08002d29
 8002d70:	08002d7b 	.word	0x08002d7b
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d74:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8002d78:	e7eb      	b.n	8002d52 <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d7e:	bf14      	ite	ne
 8002d80:	2300      	movne	r3, #0
 8002d82:	2301      	moveq	r3, #1
 8002d84:	e7e5      	b.n	8002d52 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
 8002d88:	e78c      	b.n	8002ca4 <HAL_DMA_Init+0x44>
 8002d8a:	bf00      	nop
 8002d8c:	f010803f 	.word	0xf010803f

08002d90 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d02d      	beq.n	8002df0 <HAL_DMA_DeInit+0x60>
{
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002d98:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
 8002d9c:	b2c0      	uxtb	r0, r0
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	d025      	beq.n	8002dee <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 8002da2:	682a      	ldr	r2, [r5, #0]
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	2400      	movs	r4, #0
 8002db0:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002db6:	682b      	ldr	r3, [r5, #0]
 8002db8:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002dbe:	682b      	ldr	r3, [r5, #0]
 8002dc0:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	2221      	movs	r2, #33	@ 0x21
 8002dc6:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7ff ff29 	bl	8002c20 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8002dce:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002dd0:	642c      	str	r4, [r5, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002dd2:	646c      	str	r4, [r5, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002dd4:	64ac      	str	r4, [r5, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002dd6:	64ec      	str	r4, [r5, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002dd8:	652c      	str	r4, [r5, #80]	@ 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dda:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002ddc:	233f      	movs	r3, #63	@ 0x3f
 8002dde:	4093      	lsls	r3, r2
 8002de0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de2:	656c      	str	r4, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8002de4:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002de8:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  return HAL_OK;
 8002dec:	4620      	mov	r0, r4
}
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002df0:	2001      	movs	r0, #1
}
 8002df2:	4770      	bx	lr

08002df4 <HAL_DMA_Start>:
  __HAL_LOCK(hdma);
 8002df4:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8002df8:	f1bc 0f01 	cmp.w	ip, #1
 8002dfc:	d030      	beq.n	8002e60 <HAL_DMA_Start+0x6c>
 8002dfe:	f04f 0c01 	mov.w	ip, #1
 8002e02:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e06:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 8002e0a:	fa5f fc8c 	uxtb.w	ip, ip
 8002e0e:	f1bc 0f01 	cmp.w	ip, #1
 8002e12:	d004      	beq.n	8002e1e <HAL_DMA_Start+0x2a>
    __HAL_UNLOCK(hdma);
 8002e14:	2300      	movs	r3, #0
 8002e16:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	4770      	bx	lr
{
 8002e1e:	b430      	push	{r4, r5}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	2402      	movs	r4, #2
 8002e22:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e26:	2400      	movs	r4, #0
 8002e28:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e2a:	6805      	ldr	r5, [r0, #0]
 8002e2c:	682c      	ldr	r4, [r5, #0]
 8002e2e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8002e32:	602c      	str	r4, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 8002e34:	6804      	ldr	r4, [r0, #0]
 8002e36:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e38:	6883      	ldr	r3, [r0, #8]
 8002e3a:	2b40      	cmp	r3, #64	@ 0x40
 8002e3c:	d00b      	beq.n	8002e56 <HAL_DMA_Start+0x62>
    hdma->Instance->PAR = SrcAddress;
 8002e3e:	6803      	ldr	r3, [r0, #0]
 8002e40:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e42:	6803      	ldr	r3, [r0, #0]
 8002e44:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 8002e46:	6802      	ldr	r2, [r0, #0]
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2000      	movs	r0, #0
}
 8002e52:	bc30      	pop	{r4, r5}
 8002e54:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002e5a:	6803      	ldr	r3, [r0, #0]
 8002e5c:	60d9      	str	r1, [r3, #12]
 8002e5e:	e7f2      	b.n	8002e46 <HAL_DMA_Start+0x52>
  __HAL_LOCK(hdma);
 8002e60:	2002      	movs	r0, #2
}
 8002e62:	4770      	bx	lr

08002e64 <HAL_DMA_Start_IT>:
{
 8002e64:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e66:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002e68:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8002e6c:	f1bc 0f01 	cmp.w	ip, #1
 8002e70:	d03f      	beq.n	8002ef2 <HAL_DMA_Start_IT+0x8e>
 8002e72:	f04f 0c01 	mov.w	ip, #1
 8002e76:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e7a:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 8002e7e:	fa5f fc8c 	uxtb.w	ip, ip
 8002e82:	f1bc 0f01 	cmp.w	ip, #1
 8002e86:	d005      	beq.n	8002e94 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 8002e8e:	2002      	movs	r0, #2
}
 8002e90:	bc70      	pop	{r4, r5, r6}
 8002e92:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e94:	2502      	movs	r5, #2
 8002e96:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9a:	2500      	movs	r5, #0
 8002e9c:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e9e:	6806      	ldr	r6, [r0, #0]
 8002ea0:	6835      	ldr	r5, [r6, #0]
 8002ea2:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8002ea6:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8002ea8:	6805      	ldr	r5, [r0, #0]
 8002eaa:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eac:	6883      	ldr	r3, [r0, #8]
 8002eae:	2b40      	cmp	r3, #64	@ 0x40
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8002eb2:	6803      	ldr	r3, [r0, #0]
 8002eb4:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb6:	6803      	ldr	r3, [r0, #0]
 8002eb8:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eba:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002ebc:	233f      	movs	r3, #63	@ 0x3f
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec2:	6802      	ldr	r2, [r0, #0]
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	f043 0316 	orr.w	r3, r3, #22
 8002eca:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002ecc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002ece:	b123      	cbz	r3, 8002eda <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ed0:	6802      	ldr	r2, [r0, #0]
 8002ed2:	6813      	ldr	r3, [r2, #0]
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	e7d3      	b.n	8002e90 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8002ee8:	6803      	ldr	r3, [r0, #0]
 8002eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002eec:	6803      	ldr	r3, [r0, #0]
 8002eee:	60d9      	str	r1, [r3, #12]
 8002ef0:	e7e3      	b.n	8002eba <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8002ef2:	2002      	movs	r0, #2
 8002ef4:	e7cc      	b.n	8002e90 <HAL_DMA_Start_IT+0x2c>

08002ef6 <HAL_DMA_Abort>:
{
 8002ef6:	b570      	push	{r4, r5, r6, lr}
 8002ef8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efa:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff fe0c 	bl	8002b18 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f00:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d006      	beq.n	8002f18 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002f10:	2300      	movs	r3, #0
 8002f12:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f023 0316 	bic.w	r3, r3, #22
 8002f22:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	6953      	ldr	r3, [r2, #20]
 8002f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f30:	b1cb      	cbz	r3, 8002f66 <HAL_DMA_Abort+0x70>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	f023 0308 	bic.w	r3, r3, #8
 8002f3a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f013 0f01 	tst.w	r3, #1
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Abort+0x78>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f50:	f7ff fde2 	bl	8002b18 <HAL_GetTick>
 8002f54:	1b43      	subs	r3, r0, r5
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d9f5      	bls.n	8002f46 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f5e:	2003      	movs	r0, #3
 8002f60:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8002f64:	e7d4      	b.n	8002f10 <HAL_DMA_Abort+0x1a>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e2      	bne.n	8002f32 <HAL_DMA_Abort+0x3c>
 8002f6c:	e7e6      	b.n	8002f3c <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002f70:	233f      	movs	r3, #63	@ 0x3f
 8002f72:	4093      	lsls	r3, r2
 8002f74:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	e7c7      	b.n	8002f10 <HAL_DMA_Abort+0x1a>

08002f80 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f80:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	2380      	movs	r3, #128	@ 0x80
 8002f8c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002f8e:	2001      	movs	r0, #1
 8002f90:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f92:	2305      	movs	r3, #5
 8002f94:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002f98:	6802      	ldr	r2, [r0, #0]
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002fa2:	2000      	movs	r0, #0
}
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_DMA_IRQHandler>:
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb2:	4b72      	ldr	r3, [pc, #456]	@ (800317c <HAL_DMA_IRQHandler+0x1d4>)
 8002fb4:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8002fb8:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fba:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	4093      	lsls	r3, r2
 8002fc0:	422b      	tst	r3, r5
 8002fc2:	d010      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	f012 0f04 	tst.w	r2, #4
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f022 0204 	bic.w	r2, r2, #4
 8002fd4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002fd8:	2308      	movs	r3, #8
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fde:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4093      	lsls	r3, r2
 8002fec:	422b      	tst	r3, r5
 8002fee:	d009      	beq.n	8003004 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ff0:	6822      	ldr	r2, [r4, #0]
 8002ff2:	6952      	ldr	r2, [r2, #20]
 8002ff4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002ff8:	d004      	beq.n	8003004 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ffa:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ffc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003006:	2304      	movs	r3, #4
 8003008:	4093      	lsls	r3, r2
 800300a:	422b      	tst	r3, r5
 800300c:	d009      	beq.n	8003022 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300e:	6822      	ldr	r2, [r4, #0]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	f012 0f02 	tst.w	r2, #2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003018:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800301a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003024:	2310      	movs	r3, #16
 8003026:	4093      	lsls	r3, r2
 8003028:	422b      	tst	r3, r5
 800302a:	d024      	beq.n	8003076 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	f012 0f08 	tst.w	r2, #8
 8003034:	d01f      	beq.n	8003076 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003036:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003040:	d00d      	beq.n	800305e <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003048:	d104      	bne.n	8003054 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 800304a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800304c:	b19b      	cbz	r3, 8003076 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 800304e:	4620      	mov	r0, r4
 8003050:	4798      	blx	r3
 8003052:	e010      	b.n	8003076 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003054:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003056:	b173      	cbz	r3, 8003076 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8003058:	4620      	mov	r0, r4
 800305a:	4798      	blx	r3
 800305c:	e00b      	b.n	8003076 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003064:	d103      	bne.n	800306e <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	f022 0208 	bic.w	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800306e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003070:	b10b      	cbz	r3, 8003076 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8003072:	4620      	mov	r0, r4
 8003074:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003076:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003078:	2320      	movs	r3, #32
 800307a:	4093      	lsls	r3, r2
 800307c:	422b      	tst	r3, r5
 800307e:	d055      	beq.n	800312c <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	f012 0f10 	tst.w	r2, #16
 8003088:	d050      	beq.n	800312c <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800308a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800308c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b05      	cmp	r3, #5
 8003094:	d00e      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800309e:	d033      	beq.n	8003108 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80030a6:	d12a      	bne.n	80030fe <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 80030a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03e      	beq.n	800312c <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 80030ae:	4620      	mov	r0, r4
 80030b0:	4798      	blx	r3
 80030b2:	e03b      	b.n	800312c <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b4:	6822      	ldr	r2, [r4, #0]
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	f023 0316 	bic.w	r3, r3, #22
 80030bc:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	6953      	ldr	r3, [r2, #20]
 80030c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030c6:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030ca:	b1a3      	cbz	r3, 80030f6 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	f023 0308 	bic.w	r3, r3, #8
 80030d4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80030d8:	233f      	movs	r3, #63	@ 0x3f
 80030da:	4093      	lsls	r3, r2
 80030dc:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80030de:	2301      	movs	r3, #1
 80030e0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80030e4:	2300      	movs	r3, #0
 80030e6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80030ea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d043      	beq.n	8003178 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80030f0:	4620      	mov	r0, r4
 80030f2:	4798      	blx	r3
 80030f4:	e040      	b.n	8003178 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030f6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e7      	bne.n	80030cc <HAL_DMA_IRQHandler+0x124>
 80030fc:	e7eb      	b.n	80030d6 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 80030fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003100:	b1a3      	cbz	r3, 800312c <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8003102:	4620      	mov	r0, r4
 8003104:	4798      	blx	r3
 8003106:	e011      	b.n	800312c <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800310e:	d109      	bne.n	8003124 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f022 0210 	bic.w	r2, r2, #16
 8003116:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003118:	2301      	movs	r3, #1
 800311a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800311e:	2300      	movs	r3, #0
 8003120:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003124:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003126:	b10b      	cbz	r3, 800312c <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8003128:	4620      	mov	r0, r4
 800312a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800312c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800312e:	b31b      	cbz	r3, 8003178 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003130:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003132:	f013 0f01 	tst.w	r3, #1
 8003136:	d01b      	beq.n	8003170 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8003138:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_DMA_IRQHandler+0x1d8>)
 800313a:	fba3 3606 	umull	r3, r6, r3, r6
 800313e:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8003140:	2305      	movs	r3, #5
 8003142:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003150:	9b01      	ldr	r3, [sp, #4]
 8003152:	3301      	adds	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	42b3      	cmp	r3, r6
 8003158:	d804      	bhi.n	8003164 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f013 0f01 	tst.w	r3, #1
 8003162:	d1f5      	bne.n	8003150 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8003164:	2301      	movs	r3, #1
 8003166:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800316a:	2300      	movs	r3, #0
 800316c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8003170:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003172:	b10b      	cbz	r3, 8003178 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003174:	4620      	mov	r0, r4
 8003176:	4798      	blx	r3
}
 8003178:	b003      	add	sp, #12
 800317a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317c:	20000020 	.word	0x20000020
 8003180:	1b4e81b5 	.word	0x1b4e81b5

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003188:	b083      	sub	sp, #12
 800318a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318c:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800318e:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003192:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003194:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003198:	4c6b      	ldr	r4, [pc, #428]	@ (8003348 <HAL_GPIO_Init+0x1c4>)
 800319a:	e04b      	b.n	8003234 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800319c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800319e:	fa05 fa02 	lsl.w	sl, r5, r2
 80031a2:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a6:	68cf      	ldr	r7, [r1, #12]
 80031a8:	4097      	lsls	r7, r2
 80031aa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80031ae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80031b0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b6:	684f      	ldr	r7, [r1, #4]
 80031b8:	f3c7 1700 	ubfx	r7, r7, #4, #1
 80031bc:	409f      	lsls	r7, r3
 80031be:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80031c2:	6047      	str	r7, [r0, #4]
 80031c4:	e044      	b.n	8003250 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c6:	f04f 0c00 	mov.w	ip, #0
 80031ca:	fa0c fc0b 	lsl.w	ip, ip, fp
 80031ce:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d2:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 80031d6:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031dc:	684e      	ldr	r6, [r1, #4]
 80031de:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 80031e2:	bf0c      	ite	eq
 80031e4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80031e8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 80031ec:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 80031ee:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f0:	684e      	ldr	r6, [r1, #4]
 80031f2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 80031f6:	bf0c      	ite	eq
 80031f8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80031fc:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8003200:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8003202:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003204:	684e      	ldr	r6, [r1, #4]
 8003206:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 800320a:	bf0c      	ite	eq
 800320c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8003210:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8003214:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003216:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003218:	684e      	ldr	r6, [r1, #4]
 800321a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 800321e:	bf0c      	ite	eq
 8003220:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8003224:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8003228:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322a:	3301      	adds	r3, #1
 800322c:	3202      	adds	r2, #2
 800322e:	2b10      	cmp	r3, #16
 8003230:	f000 8086 	beq.w	8003340 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8003234:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003238:	680f      	ldr	r7, [r1, #0]
 800323a:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 800323e:	ea3c 0707 	bics.w	r7, ip, r7
 8003242:	d1f2      	bne.n	800322a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003244:	684f      	ldr	r7, [r1, #4]
 8003246:	f007 0703 	and.w	r7, r7, #3
 800324a:	3f01      	subs	r7, #1
 800324c:	2f01      	cmp	r7, #1
 800324e:	d9a5      	bls.n	800319c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003250:	684f      	ldr	r7, [r1, #4]
 8003252:	f007 0703 	and.w	r7, r7, #3
 8003256:	2f03      	cmp	r7, #3
 8003258:	d023      	beq.n	80032a2 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 800325a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325c:	fa05 fc02 	lsl.w	ip, r5, r2
 8003260:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003264:	688f      	ldr	r7, [r1, #8]
 8003266:	4097      	lsls	r7, r2
 8003268:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 800326c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326e:	684f      	ldr	r7, [r1, #4]
 8003270:	f007 0703 	and.w	r7, r7, #3
 8003274:	2f02      	cmp	r7, #2
 8003276:	d114      	bne.n	80032a2 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8003278:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800327c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003280:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003284:	f003 0b07 	and.w	fp, r3, #7
 8003288:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800328c:	fa08 fa0b 	lsl.w	sl, r8, fp
 8003290:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003294:	690f      	ldr	r7, [r1, #16]
 8003296:	fa07 f70b 	lsl.w	r7, r7, fp
 800329a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 800329e:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 80032a2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a4:	fa05 fc02 	lsl.w	ip, r5, r2
 80032a8:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ac:	684f      	ldr	r7, [r1, #4]
 80032ae:	f007 0703 	and.w	r7, r7, #3
 80032b2:	4097      	lsls	r7, r2
 80032b4:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 80032b8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ba:	684f      	ldr	r7, [r1, #4]
 80032bc:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 80032c0:	d0b3      	beq.n	800322a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	2700      	movs	r7, #0
 80032c4:	9701      	str	r7, [sp, #4]
 80032c6:	4e21      	ldr	r6, [pc, #132]	@ (800334c <HAL_GPIO_Init+0x1c8>)
 80032c8:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80032ca:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 80032ce:	6477      	str	r7, [r6, #68]	@ 0x44
 80032d0:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 80032d2:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 80032d6:	9701      	str	r7, [sp, #4]
 80032d8:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80032da:	f023 0703 	bic.w	r7, r3, #3
 80032de:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80032e2:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80032e6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ea:	f003 0b03 	and.w	fp, r3, #3
 80032ee:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80032f2:	fa08 fc0b 	lsl.w	ip, r8, fp
 80032f6:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 80032fe:	42b0      	cmp	r0, r6
 8003300:	f43f af61 	beq.w	80031c6 <HAL_GPIO_Init+0x42>
 8003304:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003308:	42b0      	cmp	r0, r6
 800330a:	d010      	beq.n	800332e <HAL_GPIO_Init+0x1aa>
 800330c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003310:	42b0      	cmp	r0, r6
 8003312:	d00f      	beq.n	8003334 <HAL_GPIO_Init+0x1b0>
 8003314:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8003350 <HAL_GPIO_Init+0x1cc>
 8003318:	4560      	cmp	r0, ip
 800331a:	d00e      	beq.n	800333a <HAL_GPIO_Init+0x1b6>
 800331c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003320:	4560      	cmp	r0, ip
 8003322:	bf14      	ite	ne
 8003324:	f04f 0c07 	movne.w	ip, #7
 8003328:	f04f 0c04 	moveq.w	ip, #4
 800332c:	e74d      	b.n	80031ca <HAL_GPIO_Init+0x46>
 800332e:	f04f 0c01 	mov.w	ip, #1
 8003332:	e74a      	b.n	80031ca <HAL_GPIO_Init+0x46>
 8003334:	f04f 0c02 	mov.w	ip, #2
 8003338:	e747      	b.n	80031ca <HAL_GPIO_Init+0x46>
 800333a:	f04f 0c03 	mov.w	ip, #3
 800333e:	e744      	b.n	80031ca <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8003340:	b003      	add	sp, #12
 8003342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003346:	bf00      	nop
 8003348:	40013c00 	.word	0x40013c00
 800334c:	40023800 	.word	0x40023800
 8003350:	40020c00 	.word	0x40020c00

08003354 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003354:	6903      	ldr	r3, [r0, #16]
 8003356:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003358:	bf14      	ite	ne
 800335a:	2001      	movne	r0, #1
 800335c:	2000      	moveq	r0, #0
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003360:	b10a      	cbz	r2, 8003366 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003362:	6181      	str	r1, [r0, #24]
 8003364:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003366:	0409      	lsls	r1, r1, #16
 8003368:	6181      	str	r1, [r0, #24]
  }
}
 800336a:	4770      	bx	lr

0800336c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800336c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800336e:	ea01 0203 	and.w	r2, r1, r3
 8003372:	ea21 0103 	bic.w	r1, r1, r3
 8003376:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800337a:	6181      	str	r1, [r0, #24]
}
 800337c:	4770      	bx	lr
	...

08003380 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	2800      	cmp	r0, #0
 8003382:	f000 81e1 	beq.w	8003748 <HAL_RCC_OscConfig+0x3c8>
{
 8003386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	6803      	ldr	r3, [r0, #0]
 8003390:	f013 0f01 	tst.w	r3, #1
 8003394:	d03b      	beq.n	800340e <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003396:	4b9f      	ldr	r3, [pc, #636]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d02c      	beq.n	80033fc <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b9c      	ldr	r3, [pc, #624]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d021      	beq.n	80033f2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	6863      	ldr	r3, [r4, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d04f      	beq.n	8003456 <HAL_RCC_OscConfig+0xd6>
 80033b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ba:	d052      	beq.n	8003462 <HAL_RCC_OscConfig+0xe2>
 80033bc:	4b95      	ldr	r3, [pc, #596]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033ce:	6863      	ldr	r3, [r4, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d050      	beq.n	8003476 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fba0 	bl	8002b18 <HAL_GetTick>
 80033d8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4e8e      	ldr	r6, [pc, #568]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80033dc:	6833      	ldr	r3, [r6, #0]
 80033de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80033e2:	d114      	bne.n	800340e <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7ff fb98 	bl	8002b18 <HAL_GetTick>
 80033e8:	1b40      	subs	r0, r0, r5
 80033ea:	2864      	cmp	r0, #100	@ 0x64
 80033ec:	d9f6      	bls.n	80033dc <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80033ee:	2003      	movs	r0, #3
 80033f0:	e1b1      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f2:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80033fa:	d0d8      	beq.n	80033ae <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b85      	ldr	r3, [pc, #532]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003404:	d003      	beq.n	800340e <HAL_RCC_OscConfig+0x8e>
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 819f 	beq.w	800374c <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	f013 0f02 	tst.w	r3, #2
 8003414:	d054      	beq.n	80034c0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003416:	4b7f      	ldr	r3, [pc, #508]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f013 0f0c 	tst.w	r3, #12
 800341e:	d03e      	beq.n	800349e <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003420:	4b7c      	ldr	r3, [pc, #496]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003428:	2b08      	cmp	r3, #8
 800342a:	d033      	beq.n	8003494 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800342c:	68e3      	ldr	r3, [r4, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d068      	beq.n	8003504 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4b79      	ldr	r3, [pc, #484]	@ (8003618 <HAL_RCC_OscConfig+0x298>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff fb6e 	bl	8002b18 <HAL_GetTick>
 800343c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4e75      	ldr	r6, [pc, #468]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	f013 0f02 	tst.w	r3, #2
 8003446:	d154      	bne.n	80034f2 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7ff fb66 	bl	8002b18 <HAL_GetTick>
 800344c:	1b40      	subs	r0, r0, r5
 800344e:	2802      	cmp	r0, #2
 8003450:	d9f6      	bls.n	8003440 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8003452:	2003      	movs	r0, #3
 8003454:	e17f      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	4a6f      	ldr	r2, [pc, #444]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	e7b5      	b.n	80033ce <HAL_RCC_OscConfig+0x4e>
 8003462:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e7ab      	b.n	80033ce <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8003476:	f7ff fb4f 	bl	8002b18 <HAL_GetTick>
 800347a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347c:	4e65      	ldr	r6, [pc, #404]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 800347e:	6833      	ldr	r3, [r6, #0]
 8003480:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003484:	d0c3      	beq.n	800340e <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003486:	f7ff fb47 	bl	8002b18 <HAL_GetTick>
 800348a:	1b40      	subs	r0, r0, r5
 800348c:	2864      	cmp	r0, #100	@ 0x64
 800348e:	d9f6      	bls.n	800347e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8003490:	2003      	movs	r0, #3
 8003492:	e160      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003494:	4b5f      	ldr	r3, [pc, #380]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800349c:	d1c6      	bne.n	800342c <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b5d      	ldr	r3, [pc, #372]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f013 0f02 	tst.w	r3, #2
 80034a6:	d003      	beq.n	80034b0 <HAL_RCC_OscConfig+0x130>
 80034a8:	68e3      	ldr	r3, [r4, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f040 8150 	bne.w	8003750 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4a58      	ldr	r2, [pc, #352]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	6921      	ldr	r1, [r4, #16]
 80034b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80034ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034be:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	f013 0f08 	tst.w	r3, #8
 80034c6:	d042      	beq.n	800354e <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034c8:	6963      	ldr	r3, [r4, #20]
 80034ca:	b36b      	cbz	r3, 8003528 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034cc:	4b52      	ldr	r3, [pc, #328]	@ (8003618 <HAL_RCC_OscConfig+0x298>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7ff fb20 	bl	8002b18 <HAL_GetTick>
 80034d8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034da:	4e4e      	ldr	r6, [pc, #312]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80034dc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80034de:	f013 0f02 	tst.w	r3, #2
 80034e2:	d134      	bne.n	800354e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e4:	f7ff fb18 	bl	8002b18 <HAL_GetTick>
 80034e8:	1b40      	subs	r0, r0, r5
 80034ea:	2802      	cmp	r0, #2
 80034ec:	d9f6      	bls.n	80034dc <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80034ee:	2003      	movs	r0, #3
 80034f0:	e131      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4a48      	ldr	r2, [pc, #288]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	6921      	ldr	r1, [r4, #16]
 80034f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80034fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e7dd      	b.n	80034c0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003504:	4b44      	ldr	r3, [pc, #272]	@ (8003618 <HAL_RCC_OscConfig+0x298>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800350a:	f7ff fb05 	bl	8002b18 <HAL_GetTick>
 800350e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003510:	4e40      	ldr	r6, [pc, #256]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003512:	6833      	ldr	r3, [r6, #0]
 8003514:	f013 0f02 	tst.w	r3, #2
 8003518:	d0d2      	beq.n	80034c0 <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7ff fafd 	bl	8002b18 <HAL_GetTick>
 800351e:	1b40      	subs	r0, r0, r5
 8003520:	2802      	cmp	r0, #2
 8003522:	d9f6      	bls.n	8003512 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8003524:	2003      	movs	r0, #3
 8003526:	e116      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <HAL_RCC_OscConfig+0x298>)
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003530:	f7ff faf2 	bl	8002b18 <HAL_GetTick>
 8003534:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003536:	4e37      	ldr	r6, [pc, #220]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003538:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800353a:	f013 0f02 	tst.w	r3, #2
 800353e:	d006      	beq.n	800354e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003540:	f7ff faea 	bl	8002b18 <HAL_GetTick>
 8003544:	1b40      	subs	r0, r0, r5
 8003546:	2802      	cmp	r0, #2
 8003548:	d9f6      	bls.n	8003538 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800354a:	2003      	movs	r0, #3
 800354c:	e103      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	f013 0f04 	tst.w	r3, #4
 8003554:	d076      	beq.n	8003644 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003556:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800355e:	d133      	bne.n	80035c8 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003568:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800356c:	641a      	str	r2, [r3, #64]	@ 0x40
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003578:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b28      	ldr	r3, [pc, #160]	@ (800361c <HAL_RCC_OscConfig+0x29c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003582:	d023      	beq.n	80035cc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d034      	beq.n	80035f4 <HAL_RCC_OscConfig+0x274>
 800358a:	2b05      	cmp	r3, #5
 800358c:	d038      	beq.n	8003600 <HAL_RCC_OscConfig+0x280>
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003590:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	671a      	str	r2, [r3, #112]	@ 0x70
 8003598:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a0:	68a3      	ldr	r3, [r4, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03c      	beq.n	8003620 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7ff fab7 	bl	8002b18 <HAL_GetTick>
 80035aa:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	4f19      	ldr	r7, [pc, #100]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035b4:	f013 0f02 	tst.w	r3, #2
 80035b8:	d143      	bne.n	8003642 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7ff faad 	bl	8002b18 <HAL_GetTick>
 80035be:	1b80      	subs	r0, r0, r6
 80035c0:	4540      	cmp	r0, r8
 80035c2:	d9f6      	bls.n	80035b2 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80035c4:	2003      	movs	r0, #3
 80035c6:	e0c6      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80035c8:	2500      	movs	r5, #0
 80035ca:	e7d6      	b.n	800357a <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035cc:	4a13      	ldr	r2, [pc, #76]	@ (800361c <HAL_RCC_OscConfig+0x29c>)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80035d6:	f7ff fa9f 	bl	8002b18 <HAL_GetTick>
 80035da:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	4f0f      	ldr	r7, [pc, #60]	@ (800361c <HAL_RCC_OscConfig+0x29c>)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80035e4:	d1ce      	bne.n	8003584 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7ff fa97 	bl	8002b18 <HAL_GetTick>
 80035ea:	1b80      	subs	r0, r0, r6
 80035ec:	2802      	cmp	r0, #2
 80035ee:	d9f6      	bls.n	80035de <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80035f0:	2003      	movs	r0, #3
 80035f2:	e0b0      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 80035f6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fe:	e7cf      	b.n	80035a0 <HAL_RCC_OscConfig+0x220>
 8003600:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <HAL_RCC_OscConfig+0x294>)
 8003602:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003604:	f042 0204 	orr.w	r2, r2, #4
 8003608:	671a      	str	r2, [r3, #112]	@ 0x70
 800360a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	671a      	str	r2, [r3, #112]	@ 0x70
 8003612:	e7c5      	b.n	80035a0 <HAL_RCC_OscConfig+0x220>
 8003614:	40023800 	.word	0x40023800
 8003618:	42470000 	.word	0x42470000
 800361c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003620:	f7ff fa7a 	bl	8002b18 <HAL_GetTick>
 8003624:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003626:	4f52      	ldr	r7, [pc, #328]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800362e:	f013 0f02 	tst.w	r3, #2
 8003632:	d006      	beq.n	8003642 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7ff fa70 	bl	8002b18 <HAL_GetTick>
 8003638:	1b80      	subs	r0, r0, r6
 800363a:	4540      	cmp	r0, r8
 800363c:	d9f6      	bls.n	800362c <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800363e:	2003      	movs	r0, #3
 8003640:	e089      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003642:	b9ed      	cbnz	r5, 8003680 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003644:	69a3      	ldr	r3, [r4, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8084 	beq.w	8003754 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364c:	4a48      	ldr	r2, [pc, #288]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	f002 020c 	and.w	r2, r2, #12
 8003654:	2a08      	cmp	r2, #8
 8003656:	d051      	beq.n	80036fc <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003658:	2b02      	cmp	r3, #2
 800365a:	d017      	beq.n	800368c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b45      	ldr	r3, [pc, #276]	@ (8003774 <HAL_RCC_OscConfig+0x3f4>)
 800365e:	2200      	movs	r2, #0
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7ff fa59 	bl	8002b18 <HAL_GetTick>
 8003666:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003668:	4d41      	ldr	r5, [pc, #260]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003670:	d042      	beq.n	80036f8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7ff fa51 	bl	8002b18 <HAL_GetTick>
 8003676:	1b00      	subs	r0, r0, r4
 8003678:	2802      	cmp	r0, #2
 800367a:	d9f6      	bls.n	800366a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800367c:	2003      	movs	r0, #3
 800367e:	e06a      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4a3b      	ldr	r2, [pc, #236]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 8003682:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	@ 0x40
 800368a:	e7db      	b.n	8003644 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800368c:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <HAL_RCC_OscConfig+0x3f4>)
 800368e:	2200      	movs	r2, #0
 8003690:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003692:	f7ff fa41 	bl	8002b18 <HAL_GetTick>
 8003696:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003698:	4e35      	ldr	r6, [pc, #212]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 800369a:	6833      	ldr	r3, [r6, #0]
 800369c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80036a0:	d006      	beq.n	80036b0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7ff fa39 	bl	8002b18 <HAL_GetTick>
 80036a6:	1b40      	subs	r0, r0, r5
 80036a8:	2802      	cmp	r0, #2
 80036aa:	d9f6      	bls.n	800369a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80036ac:	2003      	movs	r0, #3
 80036ae:	e052      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b0:	69e3      	ldr	r3, [r4, #28]
 80036b2:	6a22      	ldr	r2, [r4, #32]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80036b8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80036be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80036c4:	0852      	lsrs	r2, r2, #1
 80036c6:	3a01      	subs	r2, #1
 80036c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036cc:	4a28      	ldr	r2, [pc, #160]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 80036ce:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80036d0:	4b28      	ldr	r3, [pc, #160]	@ (8003774 <HAL_RCC_OscConfig+0x3f4>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80036d6:	f7ff fa1f 	bl	8002b18 <HAL_GetTick>
 80036da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036dc:	4d24      	ldr	r5, [pc, #144]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 80036de:	682b      	ldr	r3, [r5, #0]
 80036e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80036e4:	d106      	bne.n	80036f4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7ff fa17 	bl	8002b18 <HAL_GetTick>
 80036ea:	1b00      	subs	r0, r0, r4
 80036ec:	2802      	cmp	r0, #2
 80036ee:	d9f6      	bls.n	80036de <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80036f0:	2003      	movs	r0, #3
 80036f2:	e030      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2000      	movs	r0, #0
 80036f6:	e02e      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
 80036f8:	2000      	movs	r0, #0
 80036fa:	e02c      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d02d      	beq.n	800375c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_RCC_OscConfig+0x3f0>)
 8003702:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003704:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003708:	69e2      	ldr	r2, [r4, #28]
 800370a:	4291      	cmp	r1, r2
 800370c:	d128      	bne.n	8003760 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	6a21      	ldr	r1, [r4, #32]
 8003714:	428a      	cmp	r2, r1
 8003716:	d125      	bne.n	8003764 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003718:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800371e:	401a      	ands	r2, r3
 8003720:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003724:	d120      	bne.n	8003768 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003726:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800372a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800372c:	0852      	lsrs	r2, r2, #1
 800372e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003730:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003734:	d11a      	bne.n	800376c <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003736:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003738:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003740:	bf14      	ite	ne
 8003742:	2001      	movne	r0, #1
 8003744:	2000      	moveq	r0, #0
 8003746:	e006      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
}
 800374a:	4770      	bx	lr
        return HAL_ERROR;
 800374c:	2001      	movs	r0, #1
 800374e:	e002      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8003750:	2001      	movs	r0, #1
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8003754:	2000      	movs	r0, #0
}
 8003756:	b002      	add	sp, #8
 8003758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800375c:	2001      	movs	r0, #1
 800375e:	e7fa      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8003760:	2001      	movs	r0, #1
 8003762:	e7f8      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
 8003764:	2001      	movs	r0, #1
 8003766:	e7f6      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
 8003768:	2001      	movs	r0, #1
 800376a:	e7f4      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
 800376c:	2001      	movs	r0, #1
 800376e:	e7f2      	b.n	8003756 <HAL_RCC_OscConfig+0x3d6>
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800377a:	4b33      	ldr	r3, [pc, #204]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d05b      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0xc6>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d15b      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378a:	4b2f      	ldr	r3, [pc, #188]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003798:	d02c      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 800379c:	6858      	ldr	r0, [r3, #4]
 800379e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80037a2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80037a6:	ebbc 0c00 	subs.w	ip, ip, r0
 80037aa:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80037ae:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80037b2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80037b6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80037ba:	ebb1 010c 	subs.w	r1, r1, ip
 80037be:	eb63 030e 	sbc.w	r3, r3, lr
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c8:	00c9      	lsls	r1, r1, #3
 80037ca:	eb11 0c00 	adds.w	ip, r1, r0
 80037ce:	f143 0300 	adc.w	r3, r3, #0
 80037d2:	0259      	lsls	r1, r3, #9
 80037d4:	2300      	movs	r3, #0
 80037d6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80037da:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80037de:	f7fc fd57 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037e2:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037ea:	3301      	adds	r3, #1
 80037ec:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80037ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80037f2:	e027      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f4:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037f6:	6858      	ldr	r0, [r3, #4]
 80037f8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80037fc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003800:	ebbc 0c00 	subs.w	ip, ip, r0
 8003804:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003808:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800380c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003810:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003814:	ebb1 010c 	subs.w	r1, r1, ip
 8003818:	eb63 030e 	sbc.w	r3, r3, lr
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003822:	00c9      	lsls	r1, r1, #3
 8003824:	eb11 0c00 	adds.w	ip, r1, r0
 8003828:	f143 0300 	adc.w	r3, r3, #0
 800382c:	0299      	lsls	r1, r3, #10
 800382e:	2300      	movs	r3, #0
 8003830:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003834:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003838:	f7fc fd2a 	bl	8000290 <__aeabi_uldivmod>
 800383c:	e7d1      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x6a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383e:	4803      	ldr	r0, [pc, #12]	@ (800384c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003840:	e000      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xcc>
      sysclockfreq = HSI_VALUE;
 8003842:	4803      	ldr	r0, [pc, #12]	@ (8003850 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003844:	bd08      	pop	{r3, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	007a1200 	.word	0x007a1200
 8003850:	00f42400 	.word	0x00f42400

08003854 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003854:	2800      	cmp	r0, #0
 8003856:	f000 809d 	beq.w	8003994 <HAL_RCC_ClockConfig+0x140>
{
 800385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385e:	460d      	mov	r5, r1
 8003860:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003862:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <HAL_RCC_ClockConfig+0x150>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	428b      	cmp	r3, r1
 800386c:	d208      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	b2cb      	uxtb	r3, r1
 8003870:	4a4c      	ldr	r2, [pc, #304]	@ (80039a4 <HAL_RCC_ClockConfig+0x150>)
 8003872:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003874:	6813      	ldr	r3, [r2, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	428b      	cmp	r3, r1
 800387c:	f040 808c 	bne.w	8003998 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	f013 0f02 	tst.w	r3, #2
 8003886:	d017      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	f013 0f04 	tst.w	r3, #4
 800388c:	d004      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388e:	4a46      	ldr	r2, [pc, #280]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 8003890:	6893      	ldr	r3, [r2, #8]
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f013 0f08 	tst.w	r3, #8
 800389e:	d004      	beq.n	80038aa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	4a41      	ldr	r2, [pc, #260]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 80038a2:	6893      	ldr	r3, [r2, #8]
 80038a4:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038a8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038aa:	4a3f      	ldr	r2, [pc, #252]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 80038ac:	6893      	ldr	r3, [r2, #8]
 80038ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038b2:	68a1      	ldr	r1, [r4, #8]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	f013 0f01 	tst.w	r3, #1
 80038be:	d032      	beq.n	8003926 <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c0:	6862      	ldr	r2, [r4, #4]
 80038c2:	2a01      	cmp	r2, #1
 80038c4:	d021      	beq.n	800390a <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	1e93      	subs	r3, r2, #2
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d925      	bls.n	8003918 <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b36      	ldr	r3, [pc, #216]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f013 0f02 	tst.w	r3, #2
 80038d4:	d062      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4934      	ldr	r1, [pc, #208]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 80038d8:	688b      	ldr	r3, [r1, #8]
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80038e2:	f7ff f919 	bl	8002b18 <HAL_GetTick>
 80038e6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e8:	4f2f      	ldr	r7, [pc, #188]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ea:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	6862      	ldr	r2, [r4, #4]
 80038f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038fa:	d014      	beq.n	8003926 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fc:	f7ff f90c 	bl	8002b18 <HAL_GetTick>
 8003900:	1b80      	subs	r0, r0, r6
 8003902:	4540      	cmp	r0, r8
 8003904:	d9f3      	bls.n	80038ee <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8003906:	2003      	movs	r0, #3
 8003908:	e042      	b.n	8003990 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b27      	ldr	r3, [pc, #156]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003912:	d1e0      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003914:	2001      	movs	r0, #1
 8003916:	e03b      	b.n	8003990 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003920:	d1d9      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003922:	2001      	movs	r0, #1
 8003924:	e034      	b.n	8003990 <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003926:	4b1f      	ldr	r3, [pc, #124]	@ (80039a4 <HAL_RCC_ClockConfig+0x150>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	42ab      	cmp	r3, r5
 8003930:	d907      	bls.n	8003942 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	b2ea      	uxtb	r2, r5
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_ClockConfig+0x150>)
 8003936:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	42ab      	cmp	r3, r5
 8003940:	d12e      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f013 0f04 	tst.w	r3, #4
 8003948:	d006      	beq.n	8003958 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 800394c:	6893      	ldr	r3, [r2, #8]
 800394e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003952:	68e1      	ldr	r1, [r4, #12]
 8003954:	430b      	orrs	r3, r1
 8003956:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	f013 0f08 	tst.w	r3, #8
 800395e:	d007      	beq.n	8003970 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003960:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 8003962:	6893      	ldr	r3, [r2, #8]
 8003964:	6921      	ldr	r1, [r4, #16]
 8003966:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800396a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800396e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003970:	f7ff ff02 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCC_ClockConfig+0x154>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800397c:	4a0b      	ldr	r2, [pc, #44]	@ (80039ac <HAL_RCC_ClockConfig+0x158>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	40d8      	lsrs	r0, r3
 8003982:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCC_ClockConfig+0x15c>)
 8003984:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003986:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <HAL_RCC_ClockConfig+0x160>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f7ff f879 	bl	8002a80 <HAL_InitTick>
  return HAL_OK;
 800398e:	2000      	movs	r0, #0
}
 8003990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
}
 8003996:	4770      	bx	lr
      return HAL_ERROR;
 8003998:	2001      	movs	r0, #1
 800399a:	e7f9      	b.n	8003990 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
 800399e:	e7f7      	b.n	8003990 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80039a0:	2001      	movs	r0, #1
 80039a2:	e7f5      	b.n	8003990 <HAL_RCC_ClockConfig+0x13c>
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	080066c0 	.word	0x080066c0
 80039b0:	20000020 	.word	0x20000020
 80039b4:	20000030 	.word	0x20000030

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80039c0:	4a03      	ldr	r2, [pc, #12]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	4a03      	ldr	r2, [pc, #12]	@ (80039d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80039c6:	6810      	ldr	r0, [r2, #0]
}
 80039c8:	40d8      	lsrs	r0, r3
 80039ca:	4770      	bx	lr
 80039cc:	40023800 	.word	0x40023800
 80039d0:	080066b8 	.word	0x080066b8
 80039d4:	20000020 	.word	0x20000020

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80039e0:	4a03      	ldr	r2, [pc, #12]	@ (80039f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	4a03      	ldr	r2, [pc, #12]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80039e6:	6810      	ldr	r0, [r2, #0]
}
 80039e8:	40d8      	lsrs	r0, r3
 80039ea:	4770      	bx	lr
 80039ec:	40023800 	.word	0x40023800
 80039f0:	080066b8 	.word	0x080066b8
 80039f4:	20000020 	.word	0x20000020

080039f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fc:	6a02      	ldr	r2, [r0, #32]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a06:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a08:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0c:	680d      	ldr	r5, [r1, #0]
 8003a0e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a10:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a14:	688d      	ldr	r5, [r1, #8]
 8003a16:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a18:	4d0b      	ldr	r5, [pc, #44]	@ (8003a48 <TIM_OC1_SetConfig+0x50>)
 8003a1a:	42a8      	cmp	r0, r5
 8003a1c:	d006      	beq.n	8003a2c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a20:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a22:	684a      	ldr	r2, [r1, #4]
 8003a24:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a26:	6203      	str	r3, [r0, #32]
}
 8003a28:	bc70      	pop	{r4, r5, r6}
 8003a2a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a2c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003a30:	68cd      	ldr	r5, [r1, #12]
 8003a32:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a34:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a38:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a3c:	694d      	ldr	r5, [r1, #20]
 8003a3e:	698e      	ldr	r6, [r1, #24]
 8003a40:	4335      	orrs	r5, r6
 8003a42:	432c      	orrs	r4, r5
 8003a44:	e7eb      	b.n	8003a1e <TIM_OC1_SetConfig+0x26>
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000

08003a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a50:	6a02      	ldr	r2, [r0, #32]
 8003a52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a56:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a5c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	680d      	ldr	r5, [r1, #0]
 8003a62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a68:	688d      	ldr	r5, [r1, #8]
 8003a6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a6e:	4d0c      	ldr	r5, [pc, #48]	@ (8003aa0 <TIM_OC3_SetConfig+0x54>)
 8003a70:	42a8      	cmp	r0, r5
 8003a72:	d006      	beq.n	8003a82 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a76:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a78:	684a      	ldr	r2, [r1, #4]
 8003a7a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	6203      	str	r3, [r0, #32]
}
 8003a7e:	bc70      	pop	{r4, r5, r6}
 8003a80:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a86:	68cd      	ldr	r5, [r1, #12]
 8003a88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a90:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a94:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a96:	698e      	ldr	r6, [r1, #24]
 8003a98:	4335      	orrs	r5, r6
 8003a9a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8003a9e:	e7e9      	b.n	8003a74 <TIM_OC3_SetConfig+0x28>
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aa8:	6a02      	ldr	r2, [r0, #32]
 8003aaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aae:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	680d      	ldr	r5, [r1, #0]
 8003aba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac2:	688d      	ldr	r5, [r1, #8]
 8003ac4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	4d07      	ldr	r5, [pc, #28]	@ (8003ae8 <TIM_OC4_SetConfig+0x44>)
 8003aca:	42a8      	cmp	r0, r5
 8003acc:	d006      	beq.n	8003adc <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad2:	684a      	ldr	r2, [r1, #4]
 8003ad4:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad6:	6203      	str	r3, [r0, #32]
}
 8003ad8:	bc30      	pop	{r4, r5}
 8003ada:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003adc:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae0:	694d      	ldr	r5, [r1, #20]
 8003ae2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003ae6:	e7f2      	b.n	8003ace <TIM_OC4_SetConfig+0x2a>
 8003ae8:	40010000 	.word	0x40010000

08003aec <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003aec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d12a      	bne.n	8003b4c <HAL_TIM_Base_Start+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8003af6:	2302      	movs	r3, #2
 8003af8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afc:	6803      	ldr	r3, [r0, #0]
 8003afe:	4a15      	ldr	r2, [pc, #84]	@ (8003b54 <HAL_TIM_Base_Start+0x68>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_TIM_Base_Start+0x4a>
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b08:	d015      	beq.n	8003b36 <HAL_TIM_Base_Start+0x4a>
 8003b0a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d011      	beq.n	8003b36 <HAL_TIM_Base_Start+0x4a>
 8003b12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00d      	beq.n	8003b36 <HAL_TIM_Base_Start+0x4a>
 8003b1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_TIM_Base_Start+0x4a>
 8003b22:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d005      	beq.n	8003b36 <HAL_TIM_Base_Start+0x4a>
    __HAL_TIM_ENABLE(htim);
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b32:	2000      	movs	r0, #0
 8003b34:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	2a06      	cmp	r2, #6
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b48:	2000      	movs	r0, #0
 8003b4a:	4770      	bx	lr
    return HAL_ERROR;
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	4770      	bx	lr
  return HAL_OK;
 8003b50:	2000      	movs	r0, #0
}
 8003b52:	4770      	bx	lr
 8003b54:	40010000 	.word	0x40010000

08003b58 <HAL_TIM_PWM_MspInit>:
}
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_IC_CaptureCallback>:
}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_TriggerCallback>:
}
 8003b60:	4770      	bx	lr

08003b62 <HAL_TIM_IRQHandler>:
{
 8003b62:	b570      	push	{r4, r5, r6, lr}
 8003b64:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003b66:	6803      	ldr	r3, [r0, #0]
 8003b68:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b6a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b6c:	f015 0f02 	tst.w	r5, #2
 8003b70:	d010      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b72:	f016 0f02 	tst.w	r6, #2
 8003b76:	d00d      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b78:	f06f 0202 	mvn.w	r2, #2
 8003b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f013 0f03 	tst.w	r3, #3
 8003b8a:	d05e      	beq.n	8003c4a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8c:	f7ff ffe6 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b90:	2300      	movs	r3, #0
 8003b92:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b94:	f015 0f04 	tst.w	r5, #4
 8003b98:	d012      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b9a:	f016 0f04 	tst.w	r6, #4
 8003b9e:	d00f      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	f06f 0204 	mvn.w	r2, #4
 8003ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003bb4:	d04f      	beq.n	8003c56 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff ffd0 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bc0:	f015 0f08 	tst.w	r5, #8
 8003bc4:	d012      	beq.n	8003bec <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bc6:	f016 0f08 	tst.w	r6, #8
 8003bca:	d00f      	beq.n	8003bec <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	f06f 0208 	mvn.w	r2, #8
 8003bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f013 0f03 	tst.w	r3, #3
 8003be0:	d040      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7ff ffba 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be8:	2300      	movs	r3, #0
 8003bea:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bec:	f015 0f10 	tst.w	r5, #16
 8003bf0:	d012      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bf2:	f016 0f10 	tst.w	r6, #16
 8003bf6:	d00f      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	f06f 0210 	mvn.w	r2, #16
 8003bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c00:	2308      	movs	r3, #8
 8003c02:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003c0c:	d031      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff ffa4 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c14:	2300      	movs	r3, #0
 8003c16:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c18:	f015 0f01 	tst.w	r5, #1
 8003c1c:	d002      	beq.n	8003c24 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c1e:	f016 0f01 	tst.w	r6, #1
 8003c22:	d12d      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c24:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003c28:	d002      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003c2e:	d12f      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c30:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003c34:	d002      	beq.n	8003c3c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c36:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003c3a:	d131      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c3c:	f015 0f20 	tst.w	r5, #32
 8003c40:	d002      	beq.n	8003c48 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c42:	f016 0f20 	tst.w	r6, #32
 8003c46:	d133      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x14e>
}
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	f7ff ff86 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f7ff ff85 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
 8003c54:	e79c      	b.n	8003b90 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff ff7f 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7ff ff7e 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
 8003c62:	e7ab      	b.n	8003bbc <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff ff78 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff ff77 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
 8003c70:	e7ba      	b.n	8003be8 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff ff71 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff ff70 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
 8003c7e:	e7c9      	b.n	8003c14 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f06f 0201 	mvn.w	r2, #1
 8003c86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fe fca7 	bl	80025dc <HAL_TIM_PeriodElapsedCallback>
 8003c8e:	e7c9      	b.n	8003c24 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f000 f9c2 	bl	8004022 <HAL_TIMEx_BreakCallback>
 8003c9e:	e7c7      	b.n	8003c30 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ca6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff59 	bl	8003b60 <HAL_TIM_TriggerCallback>
 8003cae:	e7c5      	b.n	8003c3c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	f06f 0220 	mvn.w	r2, #32
 8003cb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 f9b1 	bl	8004020 <HAL_TIMEx_CommutCallback>
}
 8003cbe:	e7c3      	b.n	8003c48 <HAL_TIM_IRQHandler+0xe6>

08003cc0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003cc0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc2:	4a34      	ldr	r2, [pc, #208]	@ (8003d94 <TIM_Base_SetConfig+0xd4>)
 8003cc4:	4290      	cmp	r0, r2
 8003cc6:	d024      	beq.n	8003d12 <TIM_Base_SetConfig+0x52>
 8003cc8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003ccc:	d036      	beq.n	8003d3c <TIM_Base_SetConfig+0x7c>
 8003cce:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003cd2:	4290      	cmp	r0, r2
 8003cd4:	d053      	beq.n	8003d7e <TIM_Base_SetConfig+0xbe>
 8003cd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cda:	4290      	cmp	r0, r2
 8003cdc:	d04a      	beq.n	8003d74 <TIM_Base_SetConfig+0xb4>
 8003cde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ce2:	4290      	cmp	r0, r2
 8003ce4:	d050      	beq.n	8003d88 <TIM_Base_SetConfig+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003cea:	4290      	cmp	r0, r2
 8003cec:	d02a      	beq.n	8003d44 <TIM_Base_SetConfig+0x84>
 8003cee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cf2:	4290      	cmp	r0, r2
 8003cf4:	d026      	beq.n	8003d44 <TIM_Base_SetConfig+0x84>
 8003cf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cfa:	4290      	cmp	r0, r2
 8003cfc:	d022      	beq.n	8003d44 <TIM_Base_SetConfig+0x84>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d02:	694a      	ldr	r2, [r1, #20]
 8003d04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d08:	688b      	ldr	r3, [r1, #8]
 8003d0a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d0c:	680b      	ldr	r3, [r1, #0]
 8003d0e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	e025      	b.n	8003d5e <TIM_Base_SetConfig+0x9e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d16:	684a      	ldr	r2, [r1, #4]
 8003d18:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1e:	68ca      	ldr	r2, [r1, #12]
 8003d20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d26:	694a      	ldr	r2, [r1, #20]
 8003d28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d2c:	688b      	ldr	r3, [r1, #8]
 8003d2e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d30:	680b      	ldr	r3, [r1, #0]
 8003d32:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	690a      	ldr	r2, [r1, #16]
 8003d36:	4b17      	ldr	r3, [pc, #92]	@ (8003d94 <TIM_Base_SetConfig+0xd4>)
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d3a:	e010      	b.n	8003d5e <TIM_Base_SetConfig+0x9e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d40:	684a      	ldr	r2, [r1, #4]
 8003d42:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d48:	68ca      	ldr	r2, [r1, #12]
 8003d4a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d50:	694a      	ldr	r2, [r1, #20]
 8003d52:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d56:	688b      	ldr	r3, [r1, #8]
 8003d58:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d5a:	680b      	ldr	r3, [r1, #0]
 8003d5c:	6283      	str	r3, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d62:	6903      	ldr	r3, [r0, #16]
 8003d64:	f013 0f01 	tst.w	r3, #1
 8003d68:	d013      	beq.n	8003d92 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d6a:	6903      	ldr	r3, [r0, #16]
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	6103      	str	r3, [r0, #16]
}
 8003d72:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d78:	684a      	ldr	r2, [r1, #4]
 8003d7a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7c:	e7e2      	b.n	8003d44 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d82:	684a      	ldr	r2, [r1, #4]
 8003d84:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	e7dd      	b.n	8003d44 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d8c:	684a      	ldr	r2, [r1, #4]
 8003d8e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d90:	e7d8      	b.n	8003d44 <TIM_Base_SetConfig+0x84>
}
 8003d92:	4770      	bx	lr
 8003d94:	40010000 	.word	0x40010000

08003d98 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003d98:	b340      	cbz	r0, 8003dec <HAL_TIM_PWM_Init+0x54>
{
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003da2:	b1f3      	cbz	r3, 8003de2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	2302      	movs	r3, #2
 8003da6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003daa:	4621      	mov	r1, r4
 8003dac:	f851 0b04 	ldr.w	r0, [r1], #4
 8003db0:	f7ff ff86 	bl	8003cc0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003dbe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003dc2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003dc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003dd6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003dda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003dde:	2000      	movs	r0, #0
}
 8003de0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003de2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003de6:	f7ff feb7 	bl	8003b58 <HAL_TIM_PWM_MspInit>
 8003dea:	e7db      	b.n	8003da4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	4770      	bx	lr

08003df0 <TIM_OC2_SetConfig>:
{
 8003df0:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8003df2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df4:	6a02      	ldr	r2, [r0, #32]
 8003df6:	f022 0210 	bic.w	r2, r2, #16
 8003dfa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003dfc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003dfe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e00:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	680d      	ldr	r5, [r1, #0]
 8003e06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e0a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e0e:	688d      	ldr	r5, [r1, #8]
 8003e10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e14:	4d0c      	ldr	r5, [pc, #48]	@ (8003e48 <TIM_OC2_SetConfig+0x58>)
 8003e16:	42a8      	cmp	r0, r5
 8003e18:	d006      	beq.n	8003e28 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003e1a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e1c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e1e:	684a      	ldr	r2, [r1, #4]
 8003e20:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003e22:	6203      	str	r3, [r0, #32]
}
 8003e24:	bc70      	pop	{r4, r5, r6}
 8003e26:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e2c:	68cd      	ldr	r5, [r1, #12]
 8003e2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e36:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e3a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e3c:	698e      	ldr	r6, [r1, #24]
 8003e3e:	4335      	orrs	r5, r6
 8003e40:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003e44:	e7e9      	b.n	8003e1a <TIM_OC2_SetConfig+0x2a>
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000

08003e4c <HAL_TIM_PWM_ConfigChannel>:
{
 8003e4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e4e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d066      	beq.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003e56:	4604      	mov	r4, r0
 8003e58:	460d      	mov	r5, r1
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003e60:	2a0c      	cmp	r2, #12
 8003e62:	d85a      	bhi.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0xce>
 8003e64:	e8df f002 	tbb	[pc, r2]
 8003e68:	59595907 	.word	0x59595907
 8003e6c:	5959591b 	.word	0x5959591b
 8003e70:	59595930 	.word	0x59595930
 8003e74:	44          	.byte	0x44
 8003e75:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e76:	6800      	ldr	r0, [r0, #0]
 8003e78:	f7ff fdbe 	bl	80039f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	6993      	ldr	r3, [r2, #24]
 8003e80:	f043 0308 	orr.w	r3, r3, #8
 8003e84:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	6993      	ldr	r3, [r2, #24]
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e90:	6822      	ldr	r2, [r4, #0]
 8003e92:	6993      	ldr	r3, [r2, #24]
 8003e94:	6929      	ldr	r1, [r5, #16]
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2000      	movs	r0, #0
      break;
 8003e9c:	e03e      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e9e:	6800      	ldr	r0, [r0, #0]
 8003ea0:	f7ff ffa6 	bl	8003df0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	6993      	ldr	r3, [r2, #24]
 8003ea8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003eac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	6993      	ldr	r3, [r2, #24]
 8003eb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eb6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb8:	6822      	ldr	r2, [r4, #0]
 8003eba:	6993      	ldr	r3, [r2, #24]
 8003ebc:	6929      	ldr	r1, [r5, #16]
 8003ebe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ec2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec4:	2000      	movs	r0, #0
      break;
 8003ec6:	e029      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec8:	6800      	ldr	r0, [r0, #0]
 8003eca:	f7ff fdbf 	bl	8003a4c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	69d3      	ldr	r3, [r2, #28]
 8003ed2:	f043 0308 	orr.w	r3, r3, #8
 8003ed6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	69d3      	ldr	r3, [r2, #28]
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	69d3      	ldr	r3, [r2, #28]
 8003ee6:	6929      	ldr	r1, [r5, #16]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2000      	movs	r0, #0
      break;
 8003eee:	e015      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef0:	6800      	ldr	r0, [r0, #0]
 8003ef2:	f7ff fdd7 	bl	8003aa4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	69d3      	ldr	r3, [r2, #28]
 8003efa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003efe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	69d3      	ldr	r3, [r2, #28]
 8003f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f08:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	69d3      	ldr	r3, [r2, #28]
 8003f0e:	6929      	ldr	r1, [r5, #16]
 8003f10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f14:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2000      	movs	r0, #0
      break;
 8003f18:	e000      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003f1a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003f24:	2002      	movs	r0, #2
 8003f26:	e7fc      	b.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003f28 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f28:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f2c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f2e:	f04f 0c01 	mov.w	ip, #1
 8003f32:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8003f36:	ea23 030c 	bic.w	r3, r3, ip
 8003f3a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f3c:	6a03      	ldr	r3, [r0, #32]
 8003f3e:	408a      	lsls	r2, r1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	6202      	str	r2, [r0, #32]
}
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_TIM_PWM_Start>:
{
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	bb41      	cbnz	r1, 8003fa2 <HAL_TIM_PWM_Start+0x5a>
 8003f50:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d15a      	bne.n	8004010 <HAL_TIM_PWM_Start+0xc8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f60:	2201      	movs	r2, #1
 8003f62:	4601      	mov	r1, r0
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	f7ff ffdf 	bl	8003f28 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004018 <HAL_TIM_PWM_Start+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d03c      	beq.n	8003fec <HAL_TIM_PWM_Start+0xa4>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d040      	beq.n	8003ffa <HAL_TIM_PWM_Start+0xb2>
 8003f78:	4a28      	ldr	r2, [pc, #160]	@ (800401c <HAL_TIM_PWM_Start+0xd4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03d      	beq.n	8003ffa <HAL_TIM_PWM_Start+0xb2>
 8003f7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d039      	beq.n	8003ffa <HAL_TIM_PWM_Start+0xb2>
 8003f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d035      	beq.n	8003ffa <HAL_TIM_PWM_Start+0xb2>
 8003f8e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d031      	beq.n	8003ffa <HAL_TIM_PWM_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e035      	b.n	800400e <HAL_TIM_PWM_Start+0xc6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	2904      	cmp	r1, #4
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_TIM_PWM_Start+0x78>
 8003fa6:	2908      	cmp	r1, #8
 8003fa8:	bf0c      	ite	eq
 8003faa:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8003fae:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	bf18      	it	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	b143      	cbz	r3, 8003fce <HAL_TIM_PWM_Start+0x86>
    return HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	e026      	b.n	800400e <HAL_TIM_PWM_Start+0xc6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	bf18      	it	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	e7f5      	b.n	8003fba <HAL_TIM_PWM_Start+0x72>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	2804      	cmp	r0, #4
 8003fd0:	d008      	beq.n	8003fe4 <HAL_TIM_PWM_Start+0x9c>
 8003fd2:	2808      	cmp	r0, #8
 8003fd4:	f04f 0302 	mov.w	r3, #2
 8003fd8:	bf0c      	ite	eq
 8003fda:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8003fde:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8003fe2:	e7bd      	b.n	8003f60 <HAL_TIM_PWM_Start+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003fea:	e7b9      	b.n	8003f60 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8003fec:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff2:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d1bb      	bne.n	8003f72 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	2a06      	cmp	r2, #6
 8004002:	d007      	beq.n	8004014 <HAL_TIM_PWM_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800400c:	2000      	movs	r0, #0
}
 800400e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
 8004012:	e7fc      	b.n	800400e <HAL_TIM_PWM_Start+0xc6>
  return HAL_OK;
 8004014:	2000      	movs	r0, #0
 8004016:	e7fa      	b.n	800400e <HAL_TIM_PWM_Start+0xc6>
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400

08004020 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004020:	4770      	bx	lr

08004022 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004022:	4770      	bx	lr

08004024 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004024:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	f102 030c 	add.w	r3, r2, #12
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	320c      	adds	r2, #12
 8004034:	e842 3100 	strex	r1, r3, [r2]
 8004038:	2900      	cmp	r1, #0
 800403a:	d1f3      	bne.n	8004024 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	f102 0314 	add.w	r3, r2, #20
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	3214      	adds	r2, #20
 800404c:	e842 3100 	strex	r1, r3, [r2]
 8004050:	2900      	cmp	r1, #0
 8004052:	d1f3      	bne.n	800403c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004054:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004056:	2b01      	cmp	r3, #1
 8004058:	d005      	beq.n	8004066 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800405a:	2320      	movs	r3, #32
 800405c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	2300      	movs	r3, #0
 8004062:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004064:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	f102 030c 	add.w	r3, r2, #12
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	320c      	adds	r2, #12
 8004076:	e842 3100 	strex	r1, r3, [r2]
 800407a:	2900      	cmp	r1, #0
 800407c:	d1f3      	bne.n	8004066 <UART_EndRxTransfer+0x42>
 800407e:	e7ec      	b.n	800405a <UART_EndRxTransfer+0x36>

08004080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004080:	b510      	push	{r4, lr}
 8004082:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004084:	6802      	ldr	r2, [r0, #0]
 8004086:	6913      	ldr	r3, [r2, #16]
 8004088:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800408c:	68c1      	ldr	r1, [r0, #12]
 800408e:	430b      	orrs	r3, r1
 8004090:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8004092:	6801      	ldr	r1, [r0, #0]
 8004094:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004096:	6883      	ldr	r3, [r0, #8]
 8004098:	6900      	ldr	r0, [r0, #16]
 800409a:	4303      	orrs	r3, r0
 800409c:	6960      	ldr	r0, [r4, #20]
 800409e:	4303      	orrs	r3, r0
 80040a0:	69e0      	ldr	r0, [r4, #28]
 80040a2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 80040a8:	f022 020c 	bic.w	r2, r2, #12
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	6953      	ldr	r3, [r2, #20]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b8:	69a1      	ldr	r1, [r4, #24]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	4a2e      	ldr	r2, [pc, #184]	@ (800417c <UART_SetConfig+0xfc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d006      	beq.n	80040d4 <UART_SetConfig+0x54>
 80040c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d002      	beq.n	80040d4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ce:	f7ff fc73 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80040d2:	e001      	b.n	80040d8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7ff fc80 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d8:	69e3      	ldr	r3, [r4, #28]
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040de:	d024      	beq.n	800412a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e0:	2100      	movs	r1, #0
 80040e2:	1803      	adds	r3, r0, r0
 80040e4:	4149      	adcs	r1, r1
 80040e6:	181b      	adds	r3, r3, r0
 80040e8:	f141 0100 	adc.w	r1, r1, #0
 80040ec:	00c9      	lsls	r1, r1, #3
 80040ee:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1818      	adds	r0, r3, r0
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80040fc:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004100:	f141 0100 	adc.w	r1, r1, #0
 8004104:	f7fc f8c4 	bl	8000290 <__aeabi_uldivmod>
 8004108:	6821      	ldr	r1, [r4, #0]
 800410a:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <UART_SetConfig+0x100>)
 800410c:	fba2 4300 	umull	r4, r3, r2, r0
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2464      	movs	r4, #100	@ 0x64
 8004114:	fb04 0013 	mls	r0, r4, r3, r0
 8004118:	0100      	lsls	r0, r0, #4
 800411a:	3032      	adds	r0, #50	@ 0x32
 800411c:	fba2 2000 	umull	r2, r0, r2, r0
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8004126:	608b      	str	r3, [r1, #8]
  }
}
 8004128:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800412a:	2300      	movs	r3, #0
 800412c:	1802      	adds	r2, r0, r0
 800412e:	eb43 0103 	adc.w	r1, r3, r3
 8004132:	1812      	adds	r2, r2, r0
 8004134:	f141 0100 	adc.w	r1, r1, #0
 8004138:	00c9      	lsls	r1, r1, #3
 800413a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800413e:	00d2      	lsls	r2, r2, #3
 8004140:	1810      	adds	r0, r2, r0
 8004142:	f141 0100 	adc.w	r1, r1, #0
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	1892      	adds	r2, r2, r2
 800414a:	415b      	adcs	r3, r3
 800414c:	f7fc f8a0 	bl	8000290 <__aeabi_uldivmod>
 8004150:	4a0b      	ldr	r2, [pc, #44]	@ (8004180 <UART_SetConfig+0x100>)
 8004152:	fba2 3100 	umull	r3, r1, r2, r0
 8004156:	0949      	lsrs	r1, r1, #5
 8004158:	2364      	movs	r3, #100	@ 0x64
 800415a:	fb03 0311 	mls	r3, r3, r1, r0
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	3332      	adds	r3, #50	@ 0x32
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800416c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004176:	4413      	add	r3, r2
 8004178:	6083      	str	r3, [r0, #8]
 800417a:	e7d5      	b.n	8004128 <UART_SetConfig+0xa8>
 800417c:	40011000 	.word	0x40011000
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <UART_WaitOnFlagUntilTimeout>:
{
 8004184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004188:	b083      	sub	sp, #12
 800418a:	4680      	mov	r8, r0
 800418c:	460d      	mov	r5, r1
 800418e:	4616      	mov	r6, r2
 8004190:	4699      	mov	r9, r3
 8004192:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	f8d8 3000 	ldr.w	r3, [r8]
 8004198:	681c      	ldr	r4, [r3, #0]
 800419a:	ea35 0404 	bics.w	r4, r5, r4
 800419e:	bf0c      	ite	eq
 80041a0:	2401      	moveq	r4, #1
 80041a2:	2400      	movne	r4, #0
 80041a4:	42b4      	cmp	r4, r6
 80041a6:	d128      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80041a8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80041ac:	d0f4      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe fcb3 	bl	8002b18 <HAL_GetTick>
 80041b2:	eba0 0009 	sub.w	r0, r0, r9
 80041b6:	42b8      	cmp	r0, r7
 80041b8:	d823      	bhi.n	8004202 <UART_WaitOnFlagUntilTimeout+0x7e>
 80041ba:	b327      	cbz	r7, 8004206 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041bc:	f8d8 3000 	ldr.w	r3, [r8]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	f012 0f04 	tst.w	r2, #4
 80041c6:	d0e5      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x10>
 80041c8:	2d80      	cmp	r5, #128	@ 0x80
 80041ca:	d0e3      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x10>
 80041cc:	2d40      	cmp	r5, #64	@ 0x40
 80041ce:	d0e1      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f012 0f08 	tst.w	r2, #8
 80041d6:	d0dd      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041d8:	2400      	movs	r4, #0
 80041da:	9401      	str	r4, [sp, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	9201      	str	r2, [sp, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80041e6:	4640      	mov	r0, r8
 80041e8:	f7ff ff1c 	bl	8004024 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ec:	2308      	movs	r3, #8
 80041ee:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80041f2:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 80041f6:	2001      	movs	r0, #1
 80041f8:	e000      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80041fa:	2000      	movs	r0, #0
}
 80041fc:	b003      	add	sp, #12
 80041fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004202:	2003      	movs	r0, #3
 8004204:	e7fa      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0x78>
 8004206:	2003      	movs	r0, #3
 8004208:	e7f8      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0x78>

0800420a <HAL_UART_Init>:
  if (huart == NULL)
 800420a:	b360      	cbz	r0, 8004266 <HAL_UART_Init+0x5c>
{
 800420c:	b510      	push	{r4, lr}
 800420e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004210:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004214:	b313      	cbz	r3, 800425c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004216:	2324      	movs	r3, #36	@ 0x24
 8004218:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	68d3      	ldr	r3, [r2, #12]
 8004220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004224:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004226:	4620      	mov	r0, r4
 8004228:	f7ff ff2a 	bl	8004080 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	6913      	ldr	r3, [r2, #16]
 8004230:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004234:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	6953      	ldr	r3, [r2, #20]
 800423a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800423e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	68d3      	ldr	r3, [r2, #12]
 8004244:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004248:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	2000      	movs	r0, #0
 800424c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800424e:	2320      	movs	r3, #32
 8004250:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004254:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004258:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800425a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800425c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004260:	f7fd ff7c 	bl	800215c <HAL_UART_MspInit>
 8004264:	e7d7      	b.n	8004216 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004266:	2001      	movs	r0, #1
}
 8004268:	4770      	bx	lr

0800426a <HAL_UART_Transmit>:
{
 800426a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004272:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	d15c      	bne.n	8004336 <HAL_UART_Transmit+0xcc>
 800427c:	4604      	mov	r4, r0
 800427e:	460d      	mov	r5, r1
 8004280:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004282:	2900      	cmp	r1, #0
 8004284:	d05b      	beq.n	800433e <HAL_UART_Transmit+0xd4>
 8004286:	b90a      	cbnz	r2, 800428c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004288:	2001      	movs	r0, #1
 800428a:	e055      	b.n	8004338 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	2300      	movs	r3, #0
 800428e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004290:	2321      	movs	r3, #33	@ 0x21
 8004292:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004296:	f7fe fc3f 	bl	8002b18 <HAL_GetTick>
 800429a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800429c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042a0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042aa:	d009      	beq.n	80042c0 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 80042ac:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 80042b0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b373      	cbz	r3, 8004314 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	f04f 0900 	mov.w	r9, #0
 80042ba:	f04f 0880 	mov.w	r8, #128	@ 0x80
 80042be:	e019      	b.n	80042f4 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c0:	6923      	ldr	r3, [r4, #16]
 80042c2:	b113      	cbz	r3, 80042ca <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 80042c4:	f04f 0a00 	mov.w	sl, #0
 80042c8:	e7f2      	b.n	80042b0 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 80042ca:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80042cc:	2500      	movs	r5, #0
 80042ce:	e7ef      	b.n	80042b0 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 80042d0:	2320      	movs	r3, #32
 80042d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80042d6:	2003      	movs	r0, #3
 80042d8:	e02e      	b.n	8004338 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80042e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80042e6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80042e8:	3a01      	subs	r2, #1
 80042ea:	b292      	uxth	r2, r2
 80042ec:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042ee:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	b17b      	cbz	r3, 8004314 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f4:	9600      	str	r6, [sp, #0]
 80042f6:	463b      	mov	r3, r7
 80042f8:	464a      	mov	r2, r9
 80042fa:	4641      	mov	r1, r8
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff ff41 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8004302:	2800      	cmp	r0, #0
 8004304:	d1e4      	bne.n	80042d0 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8004306:	2d00      	cmp	r5, #0
 8004308:	d0e7      	beq.n	80042da <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004310:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004312:	e7e8      	b.n	80042e6 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004314:	9600      	str	r6, [sp, #0]
 8004316:	463b      	mov	r3, r7
 8004318:	2200      	movs	r2, #0
 800431a:	2140      	movs	r1, #64	@ 0x40
 800431c:	4620      	mov	r0, r4
 800431e:	f7ff ff31 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8004322:	b918      	cbnz	r0, 800432c <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8004324:	2320      	movs	r3, #32
 8004326:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800432a:	e005      	b.n	8004338 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 800432c:	2320      	movs	r3, #32
 800432e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8004332:	2003      	movs	r0, #3
 8004334:	e000      	b.n	8004338 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8004336:	2002      	movs	r0, #2
}
 8004338:	b002      	add	sp, #8
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800433e:	2001      	movs	r0, #1
 8004340:	e7fa      	b.n	8004338 <HAL_UART_Transmit+0xce>

08004342 <HAL_UART_TxCpltCallback>:
}
 8004342:	4770      	bx	lr

08004344 <HAL_UART_ErrorCallback>:
}
 8004344:	4770      	bx	lr

08004346 <UART_DMAAbortOnError>:
{
 8004346:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004348:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800434e:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004350:	f7ff fff8 	bl	8004344 <HAL_UART_ErrorCallback>
}
 8004354:	bd08      	pop	{r3, pc}

08004356 <HAL_UARTEx_RxEventCallback>:
}
 8004356:	4770      	bx	lr

08004358 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004358:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b22      	cmp	r3, #34	@ 0x22
 8004360:	d11d      	bne.n	800439e <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	6883      	ldr	r3, [r0, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	d006      	beq.n	8004378 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800436a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800436c:	b17b      	cbz	r3, 800438e <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436e:	6803      	ldr	r3, [r0, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004376:	e01a      	b.n	80043ae <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	6903      	ldr	r3, [r0, #16]
 800437a:	b9a3      	cbnz	r3, 80043a6 <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800437c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800437e:	6803      	ldr	r3, [r0, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004386:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004388:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800438a:	3302      	adds	r3, #2
 800438c:	e012      	b.n	80043b4 <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800438e:	6903      	ldr	r3, [r0, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ec      	bne.n	800436e <UART_Receive_IT+0x16>
 8004394:	e008      	b.n	80043a8 <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 8004396:	f7fd fb55 	bl	8001a44 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800439a:	2000      	movs	r0, #0
 800439c:	e048      	b.n	8004430 <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 800439e:	2002      	movs	r0, #2
 80043a0:	4770      	bx	lr
    return HAL_OK;
 80043a2:	2000      	movs	r0, #0
}
 80043a4:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043a6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043a8:	6803      	ldr	r3, [r0, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80043b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80043b2:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 80043b4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80043b6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ef      	bne.n	80043a2 <UART_Receive_IT+0x4a>
{
 80043c2:	b500      	push	{lr}
 80043c4:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043c6:	6802      	ldr	r2, [r0, #0]
 80043c8:	68d3      	ldr	r3, [r2, #12]
 80043ca:	f023 0320 	bic.w	r3, r3, #32
 80043ce:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043d0:	6802      	ldr	r2, [r0, #0]
 80043d2:	68d3      	ldr	r3, [r2, #12]
 80043d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043da:	6802      	ldr	r2, [r0, #0]
 80043dc:	6953      	ldr	r3, [r2, #20]
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80043e4:	2320      	movs	r3, #32
 80043e6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ea:	2300      	movs	r3, #0
 80043ec:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d1d0      	bne.n	8004396 <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	2300      	movs	r3, #0
 80043f6:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	f102 030c 	add.w	r3, r2, #12
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	320c      	adds	r2, #12
 8004408:	e842 3100 	strex	r1, r3, [r2]
 800440c:	2900      	cmp	r1, #0
 800440e:	d1f3      	bne.n	80043f8 <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004410:	6803      	ldr	r3, [r0, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	f012 0f10 	tst.w	r2, #16
 8004418:	d006      	beq.n	8004428 <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800441a:	2200      	movs	r2, #0
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	9201      	str	r2, [sp, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004428:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800442a:	f7ff ff94 	bl	8004356 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800442e:	2000      	movs	r0, #0
}
 8004430:	b003      	add	sp, #12
 8004432:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004438 <HAL_UART_IRQHandler>:
{
 8004438:	b510      	push	{r4, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800443e:	6802      	ldr	r2, [r0, #0]
 8004440:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004442:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004444:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004446:	f013 0f0f 	tst.w	r3, #15
 800444a:	d109      	bne.n	8004460 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800444c:	f013 0f20 	tst.w	r3, #32
 8004450:	d00d      	beq.n	800446e <HAL_UART_IRQHandler+0x36>
 8004452:	f010 0f20 	tst.w	r0, #32
 8004456:	d00a      	beq.n	800446e <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8004458:	4620      	mov	r0, r4
 800445a:	f7ff ff7d 	bl	8004358 <UART_Receive_IT>
      return;
 800445e:	e018      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004460:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004464:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 8004468:	ea5c 0c01 	orrs.w	ip, ip, r1
 800446c:	d113      	bne.n	8004496 <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004470:	2901      	cmp	r1, #1
 8004472:	f000 8081 	beq.w	8004578 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004476:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800447a:	d003      	beq.n	8004484 <HAL_UART_IRQHandler+0x4c>
 800447c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004480:	f040 811b 	bne.w	80046ba <HAL_UART_IRQHandler+0x282>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004484:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004488:	d003      	beq.n	8004492 <HAL_UART_IRQHandler+0x5a>
 800448a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800448e:	f040 8141 	bne.w	8004714 <HAL_UART_IRQHandler+0x2dc>
}
 8004492:	b002      	add	sp, #8
 8004494:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004496:	f013 0f01 	tst.w	r3, #1
 800449a:	d006      	beq.n	80044aa <HAL_UART_IRQHandler+0x72>
 800449c:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80044a0:	d003      	beq.n	80044aa <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044aa:	f013 0f04 	tst.w	r3, #4
 80044ae:	d00b      	beq.n	80044c8 <HAL_UART_IRQHandler+0x90>
 80044b0:	b191      	cbz	r1, 80044d8 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044b4:	f042 0202 	orr.w	r2, r2, #2
 80044b8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ba:	f013 0f02 	tst.w	r3, #2
 80044be:	d107      	bne.n	80044d0 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c0:	f013 0f08 	tst.w	r3, #8
 80044c4:	d10f      	bne.n	80044e6 <HAL_UART_IRQHandler+0xae>
 80044c6:	e012      	b.n	80044ee <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c8:	f013 0f02 	tst.w	r3, #2
 80044cc:	d004      	beq.n	80044d8 <HAL_UART_IRQHandler+0xa0>
 80044ce:	b119      	cbz	r1, 80044d8 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044d2:	f042 0204 	orr.w	r2, r2, #4
 80044d6:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044d8:	f013 0f08 	tst.w	r3, #8
 80044dc:	d007      	beq.n	80044ee <HAL_UART_IRQHandler+0xb6>
 80044de:	f000 0220 	and.w	r2, r0, #32
 80044e2:	430a      	orrs	r2, r1
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044e8:	f042 0208 	orr.w	r2, r2, #8
 80044ec:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d0ce      	beq.n	8004492 <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f4:	f013 0f20 	tst.w	r3, #32
 80044f8:	d002      	beq.n	8004500 <HAL_UART_IRQHandler+0xc8>
 80044fa:	f010 0f20 	tst.w	r0, #32
 80044fe:	d10e      	bne.n	800451e <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004504:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800450a:	f002 0208 	and.w	r2, r2, #8
 800450e:	4313      	orrs	r3, r2
 8004510:	d109      	bne.n	8004526 <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 8004512:	4620      	mov	r0, r4
 8004514:	f7ff ff16 	bl	8004344 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	2300      	movs	r3, #0
 800451a:	6463      	str	r3, [r4, #68]	@ 0x44
 800451c:	e7b9      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff ff1a 	bl	8004358 <UART_Receive_IT>
 8004524:	e7ec      	b.n	8004500 <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff fd7c 	bl	8004024 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004534:	d01c      	beq.n	8004570 <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	f102 0314 	add.w	r3, r2, #20
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	3214      	adds	r2, #20
 8004546:	e842 3100 	strex	r1, r3, [r2]
 800454a:	2900      	cmp	r1, #0
 800454c:	d1f3      	bne.n	8004536 <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 800454e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004550:	b153      	cbz	r3, 8004568 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004552:	4a76      	ldr	r2, [pc, #472]	@ (800472c <HAL_UART_IRQHandler+0x2f4>)
 8004554:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004556:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004558:	f7fe fd12 	bl	8002f80 <HAL_DMA_Abort_IT>
 800455c:	2800      	cmp	r0, #0
 800455e:	d098      	beq.n	8004492 <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004560:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004562:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004564:	4798      	blx	r3
 8004566:	e794      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 8004568:	4620      	mov	r0, r4
 800456a:	f7ff feeb 	bl	8004344 <HAL_UART_ErrorCallback>
 800456e:	e790      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff fee7 	bl	8004344 <HAL_UART_ErrorCallback>
 8004576:	e78c      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004578:	f013 0f10 	tst.w	r3, #16
 800457c:	f43f af7b 	beq.w	8004476 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004580:	f010 0f10 	tst.w	r0, #16
 8004584:	f43f af77 	beq.w	8004476 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004588:	2300      	movs	r3, #0
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6853      	ldr	r3, [r2, #4]
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004596:	6953      	ldr	r3, [r2, #20]
 8004598:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800459c:	d051      	beq.n	8004642 <HAL_UART_IRQHandler+0x20a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800459e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80045a0:	6813      	ldr	r3, [r2, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f43f af73 	beq.w	8004492 <HAL_UART_IRQHandler+0x5a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ac:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80045ae:	4299      	cmp	r1, r3
 80045b0:	f67f af6f 	bls.w	8004492 <HAL_UART_IRQHandler+0x5a>
        huart->RxXferCount = nb_remaining_rx_data;
 80045b4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045b6:	69d3      	ldr	r3, [r2, #28]
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045bc:	d037      	beq.n	800462e <HAL_UART_IRQHandler+0x1f6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	f102 030c 	add.w	r3, r2, #12
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	320c      	adds	r2, #12
 80045ce:	e842 3100 	strex	r1, r3, [r2]
 80045d2:	2900      	cmp	r1, #0
 80045d4:	d1f3      	bne.n	80045be <HAL_UART_IRQHandler+0x186>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f102 0314 	add.w	r3, r2, #20
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	3214      	adds	r2, #20
 80045e6:	e842 3100 	strex	r1, r3, [r2]
 80045ea:	2900      	cmp	r1, #0
 80045ec:	d1f3      	bne.n	80045d6 <HAL_UART_IRQHandler+0x19e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	f102 0314 	add.w	r3, r2, #20
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	3214      	adds	r2, #20
 80045fe:	e842 3100 	strex	r1, r3, [r2]
 8004602:	2900      	cmp	r1, #0
 8004604:	d1f3      	bne.n	80045ee <HAL_UART_IRQHandler+0x1b6>
          huart->RxState = HAL_UART_STATE_READY;
 8004606:	2320      	movs	r3, #32
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	2300      	movs	r3, #0
 800460e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	f102 030c 	add.w	r3, r2, #12
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	320c      	adds	r2, #12
 8004620:	e842 3100 	strex	r1, r3, [r2]
 8004624:	2900      	cmp	r1, #0
 8004626:	d1f3      	bne.n	8004610 <HAL_UART_IRQHandler+0x1d8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004628:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800462a:	f7fe fc64 	bl	8002ef6 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800462e:	2302      	movs	r3, #2
 8004630:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004632:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004634:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004636:	1ac9      	subs	r1, r1, r3
 8004638:	b289      	uxth	r1, r1
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff fe8b 	bl	8004356 <HAL_UARTEx_RxEventCallback>
 8004640:	e727      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004642:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004644:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8004646:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	f43f af21 	beq.w	8004492 <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004650:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004652:	1a89      	subs	r1, r1, r2
 8004654:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004656:	2900      	cmp	r1, #0
 8004658:	f43f af1b 	beq.w	8004492 <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	f102 030c 	add.w	r3, r2, #12
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	320c      	adds	r2, #12
 800466c:	e842 3000 	strex	r0, r3, [r2]
 8004670:	2800      	cmp	r0, #0
 8004672:	d1f3      	bne.n	800465c <HAL_UART_IRQHandler+0x224>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	f102 0314 	add.w	r3, r2, #20
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	3214      	adds	r2, #20
 8004684:	e842 3000 	strex	r0, r3, [r2]
 8004688:	2800      	cmp	r0, #0
 800468a:	d1f3      	bne.n	8004674 <HAL_UART_IRQHandler+0x23c>
        huart->RxState = HAL_UART_STATE_READY;
 800468c:	2320      	movs	r3, #32
 800468e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	2300      	movs	r3, #0
 8004694:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004696:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f102 030c 	add.w	r3, r2, #12
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	320c      	adds	r2, #12
 80046a6:	e842 3000 	strex	r0, r3, [r2]
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d1f3      	bne.n	8004696 <HAL_UART_IRQHandler+0x25e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ae:	2302      	movs	r3, #2
 80046b0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7ff fe4f 	bl	8004356 <HAL_UARTEx_RxEventCallback>
 80046b8:	e6eb      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ba:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b21      	cmp	r3, #33	@ 0x21
 80046c2:	f47f aee6 	bne.w	8004492 <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c6:	68a3      	ldr	r3, [r4, #8]
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046cc:	d016      	beq.n	80046fc <HAL_UART_IRQHandler+0x2c4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ce:	6a23      	ldr	r3, [r4, #32]
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	6221      	str	r1, [r4, #32]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 80046d8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	84e3      	strh	r3, [r4, #38]	@ 0x26
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f47f aed6 	bne.w	8004492 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	68d3      	ldr	r3, [r2, #12]
 80046ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ee:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	68d3      	ldr	r3, [r2, #12]
 80046f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f8:	60d3      	str	r3, [r2, #12]
 80046fa:	e6ca      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <HAL_UART_IRQHandler+0x296>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004702:	6a23      	ldr	r3, [r4, #32]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800470c:	6a23      	ldr	r3, [r4, #32]
 800470e:	3302      	adds	r3, #2
 8004710:	6223      	str	r3, [r4, #32]
 8004712:	e7e1      	b.n	80046d8 <HAL_UART_IRQHandler+0x2a0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004714:	68d3      	ldr	r3, [r2, #12]
 8004716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800471c:	2320      	movs	r3, #32
 800471e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004722:	4620      	mov	r0, r4
 8004724:	f7ff fe0d 	bl	8004342 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004728:	e6b3      	b.n	8004492 <HAL_UART_IRQHandler+0x5a>
 800472a:	bf00      	nop
 800472c:	08004347 	.word	0x08004347

08004730 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8004730:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004732:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004734:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	2300      	movs	r3, #0
 8004738:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800473a:	2322      	movs	r3, #34	@ 0x22
 800473c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004740:	6903      	ldr	r3, [r0, #16]
 8004742:	b123      	cbz	r3, 800474e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004744:	6802      	ldr	r2, [r0, #0]
 8004746:	68d3      	ldr	r3, [r2, #12]
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800474e:	6802      	ldr	r2, [r0, #0]
 8004750:	6953      	ldr	r3, [r2, #20]
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004758:	6802      	ldr	r2, [r0, #0]
 800475a:	68d3      	ldr	r3, [r2, #12]
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	60d3      	str	r3, [r2, #12]
}
 8004762:	2000      	movs	r0, #0
 8004764:	4770      	bx	lr

08004766 <HAL_UART_Receive_IT>:
{
 8004766:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004768:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b20      	cmp	r3, #32
 8004770:	d108      	bne.n	8004784 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8004772:	b149      	cbz	r1, 8004788 <HAL_UART_Receive_IT+0x22>
 8004774:	b90a      	cbnz	r2, 800477a <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
}
 8004778:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477a:	2300      	movs	r3, #0
 800477c:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800477e:	f7ff ffd7 	bl	8004730 <UART_Start_Receive_IT>
 8004782:	e7f9      	b.n	8004778 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8004784:	2002      	movs	r0, #2
 8004786:	e7f7      	b.n	8004778 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8004788:	2001      	movs	r0, #1
 800478a:	e7f5      	b.n	8004778 <HAL_UART_Receive_IT+0x12>

0800478c <rand>:
 800478c:	4b16      	ldr	r3, [pc, #88]	@ (80047e8 <rand+0x5c>)
 800478e:	b510      	push	{r4, lr}
 8004790:	681c      	ldr	r4, [r3, #0]
 8004792:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004794:	b9b3      	cbnz	r3, 80047c4 <rand+0x38>
 8004796:	2018      	movs	r0, #24
 8004798:	f000 fa4e 	bl	8004c38 <malloc>
 800479c:	4602      	mov	r2, r0
 800479e:	6320      	str	r0, [r4, #48]	@ 0x30
 80047a0:	b920      	cbnz	r0, 80047ac <rand+0x20>
 80047a2:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <rand+0x60>)
 80047a4:	4812      	ldr	r0, [pc, #72]	@ (80047f0 <rand+0x64>)
 80047a6:	2152      	movs	r1, #82	@ 0x52
 80047a8:	f000 f9de 	bl	8004b68 <__assert_func>
 80047ac:	4911      	ldr	r1, [pc, #68]	@ (80047f4 <rand+0x68>)
 80047ae:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <rand+0x6c>)
 80047b0:	e9c0 1300 	strd	r1, r3, [r0]
 80047b4:	4b11      	ldr	r3, [pc, #68]	@ (80047fc <rand+0x70>)
 80047b6:	6083      	str	r3, [r0, #8]
 80047b8:	230b      	movs	r3, #11
 80047ba:	8183      	strh	r3, [r0, #12]
 80047bc:	2100      	movs	r1, #0
 80047be:	2001      	movs	r0, #1
 80047c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80047c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80047c6:	480e      	ldr	r0, [pc, #56]	@ (8004800 <rand+0x74>)
 80047c8:	690b      	ldr	r3, [r1, #16]
 80047ca:	694c      	ldr	r4, [r1, #20]
 80047cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <rand+0x78>)
 80047ce:	4358      	muls	r0, r3
 80047d0:	fb02 0004 	mla	r0, r2, r4, r0
 80047d4:	fba3 3202 	umull	r3, r2, r3, r2
 80047d8:	3301      	adds	r3, #1
 80047da:	eb40 0002 	adc.w	r0, r0, r2
 80047de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80047e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80047e6:	bd10      	pop	{r4, pc}
 80047e8:	20000040 	.word	0x20000040
 80047ec:	080067d8 	.word	0x080067d8
 80047f0:	080067ef 	.word	0x080067ef
 80047f4:	abcd330e 	.word	0xabcd330e
 80047f8:	e66d1234 	.word	0xe66d1234
 80047fc:	0005deec 	.word	0x0005deec
 8004800:	5851f42d 	.word	0x5851f42d
 8004804:	4c957f2d 	.word	0x4c957f2d

08004808 <std>:
 8004808:	2300      	movs	r3, #0
 800480a:	b510      	push	{r4, lr}
 800480c:	4604      	mov	r4, r0
 800480e:	e9c0 3300 	strd	r3, r3, [r0]
 8004812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004816:	6083      	str	r3, [r0, #8]
 8004818:	8181      	strh	r1, [r0, #12]
 800481a:	6643      	str	r3, [r0, #100]	@ 0x64
 800481c:	81c2      	strh	r2, [r0, #14]
 800481e:	6183      	str	r3, [r0, #24]
 8004820:	4619      	mov	r1, r3
 8004822:	2208      	movs	r2, #8
 8004824:	305c      	adds	r0, #92	@ 0x5c
 8004826:	f000 f914 	bl	8004a52 <memset>
 800482a:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <std+0x58>)
 800482c:	6263      	str	r3, [r4, #36]	@ 0x24
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <std+0x5c>)
 8004830:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004832:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <std+0x60>)
 8004834:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <std+0x64>)
 8004838:	6323      	str	r3, [r4, #48]	@ 0x30
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <std+0x68>)
 800483c:	6224      	str	r4, [r4, #32]
 800483e:	429c      	cmp	r4, r3
 8004840:	d006      	beq.n	8004850 <std+0x48>
 8004842:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004846:	4294      	cmp	r4, r2
 8004848:	d002      	beq.n	8004850 <std+0x48>
 800484a:	33d0      	adds	r3, #208	@ 0xd0
 800484c:	429c      	cmp	r4, r3
 800484e:	d105      	bne.n	800485c <std+0x54>
 8004850:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	f000 b974 	b.w	8004b44 <__retarget_lock_init_recursive>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	080049cd 	.word	0x080049cd
 8004864:	080049ef 	.word	0x080049ef
 8004868:	08004a27 	.word	0x08004a27
 800486c:	08004a4b 	.word	0x08004a4b
 8004870:	20001058 	.word	0x20001058

08004874 <stdio_exit_handler>:
 8004874:	4a02      	ldr	r2, [pc, #8]	@ (8004880 <stdio_exit_handler+0xc>)
 8004876:	4903      	ldr	r1, [pc, #12]	@ (8004884 <stdio_exit_handler+0x10>)
 8004878:	4803      	ldr	r0, [pc, #12]	@ (8004888 <stdio_exit_handler+0x14>)
 800487a:	f000 b869 	b.w	8004950 <_fwalk_sglue>
 800487e:	bf00      	nop
 8004880:	20000034 	.word	0x20000034
 8004884:	08005479 	.word	0x08005479
 8004888:	20000044 	.word	0x20000044

0800488c <cleanup_stdio>:
 800488c:	6841      	ldr	r1, [r0, #4]
 800488e:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <cleanup_stdio+0x34>)
 8004890:	4299      	cmp	r1, r3
 8004892:	b510      	push	{r4, lr}
 8004894:	4604      	mov	r4, r0
 8004896:	d001      	beq.n	800489c <cleanup_stdio+0x10>
 8004898:	f000 fdee 	bl	8005478 <_fflush_r>
 800489c:	68a1      	ldr	r1, [r4, #8]
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <cleanup_stdio+0x38>)
 80048a0:	4299      	cmp	r1, r3
 80048a2:	d002      	beq.n	80048aa <cleanup_stdio+0x1e>
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 fde7 	bl	8005478 <_fflush_r>
 80048aa:	68e1      	ldr	r1, [r4, #12]
 80048ac:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <cleanup_stdio+0x3c>)
 80048ae:	4299      	cmp	r1, r3
 80048b0:	d004      	beq.n	80048bc <cleanup_stdio+0x30>
 80048b2:	4620      	mov	r0, r4
 80048b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b8:	f000 bdde 	b.w	8005478 <_fflush_r>
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	bf00      	nop
 80048c0:	20001058 	.word	0x20001058
 80048c4:	200010c0 	.word	0x200010c0
 80048c8:	20001128 	.word	0x20001128

080048cc <global_stdio_init.part.0>:
 80048cc:	b510      	push	{r4, lr}
 80048ce:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <global_stdio_init.part.0+0x30>)
 80048d0:	4c0b      	ldr	r4, [pc, #44]	@ (8004900 <global_stdio_init.part.0+0x34>)
 80048d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004904 <global_stdio_init.part.0+0x38>)
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	4620      	mov	r0, r4
 80048d8:	2200      	movs	r2, #0
 80048da:	2104      	movs	r1, #4
 80048dc:	f7ff ff94 	bl	8004808 <std>
 80048e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048e4:	2201      	movs	r2, #1
 80048e6:	2109      	movs	r1, #9
 80048e8:	f7ff ff8e 	bl	8004808 <std>
 80048ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048f0:	2202      	movs	r2, #2
 80048f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f6:	2112      	movs	r1, #18
 80048f8:	f7ff bf86 	b.w	8004808 <std>
 80048fc:	20001190 	.word	0x20001190
 8004900:	20001058 	.word	0x20001058
 8004904:	08004875 	.word	0x08004875

08004908 <__sfp_lock_acquire>:
 8004908:	4801      	ldr	r0, [pc, #4]	@ (8004910 <__sfp_lock_acquire+0x8>)
 800490a:	f000 b91c 	b.w	8004b46 <__retarget_lock_acquire_recursive>
 800490e:	bf00      	nop
 8004910:	20001199 	.word	0x20001199

08004914 <__sfp_lock_release>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__sfp_lock_release+0x8>)
 8004916:	f000 b917 	b.w	8004b48 <__retarget_lock_release_recursive>
 800491a:	bf00      	nop
 800491c:	20001199 	.word	0x20001199

08004920 <__sinit>:
 8004920:	b510      	push	{r4, lr}
 8004922:	4604      	mov	r4, r0
 8004924:	f7ff fff0 	bl	8004908 <__sfp_lock_acquire>
 8004928:	6a23      	ldr	r3, [r4, #32]
 800492a:	b11b      	cbz	r3, 8004934 <__sinit+0x14>
 800492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004930:	f7ff bff0 	b.w	8004914 <__sfp_lock_release>
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <__sinit+0x28>)
 8004936:	6223      	str	r3, [r4, #32]
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <__sinit+0x2c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f5      	bne.n	800492c <__sinit+0xc>
 8004940:	f7ff ffc4 	bl	80048cc <global_stdio_init.part.0>
 8004944:	e7f2      	b.n	800492c <__sinit+0xc>
 8004946:	bf00      	nop
 8004948:	0800488d 	.word	0x0800488d
 800494c:	20001190 	.word	0x20001190

08004950 <_fwalk_sglue>:
 8004950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004954:	4607      	mov	r7, r0
 8004956:	4688      	mov	r8, r1
 8004958:	4614      	mov	r4, r2
 800495a:	2600      	movs	r6, #0
 800495c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004960:	f1b9 0901 	subs.w	r9, r9, #1
 8004964:	d505      	bpl.n	8004972 <_fwalk_sglue+0x22>
 8004966:	6824      	ldr	r4, [r4, #0]
 8004968:	2c00      	cmp	r4, #0
 800496a:	d1f7      	bne.n	800495c <_fwalk_sglue+0xc>
 800496c:	4630      	mov	r0, r6
 800496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004972:	89ab      	ldrh	r3, [r5, #12]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d907      	bls.n	8004988 <_fwalk_sglue+0x38>
 8004978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800497c:	3301      	adds	r3, #1
 800497e:	d003      	beq.n	8004988 <_fwalk_sglue+0x38>
 8004980:	4629      	mov	r1, r5
 8004982:	4638      	mov	r0, r7
 8004984:	47c0      	blx	r8
 8004986:	4306      	orrs	r6, r0
 8004988:	3568      	adds	r5, #104	@ 0x68
 800498a:	e7e9      	b.n	8004960 <_fwalk_sglue+0x10>

0800498c <siprintf>:
 800498c:	b40e      	push	{r1, r2, r3}
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	@ 0x70
 8004992:	ab1d      	add	r3, sp, #116	@ 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800499c:	4809      	ldr	r0, [pc, #36]	@ (80049c4 <siprintf+0x38>)
 800499e:	9107      	str	r1, [sp, #28]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4909      	ldr	r1, [pc, #36]	@ (80049c8 <siprintf+0x3c>)
 80049a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a8:	9105      	str	r1, [sp, #20]
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	a902      	add	r1, sp, #8
 80049b0:	f000 fa54 	bl	8004e5c <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	b01c      	add	sp, #112	@ 0x70
 80049bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c0:	b003      	add	sp, #12
 80049c2:	4770      	bx	lr
 80049c4:	20000040 	.word	0x20000040
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <__sread>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	460c      	mov	r4, r1
 80049d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d4:	f000 f868 	bl	8004aa8 <_read_r>
 80049d8:	2800      	cmp	r0, #0
 80049da:	bfab      	itete	ge
 80049dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049de:	89a3      	ldrhlt	r3, [r4, #12]
 80049e0:	181b      	addge	r3, r3, r0
 80049e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049e6:	bfac      	ite	ge
 80049e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049ea:	81a3      	strhlt	r3, [r4, #12]
 80049ec:	bd10      	pop	{r4, pc}

080049ee <__swrite>:
 80049ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	461f      	mov	r7, r3
 80049f4:	898b      	ldrh	r3, [r1, #12]
 80049f6:	05db      	lsls	r3, r3, #23
 80049f8:	4605      	mov	r5, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	4616      	mov	r6, r2
 80049fe:	d505      	bpl.n	8004a0c <__swrite+0x1e>
 8004a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a04:	2302      	movs	r3, #2
 8004a06:	2200      	movs	r2, #0
 8004a08:	f000 f83c 	bl	8004a84 <_lseek_r>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	4632      	mov	r2, r6
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	f000 b853 	b.w	8004acc <_write_r>

08004a26 <__sseek>:
 8004a26:	b510      	push	{r4, lr}
 8004a28:	460c      	mov	r4, r1
 8004a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2e:	f000 f829 	bl	8004a84 <_lseek_r>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	bf15      	itete	ne
 8004a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a42:	81a3      	strheq	r3, [r4, #12]
 8004a44:	bf18      	it	ne
 8004a46:	81a3      	strhne	r3, [r4, #12]
 8004a48:	bd10      	pop	{r4, pc}

08004a4a <__sclose>:
 8004a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4e:	f000 b809 	b.w	8004a64 <_close_r>

08004a52 <memset>:
 8004a52:	4402      	add	r2, r0
 8004a54:	4603      	mov	r3, r0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d100      	bne.n	8004a5c <memset+0xa>
 8004a5a:	4770      	bx	lr
 8004a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a60:	e7f9      	b.n	8004a56 <memset+0x4>
	...

08004a64 <_close_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4d06      	ldr	r5, [pc, #24]	@ (8004a80 <_close_r+0x1c>)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	602b      	str	r3, [r5, #0]
 8004a70:	f7fd fc50 	bl	8002314 <_close>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_close_r+0x1a>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_close_r+0x1a>
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	20001194 	.word	0x20001194

08004a84 <_lseek_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d07      	ldr	r5, [pc, #28]	@ (8004aa4 <_lseek_r+0x20>)
 8004a88:	4604      	mov	r4, r0
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	2200      	movs	r2, #0
 8004a90:	602a      	str	r2, [r5, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f7fd fc48 	bl	8002328 <_lseek>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_lseek_r+0x1e>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_lseek_r+0x1e>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	20001194 	.word	0x20001194

08004aa8 <_read_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d07      	ldr	r5, [pc, #28]	@ (8004ac8 <_read_r+0x20>)
 8004aac:	4604      	mov	r4, r0
 8004aae:	4608      	mov	r0, r1
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	602a      	str	r2, [r5, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fd fc12 	bl	80022e0 <_read>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_read_r+0x1e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_read_r+0x1e>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20001194 	.word	0x20001194

08004acc <_write_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	@ (8004aec <_write_r+0x20>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fd fc0d 	bl	80022fa <_write>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_write_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_write_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20001194 	.word	0x20001194

08004af0 <__errno>:
 8004af0:	4b01      	ldr	r3, [pc, #4]	@ (8004af8 <__errno+0x8>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000040 	.word	0x20000040

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4d0d      	ldr	r5, [pc, #52]	@ (8004b34 <__libc_init_array+0x38>)
 8004b00:	4c0d      	ldr	r4, [pc, #52]	@ (8004b38 <__libc_init_array+0x3c>)
 8004b02:	1b64      	subs	r4, r4, r5
 8004b04:	10a4      	asrs	r4, r4, #2
 8004b06:	2600      	movs	r6, #0
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b3c <__libc_init_array+0x40>)
 8004b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b40 <__libc_init_array+0x44>)
 8004b10:	f001 fdb4 	bl	800667c <_init>
 8004b14:	1b64      	subs	r4, r4, r5
 8004b16:	10a4      	asrs	r4, r4, #2
 8004b18:	2600      	movs	r6, #0
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08006c90 	.word	0x08006c90
 8004b38:	08006c90 	.word	0x08006c90
 8004b3c:	08006c90 	.word	0x08006c90
 8004b40:	08006c94 	.word	0x08006c94

08004b44 <__retarget_lock_init_recursive>:
 8004b44:	4770      	bx	lr

08004b46 <__retarget_lock_acquire_recursive>:
 8004b46:	4770      	bx	lr

08004b48 <__retarget_lock_release_recursive>:
 8004b48:	4770      	bx	lr

08004b4a <memcpy>:
 8004b4a:	440a      	add	r2, r1
 8004b4c:	4291      	cmp	r1, r2
 8004b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b52:	d100      	bne.n	8004b56 <memcpy+0xc>
 8004b54:	4770      	bx	lr
 8004b56:	b510      	push	{r4, lr}
 8004b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b60:	4291      	cmp	r1, r2
 8004b62:	d1f9      	bne.n	8004b58 <memcpy+0xe>
 8004b64:	bd10      	pop	{r4, pc}
	...

08004b68 <__assert_func>:
 8004b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b6a:	4614      	mov	r4, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <__assert_func+0x2c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4605      	mov	r5, r0
 8004b74:	68d8      	ldr	r0, [r3, #12]
 8004b76:	b954      	cbnz	r4, 8004b8e <__assert_func+0x26>
 8004b78:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <__assert_func+0x30>)
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b80:	9100      	str	r1, [sp, #0]
 8004b82:	462b      	mov	r3, r5
 8004b84:	4905      	ldr	r1, [pc, #20]	@ (8004b9c <__assert_func+0x34>)
 8004b86:	f000 fc9f 	bl	80054c8 <fiprintf>
 8004b8a:	f000 fcd9 	bl	8005540 <abort>
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <__assert_func+0x38>)
 8004b90:	e7f4      	b.n	8004b7c <__assert_func+0x14>
 8004b92:	bf00      	nop
 8004b94:	20000040 	.word	0x20000040
 8004b98:	08006882 	.word	0x08006882
 8004b9c:	08006854 	.word	0x08006854
 8004ba0:	08006847 	.word	0x08006847

08004ba4 <_free_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d041      	beq.n	8004c30 <_free_r+0x8c>
 8004bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb0:	1f0c      	subs	r4, r1, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfb8      	it	lt
 8004bb6:	18e4      	addlt	r4, r4, r3
 8004bb8:	f000 f8e8 	bl	8004d8c <__malloc_lock>
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <_free_r+0x90>)
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	b933      	cbnz	r3, 8004bd0 <_free_r+0x2c>
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	6014      	str	r4, [r2, #0]
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bcc:	f000 b8e4 	b.w	8004d98 <__malloc_unlock>
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d908      	bls.n	8004be6 <_free_r+0x42>
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	1821      	adds	r1, r4, r0
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	bf01      	itttt	eq
 8004bdc:	6819      	ldreq	r1, [r3, #0]
 8004bde:	685b      	ldreq	r3, [r3, #4]
 8004be0:	1809      	addeq	r1, r1, r0
 8004be2:	6021      	streq	r1, [r4, #0]
 8004be4:	e7ed      	b.n	8004bc2 <_free_r+0x1e>
 8004be6:	461a      	mov	r2, r3
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b10b      	cbz	r3, 8004bf0 <_free_r+0x4c>
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d9fa      	bls.n	8004be6 <_free_r+0x42>
 8004bf0:	6811      	ldr	r1, [r2, #0]
 8004bf2:	1850      	adds	r0, r2, r1
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d10b      	bne.n	8004c10 <_free_r+0x6c>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	4401      	add	r1, r0
 8004bfc:	1850      	adds	r0, r2, r1
 8004bfe:	4283      	cmp	r3, r0
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	d1e0      	bne.n	8004bc6 <_free_r+0x22>
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	6053      	str	r3, [r2, #4]
 8004c0a:	4408      	add	r0, r1
 8004c0c:	6010      	str	r0, [r2, #0]
 8004c0e:	e7da      	b.n	8004bc6 <_free_r+0x22>
 8004c10:	d902      	bls.n	8004c18 <_free_r+0x74>
 8004c12:	230c      	movs	r3, #12
 8004c14:	602b      	str	r3, [r5, #0]
 8004c16:	e7d6      	b.n	8004bc6 <_free_r+0x22>
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	1821      	adds	r1, r4, r0
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	bf04      	itt	eq
 8004c20:	6819      	ldreq	r1, [r3, #0]
 8004c22:	685b      	ldreq	r3, [r3, #4]
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	bf04      	itt	eq
 8004c28:	1809      	addeq	r1, r1, r0
 8004c2a:	6021      	streq	r1, [r4, #0]
 8004c2c:	6054      	str	r4, [r2, #4]
 8004c2e:	e7ca      	b.n	8004bc6 <_free_r+0x22>
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
 8004c32:	bf00      	nop
 8004c34:	200011a0 	.word	0x200011a0

08004c38 <malloc>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	@ (8004c44 <malloc+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f000 b825 	b.w	8004c8c <_malloc_r>
 8004c42:	bf00      	nop
 8004c44:	20000040 	.word	0x20000040

08004c48 <sbrk_aligned>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c88 <sbrk_aligned+0x40>)
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	4605      	mov	r5, r0
 8004c52:	b911      	cbnz	r1, 8004c5a <sbrk_aligned+0x12>
 8004c54:	f000 fc64 	bl	8005520 <_sbrk_r>
 8004c58:	6030      	str	r0, [r6, #0]
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fc5f 	bl	8005520 <_sbrk_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d103      	bne.n	8004c6e <sbrk_aligned+0x26>
 8004c66:	f04f 34ff 	mov.w	r4, #4294967295
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	1cc4      	adds	r4, r0, #3
 8004c70:	f024 0403 	bic.w	r4, r4, #3
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d0f8      	beq.n	8004c6a <sbrk_aligned+0x22>
 8004c78:	1a21      	subs	r1, r4, r0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 fc50 	bl	8005520 <_sbrk_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d1f2      	bne.n	8004c6a <sbrk_aligned+0x22>
 8004c84:	e7ef      	b.n	8004c66 <sbrk_aligned+0x1e>
 8004c86:	bf00      	nop
 8004c88:	2000119c 	.word	0x2000119c

08004c8c <_malloc_r>:
 8004c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c90:	1ccd      	adds	r5, r1, #3
 8004c92:	f025 0503 	bic.w	r5, r5, #3
 8004c96:	3508      	adds	r5, #8
 8004c98:	2d0c      	cmp	r5, #12
 8004c9a:	bf38      	it	cc
 8004c9c:	250c      	movcc	r5, #12
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	db01      	blt.n	8004ca8 <_malloc_r+0x1c>
 8004ca4:	42a9      	cmp	r1, r5
 8004ca6:	d904      	bls.n	8004cb2 <_malloc_r+0x26>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	2000      	movs	r0, #0
 8004cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d88 <_malloc_r+0xfc>
 8004cb6:	f000 f869 	bl	8004d8c <__malloc_lock>
 8004cba:	f8d8 3000 	ldr.w	r3, [r8]
 8004cbe:	461c      	mov	r4, r3
 8004cc0:	bb44      	cbnz	r4, 8004d14 <_malloc_r+0x88>
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f7ff ffbf 	bl	8004c48 <sbrk_aligned>
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	4604      	mov	r4, r0
 8004cce:	d158      	bne.n	8004d82 <_malloc_r+0xf6>
 8004cd0:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd4:	4627      	mov	r7, r4
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d143      	bne.n	8004d62 <_malloc_r+0xd6>
 8004cda:	2c00      	cmp	r4, #0
 8004cdc:	d04b      	beq.n	8004d76 <_malloc_r+0xea>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	eb04 0903 	add.w	r9, r4, r3
 8004ce8:	f000 fc1a 	bl	8005520 <_sbrk_r>
 8004cec:	4581      	cmp	r9, r0
 8004cee:	d142      	bne.n	8004d76 <_malloc_r+0xea>
 8004cf0:	6821      	ldr	r1, [r4, #0]
 8004cf2:	1a6d      	subs	r5, r5, r1
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f7ff ffa6 	bl	8004c48 <sbrk_aligned>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d03a      	beq.n	8004d76 <_malloc_r+0xea>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	442b      	add	r3, r5
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	f8d8 3000 	ldr.w	r3, [r8]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	bb62      	cbnz	r2, 8004d68 <_malloc_r+0xdc>
 8004d0e:	f8c8 7000 	str.w	r7, [r8]
 8004d12:	e00f      	b.n	8004d34 <_malloc_r+0xa8>
 8004d14:	6822      	ldr	r2, [r4, #0]
 8004d16:	1b52      	subs	r2, r2, r5
 8004d18:	d420      	bmi.n	8004d5c <_malloc_r+0xd0>
 8004d1a:	2a0b      	cmp	r2, #11
 8004d1c:	d917      	bls.n	8004d4e <_malloc_r+0xc2>
 8004d1e:	1961      	adds	r1, r4, r5
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	6025      	str	r5, [r4, #0]
 8004d24:	bf18      	it	ne
 8004d26:	6059      	strne	r1, [r3, #4]
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	bf08      	it	eq
 8004d2c:	f8c8 1000 	streq.w	r1, [r8]
 8004d30:	5162      	str	r2, [r4, r5]
 8004d32:	604b      	str	r3, [r1, #4]
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 f82f 	bl	8004d98 <__malloc_unlock>
 8004d3a:	f104 000b 	add.w	r0, r4, #11
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	f020 0007 	bic.w	r0, r0, #7
 8004d44:	1ac2      	subs	r2, r0, r3
 8004d46:	bf1c      	itt	ne
 8004d48:	1a1b      	subne	r3, r3, r0
 8004d4a:	50a3      	strne	r3, [r4, r2]
 8004d4c:	e7af      	b.n	8004cae <_malloc_r+0x22>
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	bf0c      	ite	eq
 8004d54:	f8c8 2000 	streq.w	r2, [r8]
 8004d58:	605a      	strne	r2, [r3, #4]
 8004d5a:	e7eb      	b.n	8004d34 <_malloc_r+0xa8>
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	6864      	ldr	r4, [r4, #4]
 8004d60:	e7ae      	b.n	8004cc0 <_malloc_r+0x34>
 8004d62:	463c      	mov	r4, r7
 8004d64:	687f      	ldr	r7, [r7, #4]
 8004d66:	e7b6      	b.n	8004cd6 <_malloc_r+0x4a>
 8004d68:	461a      	mov	r2, r3
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d1fb      	bne.n	8004d68 <_malloc_r+0xdc>
 8004d70:	2300      	movs	r3, #0
 8004d72:	6053      	str	r3, [r2, #4]
 8004d74:	e7de      	b.n	8004d34 <_malloc_r+0xa8>
 8004d76:	230c      	movs	r3, #12
 8004d78:	6033      	str	r3, [r6, #0]
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 f80c 	bl	8004d98 <__malloc_unlock>
 8004d80:	e794      	b.n	8004cac <_malloc_r+0x20>
 8004d82:	6005      	str	r5, [r0, #0]
 8004d84:	e7d6      	b.n	8004d34 <_malloc_r+0xa8>
 8004d86:	bf00      	nop
 8004d88:	200011a0 	.word	0x200011a0

08004d8c <__malloc_lock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	@ (8004d94 <__malloc_lock+0x8>)
 8004d8e:	f7ff beda 	b.w	8004b46 <__retarget_lock_acquire_recursive>
 8004d92:	bf00      	nop
 8004d94:	20001198 	.word	0x20001198

08004d98 <__malloc_unlock>:
 8004d98:	4801      	ldr	r0, [pc, #4]	@ (8004da0 <__malloc_unlock+0x8>)
 8004d9a:	f7ff bed5 	b.w	8004b48 <__retarget_lock_release_recursive>
 8004d9e:	bf00      	nop
 8004da0:	20001198 	.word	0x20001198

08004da4 <__ssputs_r>:
 8004da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	688e      	ldr	r6, [r1, #8]
 8004daa:	461f      	mov	r7, r3
 8004dac:	42be      	cmp	r6, r7
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	4682      	mov	sl, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	4690      	mov	r8, r2
 8004db6:	d82d      	bhi.n	8004e14 <__ssputs_r+0x70>
 8004db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dc0:	d026      	beq.n	8004e10 <__ssputs_r+0x6c>
 8004dc2:	6965      	ldr	r5, [r4, #20]
 8004dc4:	6909      	ldr	r1, [r1, #16]
 8004dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dca:	eba3 0901 	sub.w	r9, r3, r1
 8004dce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd2:	1c7b      	adds	r3, r7, #1
 8004dd4:	444b      	add	r3, r9
 8004dd6:	106d      	asrs	r5, r5, #1
 8004dd8:	429d      	cmp	r5, r3
 8004dda:	bf38      	it	cc
 8004ddc:	461d      	movcc	r5, r3
 8004dde:	0553      	lsls	r3, r2, #21
 8004de0:	d527      	bpl.n	8004e32 <__ssputs_r+0x8e>
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7ff ff52 	bl	8004c8c <_malloc_r>
 8004de8:	4606      	mov	r6, r0
 8004dea:	b360      	cbz	r0, 8004e46 <__ssputs_r+0xa2>
 8004dec:	6921      	ldr	r1, [r4, #16]
 8004dee:	464a      	mov	r2, r9
 8004df0:	f7ff feab 	bl	8004b4a <memcpy>
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	6126      	str	r6, [r4, #16]
 8004e02:	6165      	str	r5, [r4, #20]
 8004e04:	444e      	add	r6, r9
 8004e06:	eba5 0509 	sub.w	r5, r5, r9
 8004e0a:	6026      	str	r6, [r4, #0]
 8004e0c:	60a5      	str	r5, [r4, #8]
 8004e0e:	463e      	mov	r6, r7
 8004e10:	42be      	cmp	r6, r7
 8004e12:	d900      	bls.n	8004e16 <__ssputs_r+0x72>
 8004e14:	463e      	mov	r6, r7
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	4632      	mov	r2, r6
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	f000 fb66 	bl	80054ec <memmove>
 8004e20:	68a3      	ldr	r3, [r4, #8]
 8004e22:	1b9b      	subs	r3, r3, r6
 8004e24:	60a3      	str	r3, [r4, #8]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	4433      	add	r3, r6
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e32:	462a      	mov	r2, r5
 8004e34:	f000 fb8b 	bl	800554e <_realloc_r>
 8004e38:	4606      	mov	r6, r0
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d1e0      	bne.n	8004e00 <__ssputs_r+0x5c>
 8004e3e:	6921      	ldr	r1, [r4, #16]
 8004e40:	4650      	mov	r0, sl
 8004e42:	f7ff feaf 	bl	8004ba4 <_free_r>
 8004e46:	230c      	movs	r3, #12
 8004e48:	f8ca 3000 	str.w	r3, [sl]
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	e7e9      	b.n	8004e2e <__ssputs_r+0x8a>
	...

08004e5c <_svfiprintf_r>:
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	4698      	mov	r8, r3
 8004e62:	898b      	ldrh	r3, [r1, #12]
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	b09d      	sub	sp, #116	@ 0x74
 8004e68:	4607      	mov	r7, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	d510      	bpl.n	8004e92 <_svfiprintf_r+0x36>
 8004e70:	690b      	ldr	r3, [r1, #16]
 8004e72:	b973      	cbnz	r3, 8004e92 <_svfiprintf_r+0x36>
 8004e74:	2140      	movs	r1, #64	@ 0x40
 8004e76:	f7ff ff09 	bl	8004c8c <_malloc_r>
 8004e7a:	6028      	str	r0, [r5, #0]
 8004e7c:	6128      	str	r0, [r5, #16]
 8004e7e:	b930      	cbnz	r0, 8004e8e <_svfiprintf_r+0x32>
 8004e80:	230c      	movs	r3, #12
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	b01d      	add	sp, #116	@ 0x74
 8004e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8e:	2340      	movs	r3, #64	@ 0x40
 8004e90:	616b      	str	r3, [r5, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e96:	2320      	movs	r3, #32
 8004e98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea0:	2330      	movs	r3, #48	@ 0x30
 8004ea2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005040 <_svfiprintf_r+0x1e4>
 8004ea6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eaa:	f04f 0901 	mov.w	r9, #1
 8004eae:	4623      	mov	r3, r4
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb6:	b10a      	cbz	r2, 8004ebc <_svfiprintf_r+0x60>
 8004eb8:	2a25      	cmp	r2, #37	@ 0x25
 8004eba:	d1f9      	bne.n	8004eb0 <_svfiprintf_r+0x54>
 8004ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec0:	d00b      	beq.n	8004eda <_svfiprintf_r+0x7e>
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f7ff ff6b 	bl	8004da4 <__ssputs_r>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f000 80a7 	beq.w	8005022 <_svfiprintf_r+0x1c6>
 8004ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ed6:	445a      	add	r2, fp
 8004ed8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eda:	f89a 3000 	ldrb.w	r3, [sl]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 809f 	beq.w	8005022 <_svfiprintf_r+0x1c6>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eee:	f10a 0a01 	add.w	sl, sl, #1
 8004ef2:	9304      	str	r3, [sp, #16]
 8004ef4:	9307      	str	r3, [sp, #28]
 8004ef6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004efa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004efc:	4654      	mov	r4, sl
 8004efe:	2205      	movs	r2, #5
 8004f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f04:	484e      	ldr	r0, [pc, #312]	@ (8005040 <_svfiprintf_r+0x1e4>)
 8004f06:	f7fb f973 	bl	80001f0 <memchr>
 8004f0a:	9a04      	ldr	r2, [sp, #16]
 8004f0c:	b9d8      	cbnz	r0, 8004f46 <_svfiprintf_r+0xea>
 8004f0e:	06d0      	lsls	r0, r2, #27
 8004f10:	bf44      	itt	mi
 8004f12:	2320      	movmi	r3, #32
 8004f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f18:	0711      	lsls	r1, r2, #28
 8004f1a:	bf44      	itt	mi
 8004f1c:	232b      	movmi	r3, #43	@ 0x2b
 8004f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f22:	f89a 3000 	ldrb.w	r3, [sl]
 8004f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f28:	d015      	beq.n	8004f56 <_svfiprintf_r+0xfa>
 8004f2a:	9a07      	ldr	r2, [sp, #28]
 8004f2c:	4654      	mov	r4, sl
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f04f 0c0a 	mov.w	ip, #10
 8004f34:	4621      	mov	r1, r4
 8004f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3a:	3b30      	subs	r3, #48	@ 0x30
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d94b      	bls.n	8004fd8 <_svfiprintf_r+0x17c>
 8004f40:	b1b0      	cbz	r0, 8004f70 <_svfiprintf_r+0x114>
 8004f42:	9207      	str	r2, [sp, #28]
 8004f44:	e014      	b.n	8004f70 <_svfiprintf_r+0x114>
 8004f46:	eba0 0308 	sub.w	r3, r0, r8
 8004f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	46a2      	mov	sl, r4
 8004f54:	e7d2      	b.n	8004efc <_svfiprintf_r+0xa0>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	1d19      	adds	r1, r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9103      	str	r1, [sp, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfbb      	ittet	lt
 8004f62:	425b      	neglt	r3, r3
 8004f64:	f042 0202 	orrlt.w	r2, r2, #2
 8004f68:	9307      	strge	r3, [sp, #28]
 8004f6a:	9307      	strlt	r3, [sp, #28]
 8004f6c:	bfb8      	it	lt
 8004f6e:	9204      	strlt	r2, [sp, #16]
 8004f70:	7823      	ldrb	r3, [r4, #0]
 8004f72:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f74:	d10a      	bne.n	8004f8c <_svfiprintf_r+0x130>
 8004f76:	7863      	ldrb	r3, [r4, #1]
 8004f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f7a:	d132      	bne.n	8004fe2 <_svfiprintf_r+0x186>
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	9203      	str	r2, [sp, #12]
 8004f84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f88:	3402      	adds	r4, #2
 8004f8a:	9305      	str	r3, [sp, #20]
 8004f8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005050 <_svfiprintf_r+0x1f4>
 8004f90:	7821      	ldrb	r1, [r4, #0]
 8004f92:	2203      	movs	r2, #3
 8004f94:	4650      	mov	r0, sl
 8004f96:	f7fb f92b 	bl	80001f0 <memchr>
 8004f9a:	b138      	cbz	r0, 8004fac <_svfiprintf_r+0x150>
 8004f9c:	9b04      	ldr	r3, [sp, #16]
 8004f9e:	eba0 000a 	sub.w	r0, r0, sl
 8004fa2:	2240      	movs	r2, #64	@ 0x40
 8004fa4:	4082      	lsls	r2, r0
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	3401      	adds	r4, #1
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb0:	4824      	ldr	r0, [pc, #144]	@ (8005044 <_svfiprintf_r+0x1e8>)
 8004fb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fb6:	2206      	movs	r2, #6
 8004fb8:	f7fb f91a 	bl	80001f0 <memchr>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d036      	beq.n	800502e <_svfiprintf_r+0x1d2>
 8004fc0:	4b21      	ldr	r3, [pc, #132]	@ (8005048 <_svfiprintf_r+0x1ec>)
 8004fc2:	bb1b      	cbnz	r3, 800500c <_svfiprintf_r+0x1b0>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	3307      	adds	r3, #7
 8004fc8:	f023 0307 	bic.w	r3, r3, #7
 8004fcc:	3308      	adds	r3, #8
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd2:	4433      	add	r3, r6
 8004fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd6:	e76a      	b.n	8004eae <_svfiprintf_r+0x52>
 8004fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fdc:	460c      	mov	r4, r1
 8004fde:	2001      	movs	r0, #1
 8004fe0:	e7a8      	b.n	8004f34 <_svfiprintf_r+0xd8>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	3401      	adds	r4, #1
 8004fe6:	9305      	str	r3, [sp, #20]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f04f 0c0a 	mov.w	ip, #10
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff4:	3a30      	subs	r2, #48	@ 0x30
 8004ff6:	2a09      	cmp	r2, #9
 8004ff8:	d903      	bls.n	8005002 <_svfiprintf_r+0x1a6>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0c6      	beq.n	8004f8c <_svfiprintf_r+0x130>
 8004ffe:	9105      	str	r1, [sp, #20]
 8005000:	e7c4      	b.n	8004f8c <_svfiprintf_r+0x130>
 8005002:	fb0c 2101 	mla	r1, ip, r1, r2
 8005006:	4604      	mov	r4, r0
 8005008:	2301      	movs	r3, #1
 800500a:	e7f0      	b.n	8004fee <_svfiprintf_r+0x192>
 800500c:	ab03      	add	r3, sp, #12
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	462a      	mov	r2, r5
 8005012:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <_svfiprintf_r+0x1f0>)
 8005014:	a904      	add	r1, sp, #16
 8005016:	4638      	mov	r0, r7
 8005018:	f3af 8000 	nop.w
 800501c:	1c42      	adds	r2, r0, #1
 800501e:	4606      	mov	r6, r0
 8005020:	d1d6      	bne.n	8004fd0 <_svfiprintf_r+0x174>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	065b      	lsls	r3, r3, #25
 8005026:	f53f af2d 	bmi.w	8004e84 <_svfiprintf_r+0x28>
 800502a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800502c:	e72c      	b.n	8004e88 <_svfiprintf_r+0x2c>
 800502e:	ab03      	add	r3, sp, #12
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	462a      	mov	r2, r5
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <_svfiprintf_r+0x1f0>)
 8005036:	a904      	add	r1, sp, #16
 8005038:	4638      	mov	r0, r7
 800503a:	f000 f879 	bl	8005130 <_printf_i>
 800503e:	e7ed      	b.n	800501c <_svfiprintf_r+0x1c0>
 8005040:	08006883 	.word	0x08006883
 8005044:	0800688d 	.word	0x0800688d
 8005048:	00000000 	.word	0x00000000
 800504c:	08004da5 	.word	0x08004da5
 8005050:	08006889 	.word	0x08006889

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4698      	mov	r8, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005064:	4293      	cmp	r3, r2
 8005066:	bfb8      	it	lt
 8005068:	4613      	movlt	r3, r2
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005070:	4607      	mov	r7, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc26      	bgt.n	80050ea <_printf_common+0x96>
 800509c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	3b00      	subs	r3, #0
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d42b      	bmi.n	8005104 <_printf_common+0xb0>
 80050ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b0:	4641      	mov	r1, r8
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c8      	blx	r9
 80050b6:	3001      	adds	r0, #1
 80050b8:	d01e      	beq.n	80050f8 <_printf_common+0xa4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf02      	ittt	eq
 80050c6:	68e5      	ldreq	r5, [r4, #12]
 80050c8:	6833      	ldreq	r3, [r6, #0]
 80050ca:	1aed      	subeq	r5, r5, r3
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	bf0c      	ite	eq
 80050d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d4:	2500      	movne	r5, #0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfc4      	itt	gt
 80050da:	1a9b      	subgt	r3, r3, r2
 80050dc:	18ed      	addgt	r5, r5, r3
 80050de:	2600      	movs	r6, #0
 80050e0:	341a      	adds	r4, #26
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d11a      	bne.n	800511c <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e008      	b.n	80050fc <_printf_common+0xa8>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	4641      	mov	r1, r8
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c8      	blx	r9
 80050f4:	3001      	adds	r0, #1
 80050f6:	d103      	bne.n	8005100 <_printf_common+0xac>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	3501      	adds	r5, #1
 8005102:	e7c6      	b.n	8005092 <_printf_common+0x3e>
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	2030      	movs	r0, #48	@ 0x30
 800510a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800510e:	4422      	add	r2, r4
 8005110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005118:	3302      	adds	r3, #2
 800511a:	e7c7      	b.n	80050ac <_printf_common+0x58>
 800511c:	2301      	movs	r3, #1
 800511e:	4622      	mov	r2, r4
 8005120:	4641      	mov	r1, r8
 8005122:	4638      	mov	r0, r7
 8005124:	47c8      	blx	r9
 8005126:	3001      	adds	r0, #1
 8005128:	d0e6      	beq.n	80050f8 <_printf_common+0xa4>
 800512a:	3601      	adds	r6, #1
 800512c:	e7d9      	b.n	80050e2 <_printf_common+0x8e>
	...

08005130 <_printf_i>:
 8005130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	7e0f      	ldrb	r7, [r1, #24]
 8005136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005138:	2f78      	cmp	r7, #120	@ 0x78
 800513a:	4691      	mov	r9, r2
 800513c:	4680      	mov	r8, r0
 800513e:	460c      	mov	r4, r1
 8005140:	469a      	mov	sl, r3
 8005142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005146:	d807      	bhi.n	8005158 <_printf_i+0x28>
 8005148:	2f62      	cmp	r7, #98	@ 0x62
 800514a:	d80a      	bhi.n	8005162 <_printf_i+0x32>
 800514c:	2f00      	cmp	r7, #0
 800514e:	f000 80d2 	beq.w	80052f6 <_printf_i+0x1c6>
 8005152:	2f58      	cmp	r7, #88	@ 0x58
 8005154:	f000 80b9 	beq.w	80052ca <_printf_i+0x19a>
 8005158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800515c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005160:	e03a      	b.n	80051d8 <_printf_i+0xa8>
 8005162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005166:	2b15      	cmp	r3, #21
 8005168:	d8f6      	bhi.n	8005158 <_printf_i+0x28>
 800516a:	a101      	add	r1, pc, #4	@ (adr r1, 8005170 <_printf_i+0x40>)
 800516c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051dd 	.word	0x080051dd
 8005178:	08005159 	.word	0x08005159
 800517c:	08005159 	.word	0x08005159
 8005180:	08005159 	.word	0x08005159
 8005184:	08005159 	.word	0x08005159
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005159 	.word	0x08005159
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	080052dd 	.word	0x080052dd
 80051a0:	08005207 	.word	0x08005207
 80051a4:	08005297 	.word	0x08005297
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	080052ff 	.word	0x080052ff
 80051b4:	08005159 	.word	0x08005159
 80051b8:	08005207 	.word	0x08005207
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	0800529f 	.word	0x0800529f
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6032      	str	r2, [r6, #0]
 80051d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d8:	2301      	movs	r3, #1
 80051da:	e09d      	b.n	8005318 <_printf_i+0x1e8>
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	1d19      	adds	r1, r3, #4
 80051e2:	6031      	str	r1, [r6, #0]
 80051e4:	0606      	lsls	r6, r0, #24
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0xbc>
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	e003      	b.n	80051f4 <_printf_i+0xc4>
 80051ec:	0645      	lsls	r5, r0, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0xb8>
 80051f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	da03      	bge.n	8005200 <_printf_i+0xd0>
 80051f8:	232d      	movs	r3, #45	@ 0x2d
 80051fa:	426d      	negs	r5, r5
 80051fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005200:	4859      	ldr	r0, [pc, #356]	@ (8005368 <_printf_i+0x238>)
 8005202:	230a      	movs	r3, #10
 8005204:	e011      	b.n	800522a <_printf_i+0xfa>
 8005206:	6821      	ldr	r1, [r4, #0]
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	0608      	lsls	r0, r1, #24
 800520c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005210:	d402      	bmi.n	8005218 <_printf_i+0xe8>
 8005212:	0649      	lsls	r1, r1, #25
 8005214:	bf48      	it	mi
 8005216:	b2ad      	uxthmi	r5, r5
 8005218:	2f6f      	cmp	r7, #111	@ 0x6f
 800521a:	4853      	ldr	r0, [pc, #332]	@ (8005368 <_printf_i+0x238>)
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	bf14      	ite	ne
 8005220:	230a      	movne	r3, #10
 8005222:	2308      	moveq	r3, #8
 8005224:	2100      	movs	r1, #0
 8005226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800522a:	6866      	ldr	r6, [r4, #4]
 800522c:	60a6      	str	r6, [r4, #8]
 800522e:	2e00      	cmp	r6, #0
 8005230:	bfa2      	ittt	ge
 8005232:	6821      	ldrge	r1, [r4, #0]
 8005234:	f021 0104 	bicge.w	r1, r1, #4
 8005238:	6021      	strge	r1, [r4, #0]
 800523a:	b90d      	cbnz	r5, 8005240 <_printf_i+0x110>
 800523c:	2e00      	cmp	r6, #0
 800523e:	d04b      	beq.n	80052d8 <_printf_i+0x1a8>
 8005240:	4616      	mov	r6, r2
 8005242:	fbb5 f1f3 	udiv	r1, r5, r3
 8005246:	fb03 5711 	mls	r7, r3, r1, r5
 800524a:	5dc7      	ldrb	r7, [r0, r7]
 800524c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005250:	462f      	mov	r7, r5
 8005252:	42bb      	cmp	r3, r7
 8005254:	460d      	mov	r5, r1
 8005256:	d9f4      	bls.n	8005242 <_printf_i+0x112>
 8005258:	2b08      	cmp	r3, #8
 800525a:	d10b      	bne.n	8005274 <_printf_i+0x144>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	07df      	lsls	r7, r3, #31
 8005260:	d508      	bpl.n	8005274 <_printf_i+0x144>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	6861      	ldr	r1, [r4, #4]
 8005266:	4299      	cmp	r1, r3
 8005268:	bfde      	ittt	le
 800526a:	2330      	movle	r3, #48	@ 0x30
 800526c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005274:	1b92      	subs	r2, r2, r6
 8005276:	6122      	str	r2, [r4, #16]
 8005278:	f8cd a000 	str.w	sl, [sp]
 800527c:	464b      	mov	r3, r9
 800527e:	aa03      	add	r2, sp, #12
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f7ff fee6 	bl	8005054 <_printf_common>
 8005288:	3001      	adds	r0, #1
 800528a:	d14a      	bne.n	8005322 <_printf_i+0x1f2>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	b004      	add	sp, #16
 8005292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	4833      	ldr	r0, [pc, #204]	@ (800536c <_printf_i+0x23c>)
 80052a0:	2778      	movs	r7, #120	@ 0x78
 80052a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	6831      	ldr	r1, [r6, #0]
 80052aa:	061f      	lsls	r7, r3, #24
 80052ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80052b0:	d402      	bmi.n	80052b8 <_printf_i+0x188>
 80052b2:	065f      	lsls	r7, r3, #25
 80052b4:	bf48      	it	mi
 80052b6:	b2ad      	uxthmi	r5, r5
 80052b8:	6031      	str	r1, [r6, #0]
 80052ba:	07d9      	lsls	r1, r3, #31
 80052bc:	bf44      	itt	mi
 80052be:	f043 0320 	orrmi.w	r3, r3, #32
 80052c2:	6023      	strmi	r3, [r4, #0]
 80052c4:	b11d      	cbz	r5, 80052ce <_printf_i+0x19e>
 80052c6:	2310      	movs	r3, #16
 80052c8:	e7ac      	b.n	8005224 <_printf_i+0xf4>
 80052ca:	4827      	ldr	r0, [pc, #156]	@ (8005368 <_printf_i+0x238>)
 80052cc:	e7e9      	b.n	80052a2 <_printf_i+0x172>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f023 0320 	bic.w	r3, r3, #32
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	e7f6      	b.n	80052c6 <_printf_i+0x196>
 80052d8:	4616      	mov	r6, r2
 80052da:	e7bd      	b.n	8005258 <_printf_i+0x128>
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	6825      	ldr	r5, [r4, #0]
 80052e0:	6961      	ldr	r1, [r4, #20]
 80052e2:	1d18      	adds	r0, r3, #4
 80052e4:	6030      	str	r0, [r6, #0]
 80052e6:	062e      	lsls	r6, r5, #24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0x1c0>
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0x1c6>
 80052f0:	0668      	lsls	r0, r5, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0x1bc>
 80052f4:	8019      	strh	r1, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	4616      	mov	r6, r2
 80052fc:	e7bc      	b.n	8005278 <_printf_i+0x148>
 80052fe:	6833      	ldr	r3, [r6, #0]
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	6032      	str	r2, [r6, #0]
 8005304:	681e      	ldr	r6, [r3, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	4630      	mov	r0, r6
 800530c:	f7fa ff70 	bl	80001f0 <memchr>
 8005310:	b108      	cbz	r0, 8005316 <_printf_i+0x1e6>
 8005312:	1b80      	subs	r0, r0, r6
 8005314:	6060      	str	r0, [r4, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005320:	e7aa      	b.n	8005278 <_printf_i+0x148>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	4632      	mov	r2, r6
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d0ad      	beq.n	800528c <_printf_i+0x15c>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d413      	bmi.n	800535e <_printf_i+0x22e>
 8005336:	68e0      	ldr	r0, [r4, #12]
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	4298      	cmp	r0, r3
 800533c:	bfb8      	it	lt
 800533e:	4618      	movlt	r0, r3
 8005340:	e7a6      	b.n	8005290 <_printf_i+0x160>
 8005342:	2301      	movs	r3, #1
 8005344:	4632      	mov	r2, r6
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d09d      	beq.n	800528c <_printf_i+0x15c>
 8005350:	3501      	adds	r5, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	42ab      	cmp	r3, r5
 800535a:	dcf2      	bgt.n	8005342 <_printf_i+0x212>
 800535c:	e7eb      	b.n	8005336 <_printf_i+0x206>
 800535e:	2500      	movs	r5, #0
 8005360:	f104 0619 	add.w	r6, r4, #25
 8005364:	e7f5      	b.n	8005352 <_printf_i+0x222>
 8005366:	bf00      	nop
 8005368:	08006894 	.word	0x08006894
 800536c:	080068a5 	.word	0x080068a5

08005370 <__sflush_r>:
 8005370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005378:	0716      	lsls	r6, r2, #28
 800537a:	4605      	mov	r5, r0
 800537c:	460c      	mov	r4, r1
 800537e:	d454      	bmi.n	800542a <__sflush_r+0xba>
 8005380:	684b      	ldr	r3, [r1, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	dc02      	bgt.n	800538c <__sflush_r+0x1c>
 8005386:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	dd48      	ble.n	800541e <__sflush_r+0xae>
 800538c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800538e:	2e00      	cmp	r6, #0
 8005390:	d045      	beq.n	800541e <__sflush_r+0xae>
 8005392:	2300      	movs	r3, #0
 8005394:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005398:	682f      	ldr	r7, [r5, #0]
 800539a:	6a21      	ldr	r1, [r4, #32]
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	d030      	beq.n	8005402 <__sflush_r+0x92>
 80053a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	0759      	lsls	r1, r3, #29
 80053a6:	d505      	bpl.n	80053b4 <__sflush_r+0x44>
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053ae:	b10b      	cbz	r3, 80053b4 <__sflush_r+0x44>
 80053b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053b8:	6a21      	ldr	r1, [r4, #32]
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b0      	blx	r6
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	d106      	bne.n	80053d2 <__sflush_r+0x62>
 80053c4:	6829      	ldr	r1, [r5, #0]
 80053c6:	291d      	cmp	r1, #29
 80053c8:	d82b      	bhi.n	8005422 <__sflush_r+0xb2>
 80053ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <__sflush_r+0x104>)
 80053cc:	410a      	asrs	r2, r1
 80053ce:	07d6      	lsls	r6, r2, #31
 80053d0:	d427      	bmi.n	8005422 <__sflush_r+0xb2>
 80053d2:	2200      	movs	r2, #0
 80053d4:	6062      	str	r2, [r4, #4]
 80053d6:	04d9      	lsls	r1, r3, #19
 80053d8:	6922      	ldr	r2, [r4, #16]
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	d504      	bpl.n	80053e8 <__sflush_r+0x78>
 80053de:	1c42      	adds	r2, r0, #1
 80053e0:	d101      	bne.n	80053e6 <__sflush_r+0x76>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	b903      	cbnz	r3, 80053e8 <__sflush_r+0x78>
 80053e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80053e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053ea:	602f      	str	r7, [r5, #0]
 80053ec:	b1b9      	cbz	r1, 800541e <__sflush_r+0xae>
 80053ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053f2:	4299      	cmp	r1, r3
 80053f4:	d002      	beq.n	80053fc <__sflush_r+0x8c>
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7ff fbd4 	bl	8004ba4 <_free_r>
 80053fc:	2300      	movs	r3, #0
 80053fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005400:	e00d      	b.n	800541e <__sflush_r+0xae>
 8005402:	2301      	movs	r3, #1
 8005404:	4628      	mov	r0, r5
 8005406:	47b0      	blx	r6
 8005408:	4602      	mov	r2, r0
 800540a:	1c50      	adds	r0, r2, #1
 800540c:	d1c9      	bne.n	80053a2 <__sflush_r+0x32>
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0c6      	beq.n	80053a2 <__sflush_r+0x32>
 8005414:	2b1d      	cmp	r3, #29
 8005416:	d001      	beq.n	800541c <__sflush_r+0xac>
 8005418:	2b16      	cmp	r3, #22
 800541a:	d11e      	bne.n	800545a <__sflush_r+0xea>
 800541c:	602f      	str	r7, [r5, #0]
 800541e:	2000      	movs	r0, #0
 8005420:	e022      	b.n	8005468 <__sflush_r+0xf8>
 8005422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005426:	b21b      	sxth	r3, r3
 8005428:	e01b      	b.n	8005462 <__sflush_r+0xf2>
 800542a:	690f      	ldr	r7, [r1, #16]
 800542c:	2f00      	cmp	r7, #0
 800542e:	d0f6      	beq.n	800541e <__sflush_r+0xae>
 8005430:	0793      	lsls	r3, r2, #30
 8005432:	680e      	ldr	r6, [r1, #0]
 8005434:	bf08      	it	eq
 8005436:	694b      	ldreq	r3, [r1, #20]
 8005438:	600f      	str	r7, [r1, #0]
 800543a:	bf18      	it	ne
 800543c:	2300      	movne	r3, #0
 800543e:	eba6 0807 	sub.w	r8, r6, r7
 8005442:	608b      	str	r3, [r1, #8]
 8005444:	f1b8 0f00 	cmp.w	r8, #0
 8005448:	dde9      	ble.n	800541e <__sflush_r+0xae>
 800544a:	6a21      	ldr	r1, [r4, #32]
 800544c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800544e:	4643      	mov	r3, r8
 8005450:	463a      	mov	r2, r7
 8005452:	4628      	mov	r0, r5
 8005454:	47b0      	blx	r6
 8005456:	2800      	cmp	r0, #0
 8005458:	dc08      	bgt.n	800546c <__sflush_r+0xfc>
 800545a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800545e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546c:	4407      	add	r7, r0
 800546e:	eba8 0800 	sub.w	r8, r8, r0
 8005472:	e7e7      	b.n	8005444 <__sflush_r+0xd4>
 8005474:	dfbffffe 	.word	0xdfbffffe

08005478 <_fflush_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	4605      	mov	r5, r0
 800547e:	460c      	mov	r4, r1
 8005480:	b913      	cbnz	r3, 8005488 <_fflush_r+0x10>
 8005482:	2500      	movs	r5, #0
 8005484:	4628      	mov	r0, r5
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	b118      	cbz	r0, 8005492 <_fflush_r+0x1a>
 800548a:	6a03      	ldr	r3, [r0, #32]
 800548c:	b90b      	cbnz	r3, 8005492 <_fflush_r+0x1a>
 800548e:	f7ff fa47 	bl	8004920 <__sinit>
 8005492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f3      	beq.n	8005482 <_fflush_r+0xa>
 800549a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800549c:	07d0      	lsls	r0, r2, #31
 800549e:	d404      	bmi.n	80054aa <_fflush_r+0x32>
 80054a0:	0599      	lsls	r1, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_fflush_r+0x32>
 80054a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a6:	f7ff fb4e 	bl	8004b46 <__retarget_lock_acquire_recursive>
 80054aa:	4628      	mov	r0, r5
 80054ac:	4621      	mov	r1, r4
 80054ae:	f7ff ff5f 	bl	8005370 <__sflush_r>
 80054b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054b4:	07da      	lsls	r2, r3, #31
 80054b6:	4605      	mov	r5, r0
 80054b8:	d4e4      	bmi.n	8005484 <_fflush_r+0xc>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	d4e1      	bmi.n	8005484 <_fflush_r+0xc>
 80054c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c2:	f7ff fb41 	bl	8004b48 <__retarget_lock_release_recursive>
 80054c6:	e7dd      	b.n	8005484 <_fflush_r+0xc>

080054c8 <fiprintf>:
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	b503      	push	{r0, r1, lr}
 80054cc:	4601      	mov	r1, r0
 80054ce:	ab03      	add	r3, sp, #12
 80054d0:	4805      	ldr	r0, [pc, #20]	@ (80054e8 <fiprintf+0x20>)
 80054d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d6:	6800      	ldr	r0, [r0, #0]
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	f000 f88f 	bl	80055fc <_vfiprintf_r>
 80054de:	b002      	add	sp, #8
 80054e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e4:	b003      	add	sp, #12
 80054e6:	4770      	bx	lr
 80054e8:	20000040 	.word	0x20000040

080054ec <memmove>:
 80054ec:	4288      	cmp	r0, r1
 80054ee:	b510      	push	{r4, lr}
 80054f0:	eb01 0402 	add.w	r4, r1, r2
 80054f4:	d902      	bls.n	80054fc <memmove+0x10>
 80054f6:	4284      	cmp	r4, r0
 80054f8:	4623      	mov	r3, r4
 80054fa:	d807      	bhi.n	800550c <memmove+0x20>
 80054fc:	1e43      	subs	r3, r0, #1
 80054fe:	42a1      	cmp	r1, r4
 8005500:	d008      	beq.n	8005514 <memmove+0x28>
 8005502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800550a:	e7f8      	b.n	80054fe <memmove+0x12>
 800550c:	4402      	add	r2, r0
 800550e:	4601      	mov	r1, r0
 8005510:	428a      	cmp	r2, r1
 8005512:	d100      	bne.n	8005516 <memmove+0x2a>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800551a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800551e:	e7f7      	b.n	8005510 <memmove+0x24>

08005520 <_sbrk_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d06      	ldr	r5, [pc, #24]	@ (800553c <_sbrk_r+0x1c>)
 8005524:	2300      	movs	r3, #0
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f7fc fefe 	bl	800232c <_sbrk>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_sbrk_r+0x1a>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_sbrk_r+0x1a>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20001194 	.word	0x20001194

08005540 <abort>:
 8005540:	b508      	push	{r3, lr}
 8005542:	2006      	movs	r0, #6
 8005544:	f000 fa2e 	bl	80059a4 <raise>
 8005548:	2001      	movs	r0, #1
 800554a:	f7fc fec3 	bl	80022d4 <_exit>

0800554e <_realloc_r>:
 800554e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005552:	4680      	mov	r8, r0
 8005554:	4615      	mov	r5, r2
 8005556:	460c      	mov	r4, r1
 8005558:	b921      	cbnz	r1, 8005564 <_realloc_r+0x16>
 800555a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	4611      	mov	r1, r2
 8005560:	f7ff bb94 	b.w	8004c8c <_malloc_r>
 8005564:	b92a      	cbnz	r2, 8005572 <_realloc_r+0x24>
 8005566:	f7ff fb1d 	bl	8004ba4 <_free_r>
 800556a:	2400      	movs	r4, #0
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005572:	f000 fa33 	bl	80059dc <_malloc_usable_size_r>
 8005576:	4285      	cmp	r5, r0
 8005578:	4606      	mov	r6, r0
 800557a:	d802      	bhi.n	8005582 <_realloc_r+0x34>
 800557c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005580:	d8f4      	bhi.n	800556c <_realloc_r+0x1e>
 8005582:	4629      	mov	r1, r5
 8005584:	4640      	mov	r0, r8
 8005586:	f7ff fb81 	bl	8004c8c <_malloc_r>
 800558a:	4607      	mov	r7, r0
 800558c:	2800      	cmp	r0, #0
 800558e:	d0ec      	beq.n	800556a <_realloc_r+0x1c>
 8005590:	42b5      	cmp	r5, r6
 8005592:	462a      	mov	r2, r5
 8005594:	4621      	mov	r1, r4
 8005596:	bf28      	it	cs
 8005598:	4632      	movcs	r2, r6
 800559a:	f7ff fad6 	bl	8004b4a <memcpy>
 800559e:	4621      	mov	r1, r4
 80055a0:	4640      	mov	r0, r8
 80055a2:	f7ff faff 	bl	8004ba4 <_free_r>
 80055a6:	463c      	mov	r4, r7
 80055a8:	e7e0      	b.n	800556c <_realloc_r+0x1e>

080055aa <__sfputc_r>:
 80055aa:	6893      	ldr	r3, [r2, #8]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	b410      	push	{r4}
 80055b2:	6093      	str	r3, [r2, #8]
 80055b4:	da08      	bge.n	80055c8 <__sfputc_r+0x1e>
 80055b6:	6994      	ldr	r4, [r2, #24]
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	db01      	blt.n	80055c0 <__sfputc_r+0x16>
 80055bc:	290a      	cmp	r1, #10
 80055be:	d103      	bne.n	80055c8 <__sfputc_r+0x1e>
 80055c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c4:	f000 b932 	b.w	800582c <__swbuf_r>
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	1c58      	adds	r0, r3, #1
 80055cc:	6010      	str	r0, [r2, #0]
 80055ce:	7019      	strb	r1, [r3, #0]
 80055d0:	4608      	mov	r0, r1
 80055d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <__sfputs_r>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	4606      	mov	r6, r0
 80055dc:	460f      	mov	r7, r1
 80055de:	4614      	mov	r4, r2
 80055e0:	18d5      	adds	r5, r2, r3
 80055e2:	42ac      	cmp	r4, r5
 80055e4:	d101      	bne.n	80055ea <__sfputs_r+0x12>
 80055e6:	2000      	movs	r0, #0
 80055e8:	e007      	b.n	80055fa <__sfputs_r+0x22>
 80055ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ee:	463a      	mov	r2, r7
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7ff ffda 	bl	80055aa <__sfputc_r>
 80055f6:	1c43      	adds	r3, r0, #1
 80055f8:	d1f3      	bne.n	80055e2 <__sfputs_r+0xa>
 80055fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080055fc <_vfiprintf_r>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	460d      	mov	r5, r1
 8005602:	b09d      	sub	sp, #116	@ 0x74
 8005604:	4614      	mov	r4, r2
 8005606:	4698      	mov	r8, r3
 8005608:	4606      	mov	r6, r0
 800560a:	b118      	cbz	r0, 8005614 <_vfiprintf_r+0x18>
 800560c:	6a03      	ldr	r3, [r0, #32]
 800560e:	b90b      	cbnz	r3, 8005614 <_vfiprintf_r+0x18>
 8005610:	f7ff f986 	bl	8004920 <__sinit>
 8005614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005616:	07d9      	lsls	r1, r3, #31
 8005618:	d405      	bmi.n	8005626 <_vfiprintf_r+0x2a>
 800561a:	89ab      	ldrh	r3, [r5, #12]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d402      	bmi.n	8005626 <_vfiprintf_r+0x2a>
 8005620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005622:	f7ff fa90 	bl	8004b46 <__retarget_lock_acquire_recursive>
 8005626:	89ab      	ldrh	r3, [r5, #12]
 8005628:	071b      	lsls	r3, r3, #28
 800562a:	d501      	bpl.n	8005630 <_vfiprintf_r+0x34>
 800562c:	692b      	ldr	r3, [r5, #16]
 800562e:	b99b      	cbnz	r3, 8005658 <_vfiprintf_r+0x5c>
 8005630:	4629      	mov	r1, r5
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f938 	bl	80058a8 <__swsetup_r>
 8005638:	b170      	cbz	r0, 8005658 <_vfiprintf_r+0x5c>
 800563a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800563c:	07dc      	lsls	r4, r3, #31
 800563e:	d504      	bpl.n	800564a <_vfiprintf_r+0x4e>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	b01d      	add	sp, #116	@ 0x74
 8005646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	0598      	lsls	r0, r3, #22
 800564e:	d4f7      	bmi.n	8005640 <_vfiprintf_r+0x44>
 8005650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005652:	f7ff fa79 	bl	8004b48 <__retarget_lock_release_recursive>
 8005656:	e7f3      	b.n	8005640 <_vfiprintf_r+0x44>
 8005658:	2300      	movs	r3, #0
 800565a:	9309      	str	r3, [sp, #36]	@ 0x24
 800565c:	2320      	movs	r3, #32
 800565e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005662:	f8cd 800c 	str.w	r8, [sp, #12]
 8005666:	2330      	movs	r3, #48	@ 0x30
 8005668:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005818 <_vfiprintf_r+0x21c>
 800566c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005670:	f04f 0901 	mov.w	r9, #1
 8005674:	4623      	mov	r3, r4
 8005676:	469a      	mov	sl, r3
 8005678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800567c:	b10a      	cbz	r2, 8005682 <_vfiprintf_r+0x86>
 800567e:	2a25      	cmp	r2, #37	@ 0x25
 8005680:	d1f9      	bne.n	8005676 <_vfiprintf_r+0x7a>
 8005682:	ebba 0b04 	subs.w	fp, sl, r4
 8005686:	d00b      	beq.n	80056a0 <_vfiprintf_r+0xa4>
 8005688:	465b      	mov	r3, fp
 800568a:	4622      	mov	r2, r4
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff ffa2 	bl	80055d8 <__sfputs_r>
 8005694:	3001      	adds	r0, #1
 8005696:	f000 80a7 	beq.w	80057e8 <_vfiprintf_r+0x1ec>
 800569a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800569c:	445a      	add	r2, fp
 800569e:	9209      	str	r2, [sp, #36]	@ 0x24
 80056a0:	f89a 3000 	ldrb.w	r3, [sl]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 809f 	beq.w	80057e8 <_vfiprintf_r+0x1ec>
 80056aa:	2300      	movs	r3, #0
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b4:	f10a 0a01 	add.w	sl, sl, #1
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	9307      	str	r3, [sp, #28]
 80056bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80056c2:	4654      	mov	r4, sl
 80056c4:	2205      	movs	r2, #5
 80056c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ca:	4853      	ldr	r0, [pc, #332]	@ (8005818 <_vfiprintf_r+0x21c>)
 80056cc:	f7fa fd90 	bl	80001f0 <memchr>
 80056d0:	9a04      	ldr	r2, [sp, #16]
 80056d2:	b9d8      	cbnz	r0, 800570c <_vfiprintf_r+0x110>
 80056d4:	06d1      	lsls	r1, r2, #27
 80056d6:	bf44      	itt	mi
 80056d8:	2320      	movmi	r3, #32
 80056da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056de:	0713      	lsls	r3, r2, #28
 80056e0:	bf44      	itt	mi
 80056e2:	232b      	movmi	r3, #43	@ 0x2b
 80056e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056e8:	f89a 3000 	ldrb.w	r3, [sl]
 80056ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80056ee:	d015      	beq.n	800571c <_vfiprintf_r+0x120>
 80056f0:	9a07      	ldr	r2, [sp, #28]
 80056f2:	4654      	mov	r4, sl
 80056f4:	2000      	movs	r0, #0
 80056f6:	f04f 0c0a 	mov.w	ip, #10
 80056fa:	4621      	mov	r1, r4
 80056fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005700:	3b30      	subs	r3, #48	@ 0x30
 8005702:	2b09      	cmp	r3, #9
 8005704:	d94b      	bls.n	800579e <_vfiprintf_r+0x1a2>
 8005706:	b1b0      	cbz	r0, 8005736 <_vfiprintf_r+0x13a>
 8005708:	9207      	str	r2, [sp, #28]
 800570a:	e014      	b.n	8005736 <_vfiprintf_r+0x13a>
 800570c:	eba0 0308 	sub.w	r3, r0, r8
 8005710:	fa09 f303 	lsl.w	r3, r9, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	46a2      	mov	sl, r4
 800571a:	e7d2      	b.n	80056c2 <_vfiprintf_r+0xc6>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	1d19      	adds	r1, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9103      	str	r1, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfbb      	ittet	lt
 8005728:	425b      	neglt	r3, r3
 800572a:	f042 0202 	orrlt.w	r2, r2, #2
 800572e:	9307      	strge	r3, [sp, #28]
 8005730:	9307      	strlt	r3, [sp, #28]
 8005732:	bfb8      	it	lt
 8005734:	9204      	strlt	r2, [sp, #16]
 8005736:	7823      	ldrb	r3, [r4, #0]
 8005738:	2b2e      	cmp	r3, #46	@ 0x2e
 800573a:	d10a      	bne.n	8005752 <_vfiprintf_r+0x156>
 800573c:	7863      	ldrb	r3, [r4, #1]
 800573e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005740:	d132      	bne.n	80057a8 <_vfiprintf_r+0x1ac>
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	1d1a      	adds	r2, r3, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	9203      	str	r2, [sp, #12]
 800574a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800574e:	3402      	adds	r4, #2
 8005750:	9305      	str	r3, [sp, #20]
 8005752:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005828 <_vfiprintf_r+0x22c>
 8005756:	7821      	ldrb	r1, [r4, #0]
 8005758:	2203      	movs	r2, #3
 800575a:	4650      	mov	r0, sl
 800575c:	f7fa fd48 	bl	80001f0 <memchr>
 8005760:	b138      	cbz	r0, 8005772 <_vfiprintf_r+0x176>
 8005762:	9b04      	ldr	r3, [sp, #16]
 8005764:	eba0 000a 	sub.w	r0, r0, sl
 8005768:	2240      	movs	r2, #64	@ 0x40
 800576a:	4082      	lsls	r2, r0
 800576c:	4313      	orrs	r3, r2
 800576e:	3401      	adds	r4, #1
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005776:	4829      	ldr	r0, [pc, #164]	@ (800581c <_vfiprintf_r+0x220>)
 8005778:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800577c:	2206      	movs	r2, #6
 800577e:	f7fa fd37 	bl	80001f0 <memchr>
 8005782:	2800      	cmp	r0, #0
 8005784:	d03f      	beq.n	8005806 <_vfiprintf_r+0x20a>
 8005786:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <_vfiprintf_r+0x224>)
 8005788:	bb1b      	cbnz	r3, 80057d2 <_vfiprintf_r+0x1d6>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	3307      	adds	r3, #7
 800578e:	f023 0307 	bic.w	r3, r3, #7
 8005792:	3308      	adds	r3, #8
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005798:	443b      	add	r3, r7
 800579a:	9309      	str	r3, [sp, #36]	@ 0x24
 800579c:	e76a      	b.n	8005674 <_vfiprintf_r+0x78>
 800579e:	fb0c 3202 	mla	r2, ip, r2, r3
 80057a2:	460c      	mov	r4, r1
 80057a4:	2001      	movs	r0, #1
 80057a6:	e7a8      	b.n	80056fa <_vfiprintf_r+0xfe>
 80057a8:	2300      	movs	r3, #0
 80057aa:	3401      	adds	r4, #1
 80057ac:	9305      	str	r3, [sp, #20]
 80057ae:	4619      	mov	r1, r3
 80057b0:	f04f 0c0a 	mov.w	ip, #10
 80057b4:	4620      	mov	r0, r4
 80057b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ba:	3a30      	subs	r2, #48	@ 0x30
 80057bc:	2a09      	cmp	r2, #9
 80057be:	d903      	bls.n	80057c8 <_vfiprintf_r+0x1cc>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0c6      	beq.n	8005752 <_vfiprintf_r+0x156>
 80057c4:	9105      	str	r1, [sp, #20]
 80057c6:	e7c4      	b.n	8005752 <_vfiprintf_r+0x156>
 80057c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057cc:	4604      	mov	r4, r0
 80057ce:	2301      	movs	r3, #1
 80057d0:	e7f0      	b.n	80057b4 <_vfiprintf_r+0x1b8>
 80057d2:	ab03      	add	r3, sp, #12
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	462a      	mov	r2, r5
 80057d8:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <_vfiprintf_r+0x228>)
 80057da:	a904      	add	r1, sp, #16
 80057dc:	4630      	mov	r0, r6
 80057de:	f3af 8000 	nop.w
 80057e2:	4607      	mov	r7, r0
 80057e4:	1c78      	adds	r0, r7, #1
 80057e6:	d1d6      	bne.n	8005796 <_vfiprintf_r+0x19a>
 80057e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057ea:	07d9      	lsls	r1, r3, #31
 80057ec:	d405      	bmi.n	80057fa <_vfiprintf_r+0x1fe>
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	059a      	lsls	r2, r3, #22
 80057f2:	d402      	bmi.n	80057fa <_vfiprintf_r+0x1fe>
 80057f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057f6:	f7ff f9a7 	bl	8004b48 <__retarget_lock_release_recursive>
 80057fa:	89ab      	ldrh	r3, [r5, #12]
 80057fc:	065b      	lsls	r3, r3, #25
 80057fe:	f53f af1f 	bmi.w	8005640 <_vfiprintf_r+0x44>
 8005802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005804:	e71e      	b.n	8005644 <_vfiprintf_r+0x48>
 8005806:	ab03      	add	r3, sp, #12
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	462a      	mov	r2, r5
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <_vfiprintf_r+0x228>)
 800580e:	a904      	add	r1, sp, #16
 8005810:	4630      	mov	r0, r6
 8005812:	f7ff fc8d 	bl	8005130 <_printf_i>
 8005816:	e7e4      	b.n	80057e2 <_vfiprintf_r+0x1e6>
 8005818:	08006883 	.word	0x08006883
 800581c:	0800688d 	.word	0x0800688d
 8005820:	00000000 	.word	0x00000000
 8005824:	080055d9 	.word	0x080055d9
 8005828:	08006889 	.word	0x08006889

0800582c <__swbuf_r>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	460e      	mov	r6, r1
 8005830:	4614      	mov	r4, r2
 8005832:	4605      	mov	r5, r0
 8005834:	b118      	cbz	r0, 800583e <__swbuf_r+0x12>
 8005836:	6a03      	ldr	r3, [r0, #32]
 8005838:	b90b      	cbnz	r3, 800583e <__swbuf_r+0x12>
 800583a:	f7ff f871 	bl	8004920 <__sinit>
 800583e:	69a3      	ldr	r3, [r4, #24]
 8005840:	60a3      	str	r3, [r4, #8]
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	071a      	lsls	r2, r3, #28
 8005846:	d501      	bpl.n	800584c <__swbuf_r+0x20>
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	b943      	cbnz	r3, 800585e <__swbuf_r+0x32>
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f82a 	bl	80058a8 <__swsetup_r>
 8005854:	b118      	cbz	r0, 800585e <__swbuf_r+0x32>
 8005856:	f04f 37ff 	mov.w	r7, #4294967295
 800585a:	4638      	mov	r0, r7
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	1a98      	subs	r0, r3, r2
 8005864:	6963      	ldr	r3, [r4, #20]
 8005866:	b2f6      	uxtb	r6, r6
 8005868:	4283      	cmp	r3, r0
 800586a:	4637      	mov	r7, r6
 800586c:	dc05      	bgt.n	800587a <__swbuf_r+0x4e>
 800586e:	4621      	mov	r1, r4
 8005870:	4628      	mov	r0, r5
 8005872:	f7ff fe01 	bl	8005478 <_fflush_r>
 8005876:	2800      	cmp	r0, #0
 8005878:	d1ed      	bne.n	8005856 <__swbuf_r+0x2a>
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	3b01      	subs	r3, #1
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	701e      	strb	r6, [r3, #0]
 8005888:	6962      	ldr	r2, [r4, #20]
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	429a      	cmp	r2, r3
 800588e:	d004      	beq.n	800589a <__swbuf_r+0x6e>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	07db      	lsls	r3, r3, #31
 8005894:	d5e1      	bpl.n	800585a <__swbuf_r+0x2e>
 8005896:	2e0a      	cmp	r6, #10
 8005898:	d1df      	bne.n	800585a <__swbuf_r+0x2e>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f7ff fdeb 	bl	8005478 <_fflush_r>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d0d9      	beq.n	800585a <__swbuf_r+0x2e>
 80058a6:	e7d6      	b.n	8005856 <__swbuf_r+0x2a>

080058a8 <__swsetup_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <__swsetup_r+0xa8>)
 80058ac:	4605      	mov	r5, r0
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	460c      	mov	r4, r1
 80058b2:	b118      	cbz	r0, 80058bc <__swsetup_r+0x14>
 80058b4:	6a03      	ldr	r3, [r0, #32]
 80058b6:	b90b      	cbnz	r3, 80058bc <__swsetup_r+0x14>
 80058b8:	f7ff f832 	bl	8004920 <__sinit>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	0719      	lsls	r1, r3, #28
 80058c2:	d422      	bmi.n	800590a <__swsetup_r+0x62>
 80058c4:	06da      	lsls	r2, r3, #27
 80058c6:	d407      	bmi.n	80058d8 <__swsetup_r+0x30>
 80058c8:	2209      	movs	r2, #9
 80058ca:	602a      	str	r2, [r5, #0]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295
 80058d6:	e033      	b.n	8005940 <__swsetup_r+0x98>
 80058d8:	0758      	lsls	r0, r3, #29
 80058da:	d512      	bpl.n	8005902 <__swsetup_r+0x5a>
 80058dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058de:	b141      	cbz	r1, 80058f2 <__swsetup_r+0x4a>
 80058e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d002      	beq.n	80058ee <__swsetup_r+0x46>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7ff f95b 	bl	8004ba4 <_free_r>
 80058ee:	2300      	movs	r3, #0
 80058f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	2300      	movs	r3, #0
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f043 0308 	orr.w	r3, r3, #8
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	b94b      	cbnz	r3, 8005922 <__swsetup_r+0x7a>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005918:	d003      	beq.n	8005922 <__swsetup_r+0x7a>
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f88b 	bl	8005a38 <__smakebuf_r>
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	f013 0201 	ands.w	r2, r3, #1
 800592a:	d00a      	beq.n	8005942 <__swsetup_r+0x9a>
 800592c:	2200      	movs	r2, #0
 800592e:	60a2      	str	r2, [r4, #8]
 8005930:	6962      	ldr	r2, [r4, #20]
 8005932:	4252      	negs	r2, r2
 8005934:	61a2      	str	r2, [r4, #24]
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	b942      	cbnz	r2, 800594c <__swsetup_r+0xa4>
 800593a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800593e:	d1c5      	bne.n	80058cc <__swsetup_r+0x24>
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	0799      	lsls	r1, r3, #30
 8005944:	bf58      	it	pl
 8005946:	6962      	ldrpl	r2, [r4, #20]
 8005948:	60a2      	str	r2, [r4, #8]
 800594a:	e7f4      	b.n	8005936 <__swsetup_r+0x8e>
 800594c:	2000      	movs	r0, #0
 800594e:	e7f7      	b.n	8005940 <__swsetup_r+0x98>
 8005950:	20000040 	.word	0x20000040

08005954 <_raise_r>:
 8005954:	291f      	cmp	r1, #31
 8005956:	b538      	push	{r3, r4, r5, lr}
 8005958:	4605      	mov	r5, r0
 800595a:	460c      	mov	r4, r1
 800595c:	d904      	bls.n	8005968 <_raise_r+0x14>
 800595e:	2316      	movs	r3, #22
 8005960:	6003      	str	r3, [r0, #0]
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800596a:	b112      	cbz	r2, 8005972 <_raise_r+0x1e>
 800596c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005970:	b94b      	cbnz	r3, 8005986 <_raise_r+0x32>
 8005972:	4628      	mov	r0, r5
 8005974:	f000 f830 	bl	80059d8 <_getpid_r>
 8005978:	4622      	mov	r2, r4
 800597a:	4601      	mov	r1, r0
 800597c:	4628      	mov	r0, r5
 800597e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005982:	f000 b817 	b.w	80059b4 <_kill_r>
 8005986:	2b01      	cmp	r3, #1
 8005988:	d00a      	beq.n	80059a0 <_raise_r+0x4c>
 800598a:	1c59      	adds	r1, r3, #1
 800598c:	d103      	bne.n	8005996 <_raise_r+0x42>
 800598e:	2316      	movs	r3, #22
 8005990:	6003      	str	r3, [r0, #0]
 8005992:	2001      	movs	r0, #1
 8005994:	e7e7      	b.n	8005966 <_raise_r+0x12>
 8005996:	2100      	movs	r1, #0
 8005998:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800599c:	4620      	mov	r0, r4
 800599e:	4798      	blx	r3
 80059a0:	2000      	movs	r0, #0
 80059a2:	e7e0      	b.n	8005966 <_raise_r+0x12>

080059a4 <raise>:
 80059a4:	4b02      	ldr	r3, [pc, #8]	@ (80059b0 <raise+0xc>)
 80059a6:	4601      	mov	r1, r0
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f7ff bfd3 	b.w	8005954 <_raise_r>
 80059ae:	bf00      	nop
 80059b0:	20000040 	.word	0x20000040

080059b4 <_kill_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	@ (80059d4 <_kill_r+0x20>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f7fc fc7f 	bl	80022c4 <_kill>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d102      	bne.n	80059d0 <_kill_r+0x1c>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	b103      	cbz	r3, 80059d0 <_kill_r+0x1c>
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
 80059d2:	bf00      	nop
 80059d4:	20001194 	.word	0x20001194

080059d8 <_getpid_r>:
 80059d8:	f7fc bc72 	b.w	80022c0 <_getpid>

080059dc <_malloc_usable_size_r>:
 80059dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e0:	1f18      	subs	r0, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	bfbc      	itt	lt
 80059e6:	580b      	ldrlt	r3, [r1, r0]
 80059e8:	18c0      	addlt	r0, r0, r3
 80059ea:	4770      	bx	lr

080059ec <__swhatbuf_r>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	460c      	mov	r4, r1
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2900      	cmp	r1, #0
 80059f6:	b096      	sub	sp, #88	@ 0x58
 80059f8:	4615      	mov	r5, r2
 80059fa:	461e      	mov	r6, r3
 80059fc:	da0d      	bge.n	8005a1a <__swhatbuf_r+0x2e>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	bf14      	ite	ne
 8005a0a:	2340      	movne	r3, #64	@ 0x40
 8005a0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a10:	2000      	movs	r0, #0
 8005a12:	6031      	str	r1, [r6, #0]
 8005a14:	602b      	str	r3, [r5, #0]
 8005a16:	b016      	add	sp, #88	@ 0x58
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
 8005a1a:	466a      	mov	r2, sp
 8005a1c:	f000 f848 	bl	8005ab0 <_fstat_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	dbec      	blt.n	80059fe <__swhatbuf_r+0x12>
 8005a24:	9901      	ldr	r1, [sp, #4]
 8005a26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a2e:	4259      	negs	r1, r3
 8005a30:	4159      	adcs	r1, r3
 8005a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a36:	e7eb      	b.n	8005a10 <__swhatbuf_r+0x24>

08005a38 <__smakebuf_r>:
 8005a38:	898b      	ldrh	r3, [r1, #12]
 8005a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3c:	079d      	lsls	r5, r3, #30
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	d507      	bpl.n	8005a54 <__smakebuf_r+0x1c>
 8005a44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	6163      	str	r3, [r4, #20]
 8005a50:	b003      	add	sp, #12
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a54:	ab01      	add	r3, sp, #4
 8005a56:	466a      	mov	r2, sp
 8005a58:	f7ff ffc8 	bl	80059ec <__swhatbuf_r>
 8005a5c:	9f00      	ldr	r7, [sp, #0]
 8005a5e:	4605      	mov	r5, r0
 8005a60:	4639      	mov	r1, r7
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff f912 	bl	8004c8c <_malloc_r>
 8005a68:	b948      	cbnz	r0, 8005a7e <__smakebuf_r+0x46>
 8005a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6e:	059a      	lsls	r2, r3, #22
 8005a70:	d4ee      	bmi.n	8005a50 <__smakebuf_r+0x18>
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	f043 0302 	orr.w	r3, r3, #2
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	e7e2      	b.n	8005a44 <__smakebuf_r+0xc>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	6020      	str	r0, [r4, #0]
 8005a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	9b01      	ldr	r3, [sp, #4]
 8005a8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a8e:	b15b      	cbz	r3, 8005aa8 <__smakebuf_r+0x70>
 8005a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 f81d 	bl	8005ad4 <_isatty_r>
 8005a9a:	b128      	cbz	r0, 8005aa8 <__smakebuf_r+0x70>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	431d      	orrs	r5, r3
 8005aac:	81a5      	strh	r5, [r4, #12]
 8005aae:	e7cf      	b.n	8005a50 <__smakebuf_r+0x18>

08005ab0 <_fstat_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	@ (8005ad0 <_fstat_r+0x20>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	f7fc fc2c 	bl	800231a <_fstat>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d102      	bne.n	8005acc <_fstat_r+0x1c>
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	b103      	cbz	r3, 8005acc <_fstat_r+0x1c>
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
 8005ace:	bf00      	nop
 8005ad0:	20001194 	.word	0x20001194

08005ad4 <_isatty_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d06      	ldr	r5, [pc, #24]	@ (8005af0 <_isatty_r+0x1c>)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	f7fc fc20 	bl	8002324 <_isatty>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_isatty_r+0x1a>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_isatty_r+0x1a>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	20001194 	.word	0x20001194

08005af4 <sqrtf>:
 8005af4:	b508      	push	{r3, lr}
 8005af6:	ed2d 8b02 	vpush	{d8}
 8005afa:	eeb0 8a40 	vmov.f32	s16, s0
 8005afe:	f000 f8a1 	bl	8005c44 <__ieee754_sqrtf>
 8005b02:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	d60c      	bvs.n	8005b26 <sqrtf+0x32>
 8005b0c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005b2c <sqrtf+0x38>
 8005b10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	d505      	bpl.n	8005b26 <sqrtf+0x32>
 8005b1a:	f7fe ffe9 	bl	8004af0 <__errno>
 8005b1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005b22:	2321      	movs	r3, #33	@ 0x21
 8005b24:	6003      	str	r3, [r0, #0]
 8005b26:	ecbd 8b02 	vpop	{d8}
 8005b2a:	bd08      	pop	{r3, pc}
 8005b2c:	00000000 	.word	0x00000000

08005b30 <cosf>:
 8005b30:	ee10 3a10 	vmov	r3, s0
 8005b34:	b507      	push	{r0, r1, r2, lr}
 8005b36:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb0 <cosf+0x80>)
 8005b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d806      	bhi.n	8005b4e <cosf+0x1e>
 8005b40:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005bb4 <cosf+0x84>
 8005b44:	b003      	add	sp, #12
 8005b46:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b4a:	f000 b8a3 	b.w	8005c94 <__kernel_cosf>
 8005b4e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005b52:	d304      	bcc.n	8005b5e <cosf+0x2e>
 8005b54:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005b58:	b003      	add	sp, #12
 8005b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b5e:	4668      	mov	r0, sp
 8005b60:	f000 f938 	bl	8005dd4 <__ieee754_rem_pio2f>
 8005b64:	f000 0003 	and.w	r0, r0, #3
 8005b68:	2801      	cmp	r0, #1
 8005b6a:	d009      	beq.n	8005b80 <cosf+0x50>
 8005b6c:	2802      	cmp	r0, #2
 8005b6e:	d010      	beq.n	8005b92 <cosf+0x62>
 8005b70:	b9b0      	cbnz	r0, 8005ba0 <cosf+0x70>
 8005b72:	eddd 0a01 	vldr	s1, [sp, #4]
 8005b76:	ed9d 0a00 	vldr	s0, [sp]
 8005b7a:	f000 f88b 	bl	8005c94 <__kernel_cosf>
 8005b7e:	e7eb      	b.n	8005b58 <cosf+0x28>
 8005b80:	eddd 0a01 	vldr	s1, [sp, #4]
 8005b84:	ed9d 0a00 	vldr	s0, [sp]
 8005b88:	f000 f8dc 	bl	8005d44 <__kernel_sinf>
 8005b8c:	eeb1 0a40 	vneg.f32	s0, s0
 8005b90:	e7e2      	b.n	8005b58 <cosf+0x28>
 8005b92:	eddd 0a01 	vldr	s1, [sp, #4]
 8005b96:	ed9d 0a00 	vldr	s0, [sp]
 8005b9a:	f000 f87b 	bl	8005c94 <__kernel_cosf>
 8005b9e:	e7f5      	b.n	8005b8c <cosf+0x5c>
 8005ba0:	eddd 0a01 	vldr	s1, [sp, #4]
 8005ba4:	ed9d 0a00 	vldr	s0, [sp]
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f000 f8cb 	bl	8005d44 <__kernel_sinf>
 8005bae:	e7d3      	b.n	8005b58 <cosf+0x28>
 8005bb0:	3f490fd8 	.word	0x3f490fd8
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <sinf>:
 8005bb8:	ee10 3a10 	vmov	r3, s0
 8005bbc:	b507      	push	{r0, r1, r2, lr}
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005c3c <sinf+0x84>)
 8005bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d807      	bhi.n	8005bd8 <sinf+0x20>
 8005bc8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005c40 <sinf+0x88>
 8005bcc:	2000      	movs	r0, #0
 8005bce:	b003      	add	sp, #12
 8005bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd4:	f000 b8b6 	b.w	8005d44 <__kernel_sinf>
 8005bd8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005bdc:	d304      	bcc.n	8005be8 <sinf+0x30>
 8005bde:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005be2:	b003      	add	sp, #12
 8005be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005be8:	4668      	mov	r0, sp
 8005bea:	f000 f8f3 	bl	8005dd4 <__ieee754_rem_pio2f>
 8005bee:	f000 0003 	and.w	r0, r0, #3
 8005bf2:	2801      	cmp	r0, #1
 8005bf4:	d00a      	beq.n	8005c0c <sinf+0x54>
 8005bf6:	2802      	cmp	r0, #2
 8005bf8:	d00f      	beq.n	8005c1a <sinf+0x62>
 8005bfa:	b9c0      	cbnz	r0, 8005c2e <sinf+0x76>
 8005bfc:	eddd 0a01 	vldr	s1, [sp, #4]
 8005c00:	ed9d 0a00 	vldr	s0, [sp]
 8005c04:	2001      	movs	r0, #1
 8005c06:	f000 f89d 	bl	8005d44 <__kernel_sinf>
 8005c0a:	e7ea      	b.n	8005be2 <sinf+0x2a>
 8005c0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005c10:	ed9d 0a00 	vldr	s0, [sp]
 8005c14:	f000 f83e 	bl	8005c94 <__kernel_cosf>
 8005c18:	e7e3      	b.n	8005be2 <sinf+0x2a>
 8005c1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005c1e:	ed9d 0a00 	vldr	s0, [sp]
 8005c22:	2001      	movs	r0, #1
 8005c24:	f000 f88e 	bl	8005d44 <__kernel_sinf>
 8005c28:	eeb1 0a40 	vneg.f32	s0, s0
 8005c2c:	e7d9      	b.n	8005be2 <sinf+0x2a>
 8005c2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005c32:	ed9d 0a00 	vldr	s0, [sp]
 8005c36:	f000 f82d 	bl	8005c94 <__kernel_cosf>
 8005c3a:	e7f5      	b.n	8005c28 <sinf+0x70>
 8005c3c:	3f490fd8 	.word	0x3f490fd8
 8005c40:	00000000 	.word	0x00000000

08005c44 <__ieee754_sqrtf>:
 8005c44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005c48:	4770      	bx	lr
	...

08005c4c <roundf>:
 8005c4c:	ee10 0a10 	vmov	r0, s0
 8005c50:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005c54:	3a7f      	subs	r2, #127	@ 0x7f
 8005c56:	2a16      	cmp	r2, #22
 8005c58:	dc15      	bgt.n	8005c86 <roundf+0x3a>
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	da08      	bge.n	8005c70 <roundf+0x24>
 8005c5e:	3201      	adds	r2, #1
 8005c60:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8005c64:	d101      	bne.n	8005c6a <roundf+0x1e>
 8005c66:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8005c6a:	ee00 3a10 	vmov	s0, r3
 8005c6e:	4770      	bx	lr
 8005c70:	4907      	ldr	r1, [pc, #28]	@ (8005c90 <roundf+0x44>)
 8005c72:	4111      	asrs	r1, r2
 8005c74:	4201      	tst	r1, r0
 8005c76:	d0fa      	beq.n	8005c6e <roundf+0x22>
 8005c78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005c7c:	4113      	asrs	r3, r2
 8005c7e:	4403      	add	r3, r0
 8005c80:	ea23 0301 	bic.w	r3, r3, r1
 8005c84:	e7f1      	b.n	8005c6a <roundf+0x1e>
 8005c86:	2a80      	cmp	r2, #128	@ 0x80
 8005c88:	d1f1      	bne.n	8005c6e <roundf+0x22>
 8005c8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005c8e:	4770      	bx	lr
 8005c90:	007fffff 	.word	0x007fffff

08005c94 <__kernel_cosf>:
 8005c94:	ee10 3a10 	vmov	r3, s0
 8005c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c9c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005ca0:	eef0 6a40 	vmov.f32	s13, s0
 8005ca4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005ca8:	d204      	bcs.n	8005cb4 <__kernel_cosf+0x20>
 8005caa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005cae:	ee17 2a90 	vmov	r2, s15
 8005cb2:	b342      	cbz	r2, 8005d06 <__kernel_cosf+0x72>
 8005cb4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005cb8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005d24 <__kernel_cosf+0x90>
 8005cbc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005d28 <__kernel_cosf+0x94>
 8005cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d2c <__kernel_cosf+0x98>)
 8005cc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005d30 <__kernel_cosf+0x9c>
 8005ccc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005cd0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005d34 <__kernel_cosf+0xa0>
 8005cd4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005cd8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005d38 <__kernel_cosf+0xa4>
 8005cdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005ce0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005d3c <__kernel_cosf+0xa8>
 8005ce4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005ce8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005cec:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005cf0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005cf4:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfc:	d804      	bhi.n	8005d08 <__kernel_cosf+0x74>
 8005cfe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005d02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d06:	4770      	bx	lr
 8005d08:	4a0d      	ldr	r2, [pc, #52]	@ (8005d40 <__kernel_cosf+0xac>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bf9a      	itte	ls
 8005d0e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005d12:	ee07 3a10 	vmovls	s14, r3
 8005d16:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005d1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d22:	e7ec      	b.n	8005cfe <__kernel_cosf+0x6a>
 8005d24:	ad47d74e 	.word	0xad47d74e
 8005d28:	310f74f6 	.word	0x310f74f6
 8005d2c:	3e999999 	.word	0x3e999999
 8005d30:	b493f27c 	.word	0xb493f27c
 8005d34:	37d00d01 	.word	0x37d00d01
 8005d38:	bab60b61 	.word	0xbab60b61
 8005d3c:	3d2aaaab 	.word	0x3d2aaaab
 8005d40:	3f480000 	.word	0x3f480000

08005d44 <__kernel_sinf>:
 8005d44:	ee10 3a10 	vmov	r3, s0
 8005d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d4c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005d50:	d204      	bcs.n	8005d5c <__kernel_sinf+0x18>
 8005d52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d56:	ee17 3a90 	vmov	r3, s15
 8005d5a:	b35b      	cbz	r3, 8005db4 <__kernel_sinf+0x70>
 8005d5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005d60:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005db8 <__kernel_sinf+0x74>
 8005d64:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005dbc <__kernel_sinf+0x78>
 8005d68:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005d6c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005dc0 <__kernel_sinf+0x7c>
 8005d70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005d74:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005dc4 <__kernel_sinf+0x80>
 8005d78:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005d7c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005dc8 <__kernel_sinf+0x84>
 8005d80:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005d84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005d88:	b930      	cbnz	r0, 8005d98 <__kernel_sinf+0x54>
 8005d8a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005dcc <__kernel_sinf+0x88>
 8005d8e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005d92:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005d96:	4770      	bx	lr
 8005d98:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005d9c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005da0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005da4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005da8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005dd0 <__kernel_sinf+0x8c>
 8005dac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005db0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	2f2ec9d3 	.word	0x2f2ec9d3
 8005dbc:	b2d72f34 	.word	0xb2d72f34
 8005dc0:	3638ef1b 	.word	0x3638ef1b
 8005dc4:	b9500d01 	.word	0xb9500d01
 8005dc8:	3c088889 	.word	0x3c088889
 8005dcc:	be2aaaab 	.word	0xbe2aaaab
 8005dd0:	3e2aaaab 	.word	0x3e2aaaab

08005dd4 <__ieee754_rem_pio2f>:
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd6:	ee10 6a10 	vmov	r6, s0
 8005dda:	4b88      	ldr	r3, [pc, #544]	@ (8005ffc <__ieee754_rem_pio2f+0x228>)
 8005ddc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005de0:	429d      	cmp	r5, r3
 8005de2:	b087      	sub	sp, #28
 8005de4:	4604      	mov	r4, r0
 8005de6:	d805      	bhi.n	8005df4 <__ieee754_rem_pio2f+0x20>
 8005de8:	2300      	movs	r3, #0
 8005dea:	ed80 0a00 	vstr	s0, [r0]
 8005dee:	6043      	str	r3, [r0, #4]
 8005df0:	2000      	movs	r0, #0
 8005df2:	e022      	b.n	8005e3a <__ieee754_rem_pio2f+0x66>
 8005df4:	4b82      	ldr	r3, [pc, #520]	@ (8006000 <__ieee754_rem_pio2f+0x22c>)
 8005df6:	429d      	cmp	r5, r3
 8005df8:	d83a      	bhi.n	8005e70 <__ieee754_rem_pio2f+0x9c>
 8005dfa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006004 <__ieee754_rem_pio2f+0x230>
 8005e04:	4a80      	ldr	r2, [pc, #512]	@ (8006008 <__ieee754_rem_pio2f+0x234>)
 8005e06:	f023 030f 	bic.w	r3, r3, #15
 8005e0a:	dd18      	ble.n	8005e3e <__ieee754_rem_pio2f+0x6a>
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005e12:	bf09      	itett	eq
 8005e14:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800600c <__ieee754_rem_pio2f+0x238>
 8005e18:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006010 <__ieee754_rem_pio2f+0x23c>
 8005e1c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006014 <__ieee754_rem_pio2f+0x240>
 8005e20:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005e24:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e2c:	ed80 7a00 	vstr	s14, [r0]
 8005e30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e34:	edc0 7a01 	vstr	s15, [r0, #4]
 8005e38:	2001      	movs	r0, #1
 8005e3a:	b007      	add	sp, #28
 8005e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005e44:	bf09      	itett	eq
 8005e46:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800600c <__ieee754_rem_pio2f+0x238>
 8005e4a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006010 <__ieee754_rem_pio2f+0x23c>
 8005e4e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006014 <__ieee754_rem_pio2f+0x240>
 8005e52:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005e56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e5e:	ed80 7a00 	vstr	s14, [r0]
 8005e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e66:	edc0 7a01 	vstr	s15, [r0, #4]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	e7e4      	b.n	8005e3a <__ieee754_rem_pio2f+0x66>
 8005e70:	4b69      	ldr	r3, [pc, #420]	@ (8006018 <__ieee754_rem_pio2f+0x244>)
 8005e72:	429d      	cmp	r5, r3
 8005e74:	d873      	bhi.n	8005f5e <__ieee754_rem_pio2f+0x18a>
 8005e76:	f000 f8dd 	bl	8006034 <fabsf>
 8005e7a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800601c <__ieee754_rem_pio2f+0x248>
 8005e7e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e82:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8e:	ee17 0a90 	vmov	r0, s15
 8005e92:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006004 <__ieee754_rem_pio2f+0x230>
 8005e96:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005e9a:	281f      	cmp	r0, #31
 8005e9c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006010 <__ieee754_rem_pio2f+0x23c>
 8005ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea4:	eeb1 6a47 	vneg.f32	s12, s14
 8005ea8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005eac:	ee16 1a90 	vmov	r1, s13
 8005eb0:	dc09      	bgt.n	8005ec6 <__ieee754_rem_pio2f+0xf2>
 8005eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8006020 <__ieee754_rem_pio2f+0x24c>)
 8005eb4:	1e47      	subs	r7, r0, #1
 8005eb6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005eba:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005ebe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d107      	bne.n	8005ed6 <__ieee754_rem_pio2f+0x102>
 8005ec6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005eca:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005ece:	2a08      	cmp	r2, #8
 8005ed0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005ed4:	dc14      	bgt.n	8005f00 <__ieee754_rem_pio2f+0x12c>
 8005ed6:	6021      	str	r1, [r4, #0]
 8005ed8:	ed94 7a00 	vldr	s14, [r4]
 8005edc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005ee0:	2e00      	cmp	r6, #0
 8005ee2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ee6:	ed84 0a01 	vstr	s0, [r4, #4]
 8005eea:	daa6      	bge.n	8005e3a <__ieee754_rem_pio2f+0x66>
 8005eec:	eeb1 7a47 	vneg.f32	s14, s14
 8005ef0:	eeb1 0a40 	vneg.f32	s0, s0
 8005ef4:	ed84 7a00 	vstr	s14, [r4]
 8005ef8:	ed84 0a01 	vstr	s0, [r4, #4]
 8005efc:	4240      	negs	r0, r0
 8005efe:	e79c      	b.n	8005e3a <__ieee754_rem_pio2f+0x66>
 8005f00:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800600c <__ieee754_rem_pio2f+0x238>
 8005f04:	eef0 6a40 	vmov.f32	s13, s0
 8005f08:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005f0c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005f10:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005f14:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006014 <__ieee754_rem_pio2f+0x240>
 8005f18:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005f1c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005f20:	ee15 2a90 	vmov	r2, s11
 8005f24:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005f28:	1a5b      	subs	r3, r3, r1
 8005f2a:	2b19      	cmp	r3, #25
 8005f2c:	dc04      	bgt.n	8005f38 <__ieee754_rem_pio2f+0x164>
 8005f2e:	edc4 5a00 	vstr	s11, [r4]
 8005f32:	eeb0 0a66 	vmov.f32	s0, s13
 8005f36:	e7cf      	b.n	8005ed8 <__ieee754_rem_pio2f+0x104>
 8005f38:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006024 <__ieee754_rem_pio2f+0x250>
 8005f3c:	eeb0 0a66 	vmov.f32	s0, s13
 8005f40:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005f44:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005f48:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8006028 <__ieee754_rem_pio2f+0x254>
 8005f4c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005f50:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005f54:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005f58:	ed84 7a00 	vstr	s14, [r4]
 8005f5c:	e7bc      	b.n	8005ed8 <__ieee754_rem_pio2f+0x104>
 8005f5e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8005f62:	d306      	bcc.n	8005f72 <__ieee754_rem_pio2f+0x19e>
 8005f64:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005f68:	edc0 7a01 	vstr	s15, [r0, #4]
 8005f6c:	edc0 7a00 	vstr	s15, [r0]
 8005f70:	e73e      	b.n	8005df0 <__ieee754_rem_pio2f+0x1c>
 8005f72:	15ea      	asrs	r2, r5, #23
 8005f74:	3a86      	subs	r2, #134	@ 0x86
 8005f76:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f82:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800602c <__ieee754_rem_pio2f+0x258>
 8005f86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f8e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005f92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fa2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005fa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005faa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	edcd 7a05 	vstr	s15, [sp, #20]
 8005fb6:	d11e      	bne.n	8005ff6 <__ieee754_rem_pio2f+0x222>
 8005fb8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2302      	movne	r3, #2
 8005fc6:	491a      	ldr	r1, [pc, #104]	@ (8006030 <__ieee754_rem_pio2f+0x25c>)
 8005fc8:	9101      	str	r1, [sp, #4]
 8005fca:	2102      	movs	r1, #2
 8005fcc:	9100      	str	r1, [sp, #0]
 8005fce:	a803      	add	r0, sp, #12
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f000 f837 	bl	8006044 <__kernel_rem_pio2f>
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	f6bf af2f 	bge.w	8005e3a <__ieee754_rem_pio2f+0x66>
 8005fdc:	edd4 7a00 	vldr	s15, [r4]
 8005fe0:	eef1 7a67 	vneg.f32	s15, s15
 8005fe4:	edc4 7a00 	vstr	s15, [r4]
 8005fe8:	edd4 7a01 	vldr	s15, [r4, #4]
 8005fec:	eef1 7a67 	vneg.f32	s15, s15
 8005ff0:	edc4 7a01 	vstr	s15, [r4, #4]
 8005ff4:	e782      	b.n	8005efc <__ieee754_rem_pio2f+0x128>
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e7e5      	b.n	8005fc6 <__ieee754_rem_pio2f+0x1f2>
 8005ffa:	bf00      	nop
 8005ffc:	3f490fd8 	.word	0x3f490fd8
 8006000:	4016cbe3 	.word	0x4016cbe3
 8006004:	3fc90f80 	.word	0x3fc90f80
 8006008:	3fc90fd0 	.word	0x3fc90fd0
 800600c:	37354400 	.word	0x37354400
 8006010:	37354443 	.word	0x37354443
 8006014:	2e85a308 	.word	0x2e85a308
 8006018:	43490f80 	.word	0x43490f80
 800601c:	3f22f984 	.word	0x3f22f984
 8006020:	080068b8 	.word	0x080068b8
 8006024:	2e85a300 	.word	0x2e85a300
 8006028:	248d3132 	.word	0x248d3132
 800602c:	43800000 	.word	0x43800000
 8006030:	08006938 	.word	0x08006938

08006034 <fabsf>:
 8006034:	ee10 3a10 	vmov	r3, s0
 8006038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800603c:	ee00 3a10 	vmov	s0, r3
 8006040:	4770      	bx	lr
	...

08006044 <__kernel_rem_pio2f>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	ed2d 8b04 	vpush	{d8-d9}
 800604c:	b0d9      	sub	sp, #356	@ 0x164
 800604e:	4690      	mov	r8, r2
 8006050:	9001      	str	r0, [sp, #4]
 8006052:	4ab9      	ldr	r2, [pc, #740]	@ (8006338 <__kernel_rem_pio2f+0x2f4>)
 8006054:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8006056:	f118 0f04 	cmn.w	r8, #4
 800605a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800605e:	460f      	mov	r7, r1
 8006060:	f103 3bff 	add.w	fp, r3, #4294967295
 8006064:	db27      	blt.n	80060b6 <__kernel_rem_pio2f+0x72>
 8006066:	f1b8 0203 	subs.w	r2, r8, #3
 800606a:	bf48      	it	mi
 800606c:	f108 0204 	addmi.w	r2, r8, #4
 8006070:	10d2      	asrs	r2, r2, #3
 8006072:	1c55      	adds	r5, r2, #1
 8006074:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006076:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8006348 <__kernel_rem_pio2f+0x304>
 800607a:	00e8      	lsls	r0, r5, #3
 800607c:	eba2 060b 	sub.w	r6, r2, fp
 8006080:	9002      	str	r0, [sp, #8]
 8006082:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8006086:	eb0a 0c0b 	add.w	ip, sl, fp
 800608a:	ac1c      	add	r4, sp, #112	@ 0x70
 800608c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8006090:	2000      	movs	r0, #0
 8006092:	4560      	cmp	r0, ip
 8006094:	dd11      	ble.n	80060ba <__kernel_rem_pio2f+0x76>
 8006096:	a91c      	add	r1, sp, #112	@ 0x70
 8006098:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800609c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80060a0:	f04f 0c00 	mov.w	ip, #0
 80060a4:	45d4      	cmp	ip, sl
 80060a6:	dc27      	bgt.n	80060f8 <__kernel_rem_pio2f+0xb4>
 80060a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80060ac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8006348 <__kernel_rem_pio2f+0x304>
 80060b0:	4606      	mov	r6, r0
 80060b2:	2400      	movs	r4, #0
 80060b4:	e016      	b.n	80060e4 <__kernel_rem_pio2f+0xa0>
 80060b6:	2200      	movs	r2, #0
 80060b8:	e7db      	b.n	8006072 <__kernel_rem_pio2f+0x2e>
 80060ba:	42c6      	cmn	r6, r0
 80060bc:	bf5d      	ittte	pl
 80060be:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80060c2:	ee07 1a90 	vmovpl	s15, r1
 80060c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80060ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80060ce:	ece4 7a01 	vstmia	r4!, {s15}
 80060d2:	3001      	adds	r0, #1
 80060d4:	e7dd      	b.n	8006092 <__kernel_rem_pio2f+0x4e>
 80060d6:	ecfe 6a01 	vldmia	lr!, {s13}
 80060da:	ed96 7a00 	vldr	s14, [r6]
 80060de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80060e2:	3401      	adds	r4, #1
 80060e4:	455c      	cmp	r4, fp
 80060e6:	f1a6 0604 	sub.w	r6, r6, #4
 80060ea:	ddf4      	ble.n	80060d6 <__kernel_rem_pio2f+0x92>
 80060ec:	ece9 7a01 	vstmia	r9!, {s15}
 80060f0:	f10c 0c01 	add.w	ip, ip, #1
 80060f4:	3004      	adds	r0, #4
 80060f6:	e7d5      	b.n	80060a4 <__kernel_rem_pio2f+0x60>
 80060f8:	a908      	add	r1, sp, #32
 80060fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060fe:	9104      	str	r1, [sp, #16]
 8006100:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006102:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8006344 <__kernel_rem_pio2f+0x300>
 8006106:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8006340 <__kernel_rem_pio2f+0x2fc>
 800610a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800610e:	9203      	str	r2, [sp, #12]
 8006110:	4654      	mov	r4, sl
 8006112:	00a2      	lsls	r2, r4, #2
 8006114:	9205      	str	r2, [sp, #20]
 8006116:	aa58      	add	r2, sp, #352	@ 0x160
 8006118:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800611c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006120:	a944      	add	r1, sp, #272	@ 0x110
 8006122:	aa08      	add	r2, sp, #32
 8006124:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006128:	4694      	mov	ip, r2
 800612a:	4626      	mov	r6, r4
 800612c:	2e00      	cmp	r6, #0
 800612e:	f1a0 0004 	sub.w	r0, r0, #4
 8006132:	dc4c      	bgt.n	80061ce <__kernel_rem_pio2f+0x18a>
 8006134:	4628      	mov	r0, r5
 8006136:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800613a:	f000 f9f5 	bl	8006528 <scalbnf>
 800613e:	eeb0 8a40 	vmov.f32	s16, s0
 8006142:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8006146:	ee28 0a00 	vmul.f32	s0, s16, s0
 800614a:	f000 fa53 	bl	80065f4 <floorf>
 800614e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8006152:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006156:	2d00      	cmp	r5, #0
 8006158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800615c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006160:	ee17 9a90 	vmov	r9, s15
 8006164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006168:	ee38 8a67 	vsub.f32	s16, s16, s15
 800616c:	dd41      	ble.n	80061f2 <__kernel_rem_pio2f+0x1ae>
 800616e:	f104 3cff 	add.w	ip, r4, #4294967295
 8006172:	a908      	add	r1, sp, #32
 8006174:	f1c5 0e08 	rsb	lr, r5, #8
 8006178:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800617c:	fa46 f00e 	asr.w	r0, r6, lr
 8006180:	4481      	add	r9, r0
 8006182:	fa00 f00e 	lsl.w	r0, r0, lr
 8006186:	1a36      	subs	r6, r6, r0
 8006188:	f1c5 0007 	rsb	r0, r5, #7
 800618c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8006190:	4106      	asrs	r6, r0
 8006192:	2e00      	cmp	r6, #0
 8006194:	dd3c      	ble.n	8006210 <__kernel_rem_pio2f+0x1cc>
 8006196:	f04f 0e00 	mov.w	lr, #0
 800619a:	f109 0901 	add.w	r9, r9, #1
 800619e:	4670      	mov	r0, lr
 80061a0:	4574      	cmp	r4, lr
 80061a2:	dc68      	bgt.n	8006276 <__kernel_rem_pio2f+0x232>
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	dd03      	ble.n	80061b0 <__kernel_rem_pio2f+0x16c>
 80061a8:	2d01      	cmp	r5, #1
 80061aa:	d074      	beq.n	8006296 <__kernel_rem_pio2f+0x252>
 80061ac:	2d02      	cmp	r5, #2
 80061ae:	d07d      	beq.n	80062ac <__kernel_rem_pio2f+0x268>
 80061b0:	2e02      	cmp	r6, #2
 80061b2:	d12d      	bne.n	8006210 <__kernel_rem_pio2f+0x1cc>
 80061b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80061b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80061bc:	b340      	cbz	r0, 8006210 <__kernel_rem_pio2f+0x1cc>
 80061be:	4628      	mov	r0, r5
 80061c0:	9306      	str	r3, [sp, #24]
 80061c2:	f000 f9b1 	bl	8006528 <scalbnf>
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80061cc:	e020      	b.n	8006210 <__kernel_rem_pio2f+0x1cc>
 80061ce:	ee60 7a28 	vmul.f32	s15, s0, s17
 80061d2:	3e01      	subs	r6, #1
 80061d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061dc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80061e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80061e4:	ecac 0a01 	vstmia	ip!, {s0}
 80061e8:	ed90 0a00 	vldr	s0, [r0]
 80061ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 80061f0:	e79c      	b.n	800612c <__kernel_rem_pio2f+0xe8>
 80061f2:	d105      	bne.n	8006200 <__kernel_rem_pio2f+0x1bc>
 80061f4:	1e60      	subs	r0, r4, #1
 80061f6:	a908      	add	r1, sp, #32
 80061f8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80061fc:	11f6      	asrs	r6, r6, #7
 80061fe:	e7c8      	b.n	8006192 <__kernel_rem_pio2f+0x14e>
 8006200:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006204:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	da31      	bge.n	8006272 <__kernel_rem_pio2f+0x22e>
 800620e:	2600      	movs	r6, #0
 8006210:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	f040 8098 	bne.w	800634c <__kernel_rem_pio2f+0x308>
 800621c:	1e60      	subs	r0, r4, #1
 800621e:	2200      	movs	r2, #0
 8006220:	4550      	cmp	r0, sl
 8006222:	da4b      	bge.n	80062bc <__kernel_rem_pio2f+0x278>
 8006224:	2a00      	cmp	r2, #0
 8006226:	d065      	beq.n	80062f4 <__kernel_rem_pio2f+0x2b0>
 8006228:	3c01      	subs	r4, #1
 800622a:	ab08      	add	r3, sp, #32
 800622c:	3d08      	subs	r5, #8
 800622e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f8      	beq.n	8006228 <__kernel_rem_pio2f+0x1e4>
 8006236:	4628      	mov	r0, r5
 8006238:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800623c:	f000 f974 	bl	8006528 <scalbnf>
 8006240:	1c63      	adds	r3, r4, #1
 8006242:	aa44      	add	r2, sp, #272	@ 0x110
 8006244:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006344 <__kernel_rem_pio2f+0x300>
 8006248:	0099      	lsls	r1, r3, #2
 800624a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800624e:	4623      	mov	r3, r4
 8006250:	2b00      	cmp	r3, #0
 8006252:	f280 80a9 	bge.w	80063a8 <__kernel_rem_pio2f+0x364>
 8006256:	4623      	mov	r3, r4
 8006258:	2b00      	cmp	r3, #0
 800625a:	f2c0 80c7 	blt.w	80063ec <__kernel_rem_pio2f+0x3a8>
 800625e:	aa44      	add	r2, sp, #272	@ 0x110
 8006260:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006264:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800633c <__kernel_rem_pio2f+0x2f8>
 8006268:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006348 <__kernel_rem_pio2f+0x304>
 800626c:	2000      	movs	r0, #0
 800626e:	1ae2      	subs	r2, r4, r3
 8006270:	e0b1      	b.n	80063d6 <__kernel_rem_pio2f+0x392>
 8006272:	2602      	movs	r6, #2
 8006274:	e78f      	b.n	8006196 <__kernel_rem_pio2f+0x152>
 8006276:	f852 1b04 	ldr.w	r1, [r2], #4
 800627a:	b948      	cbnz	r0, 8006290 <__kernel_rem_pio2f+0x24c>
 800627c:	b121      	cbz	r1, 8006288 <__kernel_rem_pio2f+0x244>
 800627e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006282:	f842 1c04 	str.w	r1, [r2, #-4]
 8006286:	2101      	movs	r1, #1
 8006288:	f10e 0e01 	add.w	lr, lr, #1
 800628c:	4608      	mov	r0, r1
 800628e:	e787      	b.n	80061a0 <__kernel_rem_pio2f+0x15c>
 8006290:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006294:	e7f5      	b.n	8006282 <__kernel_rem_pio2f+0x23e>
 8006296:	f104 3cff 	add.w	ip, r4, #4294967295
 800629a:	aa08      	add	r2, sp, #32
 800629c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80062a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062a4:	a908      	add	r1, sp, #32
 80062a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80062aa:	e781      	b.n	80061b0 <__kernel_rem_pio2f+0x16c>
 80062ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80062b0:	aa08      	add	r2, sp, #32
 80062b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80062b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80062ba:	e7f3      	b.n	80062a4 <__kernel_rem_pio2f+0x260>
 80062bc:	a908      	add	r1, sp, #32
 80062be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80062c2:	3801      	subs	r0, #1
 80062c4:	430a      	orrs	r2, r1
 80062c6:	e7ab      	b.n	8006220 <__kernel_rem_pio2f+0x1dc>
 80062c8:	3201      	adds	r2, #1
 80062ca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d0fa      	beq.n	80062c8 <__kernel_rem_pio2f+0x284>
 80062d2:	9905      	ldr	r1, [sp, #20]
 80062d4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80062d8:	eb0d 0001 	add.w	r0, sp, r1
 80062dc:	18e6      	adds	r6, r4, r3
 80062de:	a91c      	add	r1, sp, #112	@ 0x70
 80062e0:	f104 0c01 	add.w	ip, r4, #1
 80062e4:	384c      	subs	r0, #76	@ 0x4c
 80062e6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80062ea:	4422      	add	r2, r4
 80062ec:	4562      	cmp	r2, ip
 80062ee:	da04      	bge.n	80062fa <__kernel_rem_pio2f+0x2b6>
 80062f0:	4614      	mov	r4, r2
 80062f2:	e70e      	b.n	8006112 <__kernel_rem_pio2f+0xce>
 80062f4:	9804      	ldr	r0, [sp, #16]
 80062f6:	2201      	movs	r2, #1
 80062f8:	e7e7      	b.n	80062ca <__kernel_rem_pio2f+0x286>
 80062fa:	9903      	ldr	r1, [sp, #12]
 80062fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006300:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006304:	9105      	str	r1, [sp, #20]
 8006306:	ee07 1a90 	vmov	s15, r1
 800630a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800630e:	2400      	movs	r4, #0
 8006310:	ece6 7a01 	vstmia	r6!, {s15}
 8006314:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006348 <__kernel_rem_pio2f+0x304>
 8006318:	46b1      	mov	r9, r6
 800631a:	455c      	cmp	r4, fp
 800631c:	dd04      	ble.n	8006328 <__kernel_rem_pio2f+0x2e4>
 800631e:	ece0 7a01 	vstmia	r0!, {s15}
 8006322:	f10c 0c01 	add.w	ip, ip, #1
 8006326:	e7e1      	b.n	80062ec <__kernel_rem_pio2f+0x2a8>
 8006328:	ecfe 6a01 	vldmia	lr!, {s13}
 800632c:	ed39 7a01 	vldmdb	r9!, {s14}
 8006330:	3401      	adds	r4, #1
 8006332:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006336:	e7f0      	b.n	800631a <__kernel_rem_pio2f+0x2d6>
 8006338:	08006c7c 	.word	0x08006c7c
 800633c:	08006c50 	.word	0x08006c50
 8006340:	43800000 	.word	0x43800000
 8006344:	3b800000 	.word	0x3b800000
 8006348:	00000000 	.word	0x00000000
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	eeb0 0a48 	vmov.f32	s0, s16
 8006352:	eba3 0008 	sub.w	r0, r3, r8
 8006356:	f000 f8e7 	bl	8006528 <scalbnf>
 800635a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006340 <__kernel_rem_pio2f+0x2fc>
 800635e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006366:	db19      	blt.n	800639c <__kernel_rem_pio2f+0x358>
 8006368:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8006344 <__kernel_rem_pio2f+0x300>
 800636c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006370:	aa08      	add	r2, sp, #32
 8006372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006376:	3508      	adds	r5, #8
 8006378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006384:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006388:	ee10 3a10 	vmov	r3, s0
 800638c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006390:	ee17 3a90 	vmov	r3, s15
 8006394:	3401      	adds	r4, #1
 8006396:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800639a:	e74c      	b.n	8006236 <__kernel_rem_pio2f+0x1f2>
 800639c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80063a0:	aa08      	add	r2, sp, #32
 80063a2:	ee10 3a10 	vmov	r3, s0
 80063a6:	e7f6      	b.n	8006396 <__kernel_rem_pio2f+0x352>
 80063a8:	a808      	add	r0, sp, #32
 80063aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80063ae:	9001      	str	r0, [sp, #4]
 80063b0:	ee07 0a90 	vmov	s15, r0
 80063b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b8:	3b01      	subs	r3, #1
 80063ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80063be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80063c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80063c6:	e743      	b.n	8006250 <__kernel_rem_pio2f+0x20c>
 80063c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80063cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80063d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80063d4:	3001      	adds	r0, #1
 80063d6:	4550      	cmp	r0, sl
 80063d8:	dc01      	bgt.n	80063de <__kernel_rem_pio2f+0x39a>
 80063da:	4282      	cmp	r2, r0
 80063dc:	daf4      	bge.n	80063c8 <__kernel_rem_pio2f+0x384>
 80063de:	a858      	add	r0, sp, #352	@ 0x160
 80063e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80063e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80063e8:	3b01      	subs	r3, #1
 80063ea:	e735      	b.n	8006258 <__kernel_rem_pio2f+0x214>
 80063ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	dc09      	bgt.n	8006406 <__kernel_rem_pio2f+0x3c2>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dc2b      	bgt.n	800644e <__kernel_rem_pio2f+0x40a>
 80063f6:	d044      	beq.n	8006482 <__kernel_rem_pio2f+0x43e>
 80063f8:	f009 0007 	and.w	r0, r9, #7
 80063fc:	b059      	add	sp, #356	@ 0x164
 80063fe:	ecbd 8b04 	vpop	{d8-d9}
 8006402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006406:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006408:	2b03      	cmp	r3, #3
 800640a:	d1f5      	bne.n	80063f8 <__kernel_rem_pio2f+0x3b4>
 800640c:	aa30      	add	r2, sp, #192	@ 0xc0
 800640e:	1f0b      	subs	r3, r1, #4
 8006410:	4413      	add	r3, r2
 8006412:	461a      	mov	r2, r3
 8006414:	4620      	mov	r0, r4
 8006416:	2800      	cmp	r0, #0
 8006418:	f1a2 0204 	sub.w	r2, r2, #4
 800641c:	dc52      	bgt.n	80064c4 <__kernel_rem_pio2f+0x480>
 800641e:	4622      	mov	r2, r4
 8006420:	2a01      	cmp	r2, #1
 8006422:	f1a3 0304 	sub.w	r3, r3, #4
 8006426:	dc5d      	bgt.n	80064e4 <__kernel_rem_pio2f+0x4a0>
 8006428:	ab30      	add	r3, sp, #192	@ 0xc0
 800642a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8006348 <__kernel_rem_pio2f+0x304>
 800642e:	440b      	add	r3, r1
 8006430:	2c01      	cmp	r4, #1
 8006432:	dc67      	bgt.n	8006504 <__kernel_rem_pio2f+0x4c0>
 8006434:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006438:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800643c:	2e00      	cmp	r6, #0
 800643e:	d167      	bne.n	8006510 <__kernel_rem_pio2f+0x4cc>
 8006440:	edc7 6a00 	vstr	s13, [r7]
 8006444:	ed87 7a01 	vstr	s14, [r7, #4]
 8006448:	edc7 7a02 	vstr	s15, [r7, #8]
 800644c:	e7d4      	b.n	80063f8 <__kernel_rem_pio2f+0x3b4>
 800644e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006450:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8006348 <__kernel_rem_pio2f+0x304>
 8006454:	440b      	add	r3, r1
 8006456:	4622      	mov	r2, r4
 8006458:	2a00      	cmp	r2, #0
 800645a:	da24      	bge.n	80064a6 <__kernel_rem_pio2f+0x462>
 800645c:	b34e      	cbz	r6, 80064b2 <__kernel_rem_pio2f+0x46e>
 800645e:	eef1 7a47 	vneg.f32	s15, s14
 8006462:	edc7 7a00 	vstr	s15, [r7]
 8006466:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800646a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800646e:	aa31      	add	r2, sp, #196	@ 0xc4
 8006470:	2301      	movs	r3, #1
 8006472:	429c      	cmp	r4, r3
 8006474:	da20      	bge.n	80064b8 <__kernel_rem_pio2f+0x474>
 8006476:	b10e      	cbz	r6, 800647c <__kernel_rem_pio2f+0x438>
 8006478:	eef1 7a67 	vneg.f32	s15, s15
 800647c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006480:	e7ba      	b.n	80063f8 <__kernel_rem_pio2f+0x3b4>
 8006482:	ab30      	add	r3, sp, #192	@ 0xc0
 8006484:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8006348 <__kernel_rem_pio2f+0x304>
 8006488:	440b      	add	r3, r1
 800648a:	2c00      	cmp	r4, #0
 800648c:	da05      	bge.n	800649a <__kernel_rem_pio2f+0x456>
 800648e:	b10e      	cbz	r6, 8006494 <__kernel_rem_pio2f+0x450>
 8006490:	eef1 7a67 	vneg.f32	s15, s15
 8006494:	edc7 7a00 	vstr	s15, [r7]
 8006498:	e7ae      	b.n	80063f8 <__kernel_rem_pio2f+0x3b4>
 800649a:	ed33 7a01 	vldmdb	r3!, {s14}
 800649e:	3c01      	subs	r4, #1
 80064a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064a4:	e7f1      	b.n	800648a <__kernel_rem_pio2f+0x446>
 80064a6:	ed73 7a01 	vldmdb	r3!, {s15}
 80064aa:	3a01      	subs	r2, #1
 80064ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064b0:	e7d2      	b.n	8006458 <__kernel_rem_pio2f+0x414>
 80064b2:	eef0 7a47 	vmov.f32	s15, s14
 80064b6:	e7d4      	b.n	8006462 <__kernel_rem_pio2f+0x41e>
 80064b8:	ecb2 7a01 	vldmia	r2!, {s14}
 80064bc:	3301      	adds	r3, #1
 80064be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064c2:	e7d6      	b.n	8006472 <__kernel_rem_pio2f+0x42e>
 80064c4:	edd2 7a00 	vldr	s15, [r2]
 80064c8:	edd2 6a01 	vldr	s13, [r2, #4]
 80064cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80064d0:	3801      	subs	r0, #1
 80064d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064d6:	ed82 7a00 	vstr	s14, [r2]
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064de:	edc2 7a01 	vstr	s15, [r2, #4]
 80064e2:	e798      	b.n	8006416 <__kernel_rem_pio2f+0x3d2>
 80064e4:	edd3 7a00 	vldr	s15, [r3]
 80064e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80064ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80064f0:	3a01      	subs	r2, #1
 80064f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064f6:	ed83 7a00 	vstr	s14, [r3]
 80064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8006502:	e78d      	b.n	8006420 <__kernel_rem_pio2f+0x3dc>
 8006504:	ed33 7a01 	vldmdb	r3!, {s14}
 8006508:	3c01      	subs	r4, #1
 800650a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800650e:	e78f      	b.n	8006430 <__kernel_rem_pio2f+0x3ec>
 8006510:	eef1 6a66 	vneg.f32	s13, s13
 8006514:	eeb1 7a47 	vneg.f32	s14, s14
 8006518:	edc7 6a00 	vstr	s13, [r7]
 800651c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006520:	eef1 7a67 	vneg.f32	s15, s15
 8006524:	e790      	b.n	8006448 <__kernel_rem_pio2f+0x404>
 8006526:	bf00      	nop

08006528 <scalbnf>:
 8006528:	ee10 3a10 	vmov	r3, s0
 800652c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006530:	d02b      	beq.n	800658a <scalbnf+0x62>
 8006532:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006536:	d302      	bcc.n	800653e <scalbnf+0x16>
 8006538:	ee30 0a00 	vadd.f32	s0, s0, s0
 800653c:	4770      	bx	lr
 800653e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006542:	d123      	bne.n	800658c <scalbnf+0x64>
 8006544:	4b24      	ldr	r3, [pc, #144]	@ (80065d8 <scalbnf+0xb0>)
 8006546:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80065dc <scalbnf+0xb4>
 800654a:	4298      	cmp	r0, r3
 800654c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006550:	db17      	blt.n	8006582 <scalbnf+0x5a>
 8006552:	ee10 3a10 	vmov	r3, s0
 8006556:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800655a:	3a19      	subs	r2, #25
 800655c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006560:	4288      	cmp	r0, r1
 8006562:	dd15      	ble.n	8006590 <scalbnf+0x68>
 8006564:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80065e0 <scalbnf+0xb8>
 8006568:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80065e4 <scalbnf+0xbc>
 800656c:	ee10 3a10 	vmov	r3, s0
 8006570:	eeb0 7a67 	vmov.f32	s14, s15
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfb8      	it	lt
 8006578:	eef0 7a66 	vmovlt.f32	s15, s13
 800657c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006580:	4770      	bx	lr
 8006582:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80065e8 <scalbnf+0xc0>
 8006586:	ee27 0a80 	vmul.f32	s0, s15, s0
 800658a:	4770      	bx	lr
 800658c:	0dd2      	lsrs	r2, r2, #23
 800658e:	e7e5      	b.n	800655c <scalbnf+0x34>
 8006590:	4410      	add	r0, r2
 8006592:	28fe      	cmp	r0, #254	@ 0xfe
 8006594:	dce6      	bgt.n	8006564 <scalbnf+0x3c>
 8006596:	2800      	cmp	r0, #0
 8006598:	dd06      	ble.n	80065a8 <scalbnf+0x80>
 800659a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800659e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80065a2:	ee00 3a10 	vmov	s0, r3
 80065a6:	4770      	bx	lr
 80065a8:	f110 0f16 	cmn.w	r0, #22
 80065ac:	da09      	bge.n	80065c2 <scalbnf+0x9a>
 80065ae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80065e8 <scalbnf+0xc0>
 80065b2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80065ec <scalbnf+0xc4>
 80065b6:	ee10 3a10 	vmov	r3, s0
 80065ba:	eeb0 7a67 	vmov.f32	s14, s15
 80065be:	2b00      	cmp	r3, #0
 80065c0:	e7d9      	b.n	8006576 <scalbnf+0x4e>
 80065c2:	3019      	adds	r0, #25
 80065c4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80065cc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80065f0 <scalbnf+0xc8>
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	e7d7      	b.n	8006586 <scalbnf+0x5e>
 80065d6:	bf00      	nop
 80065d8:	ffff3cb0 	.word	0xffff3cb0
 80065dc:	4c000000 	.word	0x4c000000
 80065e0:	7149f2ca 	.word	0x7149f2ca
 80065e4:	f149f2ca 	.word	0xf149f2ca
 80065e8:	0da24260 	.word	0x0da24260
 80065ec:	8da24260 	.word	0x8da24260
 80065f0:	33000000 	.word	0x33000000

080065f4 <floorf>:
 80065f4:	ee10 3a10 	vmov	r3, s0
 80065f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80065fc:	3a7f      	subs	r2, #127	@ 0x7f
 80065fe:	2a16      	cmp	r2, #22
 8006600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006604:	dc2b      	bgt.n	800665e <floorf+0x6a>
 8006606:	2a00      	cmp	r2, #0
 8006608:	da12      	bge.n	8006630 <floorf+0x3c>
 800660a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006670 <floorf+0x7c>
 800660e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006612:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661a:	dd06      	ble.n	800662a <floorf+0x36>
 800661c:	2b00      	cmp	r3, #0
 800661e:	da24      	bge.n	800666a <floorf+0x76>
 8006620:	2900      	cmp	r1, #0
 8006622:	4b14      	ldr	r3, [pc, #80]	@ (8006674 <floorf+0x80>)
 8006624:	bf08      	it	eq
 8006626:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800662a:	ee00 3a10 	vmov	s0, r3
 800662e:	4770      	bx	lr
 8006630:	4911      	ldr	r1, [pc, #68]	@ (8006678 <floorf+0x84>)
 8006632:	4111      	asrs	r1, r2
 8006634:	420b      	tst	r3, r1
 8006636:	d0fa      	beq.n	800662e <floorf+0x3a>
 8006638:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006670 <floorf+0x7c>
 800663c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006640:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006648:	ddef      	ble.n	800662a <floorf+0x36>
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfbe      	ittt	lt
 800664e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006652:	fa40 f202 	asrlt.w	r2, r0, r2
 8006656:	189b      	addlt	r3, r3, r2
 8006658:	ea23 0301 	bic.w	r3, r3, r1
 800665c:	e7e5      	b.n	800662a <floorf+0x36>
 800665e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006662:	d3e4      	bcc.n	800662e <floorf+0x3a>
 8006664:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006668:	4770      	bx	lr
 800666a:	2300      	movs	r3, #0
 800666c:	e7dd      	b.n	800662a <floorf+0x36>
 800666e:	bf00      	nop
 8006670:	7149f2ca 	.word	0x7149f2ca
 8006674:	bf800000 	.word	0xbf800000
 8006678:	007fffff 	.word	0x007fffff

0800667c <_init>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr

08006688 <_fini>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr
